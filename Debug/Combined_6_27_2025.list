
Combined_6_27_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b740  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800ba0c  0800ba0c  0000ca0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc24  0800bc24  0000cc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bc2c  0800bc2c  0000cc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bc30  0800bc30  0000cc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800bc34  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000310  24000010  0800bc44  0000d010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000320  0800bc44  0000d320  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000226a6  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003421  00000000  00000000  0002f6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a68  00000000  00000000  00032b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014a8  00000000  00000000  00034570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039883  00000000  00000000  00035a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021972  00000000  00000000  0006f29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00175584  00000000  00000000  00090c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00206191  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000074b8  00000000  00000000  002061d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  0020d68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800b9f4 	.word	0x0800b9f4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800b9f4 	.word	0x0800b9f4

0800030c <strlen>:
 800030c:	4603      	mov	r3, r0
 800030e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000312:	2a00      	cmp	r2, #0
 8000314:	d1fb      	bne.n	800030e <strlen+0x2>
 8000316:	1a18      	subs	r0, r3, r0
 8000318:	3801      	subs	r0, #1
 800031a:	4770      	bx	lr

0800031c <__aeabi_uldivmod>:
 800031c:	b953      	cbnz	r3, 8000334 <__aeabi_uldivmod+0x18>
 800031e:	b94a      	cbnz	r2, 8000334 <__aeabi_uldivmod+0x18>
 8000320:	2900      	cmp	r1, #0
 8000322:	bf08      	it	eq
 8000324:	2800      	cmpeq	r0, #0
 8000326:	bf1c      	itt	ne
 8000328:	f04f 31ff 	movne.w	r1, #4294967295
 800032c:	f04f 30ff 	movne.w	r0, #4294967295
 8000330:	f000 b988 	b.w	8000644 <__aeabi_idiv0>
 8000334:	f1ad 0c08 	sub.w	ip, sp, #8
 8000338:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033c:	f000 f806 	bl	800034c <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4770      	bx	lr

0800034c <__udivmoddi4>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	9d08      	ldr	r5, [sp, #32]
 8000352:	468e      	mov	lr, r1
 8000354:	4604      	mov	r4, r0
 8000356:	4688      	mov	r8, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14a      	bne.n	80003f2 <__udivmoddi4+0xa6>
 800035c:	428a      	cmp	r2, r1
 800035e:	4617      	mov	r7, r2
 8000360:	d962      	bls.n	8000428 <__udivmoddi4+0xdc>
 8000362:	fab2 f682 	clz	r6, r2
 8000366:	b14e      	cbz	r6, 800037c <__udivmoddi4+0x30>
 8000368:	f1c6 0320 	rsb	r3, r6, #32
 800036c:	fa01 f806 	lsl.w	r8, r1, r6
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	40b7      	lsls	r7, r6
 8000376:	ea43 0808 	orr.w	r8, r3, r8
 800037a:	40b4      	lsls	r4, r6
 800037c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fbb8 f1fe 	udiv	r1, r8, lr
 8000388:	0c23      	lsrs	r3, r4, #16
 800038a:	fb0e 8811 	mls	r8, lr, r1, r8
 800038e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000392:	fb01 f20c 	mul.w	r2, r1, ip
 8000396:	429a      	cmp	r2, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x62>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a0:	f080 80ea 	bcs.w	8000578 <__udivmoddi4+0x22c>
 80003a4:	429a      	cmp	r2, r3
 80003a6:	f240 80e7 	bls.w	8000578 <__udivmoddi4+0x22c>
 80003aa:	3902      	subs	r1, #2
 80003ac:	443b      	add	r3, r7
 80003ae:	1a9a      	subs	r2, r3, r2
 80003b0:	b2a3      	uxth	r3, r4
 80003b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003be:	fb00 fc0c 	mul.w	ip, r0, ip
 80003c2:	459c      	cmp	ip, r3
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0x8e>
 80003c6:	18fb      	adds	r3, r7, r3
 80003c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003cc:	f080 80d6 	bcs.w	800057c <__udivmoddi4+0x230>
 80003d0:	459c      	cmp	ip, r3
 80003d2:	f240 80d3 	bls.w	800057c <__udivmoddi4+0x230>
 80003d6:	443b      	add	r3, r7
 80003d8:	3802      	subs	r0, #2
 80003da:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003de:	eba3 030c 	sub.w	r3, r3, ip
 80003e2:	2100      	movs	r1, #0
 80003e4:	b11d      	cbz	r5, 80003ee <__udivmoddi4+0xa2>
 80003e6:	40f3      	lsrs	r3, r6
 80003e8:	2200      	movs	r2, #0
 80003ea:	e9c5 3200 	strd	r3, r2, [r5]
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d905      	bls.n	8000402 <__udivmoddi4+0xb6>
 80003f6:	b10d      	cbz	r5, 80003fc <__udivmoddi4+0xb0>
 80003f8:	e9c5 0100 	strd	r0, r1, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	4608      	mov	r0, r1
 8000400:	e7f5      	b.n	80003ee <__udivmoddi4+0xa2>
 8000402:	fab3 f183 	clz	r1, r3
 8000406:	2900      	cmp	r1, #0
 8000408:	d146      	bne.n	8000498 <__udivmoddi4+0x14c>
 800040a:	4573      	cmp	r3, lr
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xc8>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 8105 	bhi.w	800061e <__udivmoddi4+0x2d2>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb6e 0203 	sbc.w	r2, lr, r3
 800041a:	2001      	movs	r0, #1
 800041c:	4690      	mov	r8, r2
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e5      	beq.n	80003ee <__udivmoddi4+0xa2>
 8000422:	e9c5 4800 	strd	r4, r8, [r5]
 8000426:	e7e2      	b.n	80003ee <__udivmoddi4+0xa2>
 8000428:	2a00      	cmp	r2, #0
 800042a:	f000 8090 	beq.w	800054e <__udivmoddi4+0x202>
 800042e:	fab2 f682 	clz	r6, r2
 8000432:	2e00      	cmp	r6, #0
 8000434:	f040 80a4 	bne.w	8000580 <__udivmoddi4+0x234>
 8000438:	1a8a      	subs	r2, r1, r2
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	b280      	uxth	r0, r0
 8000442:	b2bc      	uxth	r4, r7
 8000444:	2101      	movs	r1, #1
 8000446:	fbb2 fcfe 	udiv	ip, r2, lr
 800044a:	fb0e 221c 	mls	r2, lr, ip, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb04 f20c 	mul.w	r2, r4, ip
 8000456:	429a      	cmp	r2, r3
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x11e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x11c>
 8000462:	429a      	cmp	r2, r3
 8000464:	f200 80e0 	bhi.w	8000628 <__udivmoddi4+0x2dc>
 8000468:	46c4      	mov	ip, r8
 800046a:	1a9b      	subs	r3, r3, r2
 800046c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000470:	fb0e 3312 	mls	r3, lr, r2, r3
 8000474:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000478:	fb02 f404 	mul.w	r4, r2, r4
 800047c:	429c      	cmp	r4, r3
 800047e:	d907      	bls.n	8000490 <__udivmoddi4+0x144>
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	f102 30ff 	add.w	r0, r2, #4294967295
 8000486:	d202      	bcs.n	800048e <__udivmoddi4+0x142>
 8000488:	429c      	cmp	r4, r3
 800048a:	f200 80ca 	bhi.w	8000622 <__udivmoddi4+0x2d6>
 800048e:	4602      	mov	r2, r0
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000496:	e7a5      	b.n	80003e4 <__udivmoddi4+0x98>
 8000498:	f1c1 0620 	rsb	r6, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 f706 	lsr.w	r7, r2, r6
 80004a2:	431f      	orrs	r7, r3
 80004a4:	fa0e f401 	lsl.w	r4, lr, r1
 80004a8:	fa20 f306 	lsr.w	r3, r0, r6
 80004ac:	fa2e fe06 	lsr.w	lr, lr, r6
 80004b0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fa00 f801 	lsl.w	r8, r0, r1
 80004ba:	fa1f fc87 	uxth.w	ip, r7
 80004be:	fbbe f0f9 	udiv	r0, lr, r9
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	fb09 ee10 	mls	lr, r9, r0, lr
 80004c8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004cc:	fb00 fe0c 	mul.w	lr, r0, ip
 80004d0:	45a6      	cmp	lr, r4
 80004d2:	fa02 f201 	lsl.w	r2, r2, r1
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x1a0>
 80004d8:	193c      	adds	r4, r7, r4
 80004da:	f100 3aff 	add.w	sl, r0, #4294967295
 80004de:	f080 809c 	bcs.w	800061a <__udivmoddi4+0x2ce>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	f240 8099 	bls.w	800061a <__udivmoddi4+0x2ce>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	eba4 040e 	sub.w	r4, r4, lr
 80004f0:	fa1f fe83 	uxth.w	lr, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000500:	fb03 fc0c 	mul.w	ip, r3, ip
 8000504:	45a4      	cmp	ip, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1ce>
 8000508:	193c      	adds	r4, r7, r4
 800050a:	f103 3eff 	add.w	lr, r3, #4294967295
 800050e:	f080 8082 	bcs.w	8000616 <__udivmoddi4+0x2ca>
 8000512:	45a4      	cmp	ip, r4
 8000514:	d97f      	bls.n	8000616 <__udivmoddi4+0x2ca>
 8000516:	3b02      	subs	r3, #2
 8000518:	443c      	add	r4, r7
 800051a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800051e:	eba4 040c 	sub.w	r4, r4, ip
 8000522:	fba0 ec02 	umull	lr, ip, r0, r2
 8000526:	4564      	cmp	r4, ip
 8000528:	4673      	mov	r3, lr
 800052a:	46e1      	mov	r9, ip
 800052c:	d362      	bcc.n	80005f4 <__udivmoddi4+0x2a8>
 800052e:	d05f      	beq.n	80005f0 <__udivmoddi4+0x2a4>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x1fe>
 8000532:	ebb8 0203 	subs.w	r2, r8, r3
 8000536:	eb64 0409 	sbc.w	r4, r4, r9
 800053a:	fa04 f606 	lsl.w	r6, r4, r6
 800053e:	fa22 f301 	lsr.w	r3, r2, r1
 8000542:	431e      	orrs	r6, r3
 8000544:	40cc      	lsrs	r4, r1
 8000546:	e9c5 6400 	strd	r6, r4, [r5]
 800054a:	2100      	movs	r1, #0
 800054c:	e74f      	b.n	80003ee <__udivmoddi4+0xa2>
 800054e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000552:	0c01      	lsrs	r1, r0, #16
 8000554:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000558:	b280      	uxth	r0, r0
 800055a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800055e:	463b      	mov	r3, r7
 8000560:	4638      	mov	r0, r7
 8000562:	463c      	mov	r4, r7
 8000564:	46b8      	mov	r8, r7
 8000566:	46be      	mov	lr, r7
 8000568:	2620      	movs	r6, #32
 800056a:	fbb1 f1f7 	udiv	r1, r1, r7
 800056e:	eba2 0208 	sub.w	r2, r2, r8
 8000572:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000576:	e766      	b.n	8000446 <__udivmoddi4+0xfa>
 8000578:	4601      	mov	r1, r0
 800057a:	e718      	b.n	80003ae <__udivmoddi4+0x62>
 800057c:	4610      	mov	r0, r2
 800057e:	e72c      	b.n	80003da <__udivmoddi4+0x8e>
 8000580:	f1c6 0220 	rsb	r2, r6, #32
 8000584:	fa2e f302 	lsr.w	r3, lr, r2
 8000588:	40b7      	lsls	r7, r6
 800058a:	40b1      	lsls	r1, r6
 800058c:	fa20 f202 	lsr.w	r2, r0, r2
 8000590:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000594:	430a      	orrs	r2, r1
 8000596:	fbb3 f8fe 	udiv	r8, r3, lr
 800059a:	b2bc      	uxth	r4, r7
 800059c:	fb0e 3318 	mls	r3, lr, r8, r3
 80005a0:	0c11      	lsrs	r1, r2, #16
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb08 f904 	mul.w	r9, r8, r4
 80005aa:	40b0      	lsls	r0, r6
 80005ac:	4589      	cmp	r9, r1
 80005ae:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005b2:	b280      	uxth	r0, r0
 80005b4:	d93e      	bls.n	8000634 <__udivmoddi4+0x2e8>
 80005b6:	1879      	adds	r1, r7, r1
 80005b8:	f108 3cff 	add.w	ip, r8, #4294967295
 80005bc:	d201      	bcs.n	80005c2 <__udivmoddi4+0x276>
 80005be:	4589      	cmp	r9, r1
 80005c0:	d81f      	bhi.n	8000602 <__udivmoddi4+0x2b6>
 80005c2:	eba1 0109 	sub.w	r1, r1, r9
 80005c6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ca:	fb09 f804 	mul.w	r8, r9, r4
 80005ce:	fb0e 1119 	mls	r1, lr, r9, r1
 80005d2:	b292      	uxth	r2, r2
 80005d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005d8:	4542      	cmp	r2, r8
 80005da:	d229      	bcs.n	8000630 <__udivmoddi4+0x2e4>
 80005dc:	18ba      	adds	r2, r7, r2
 80005de:	f109 31ff 	add.w	r1, r9, #4294967295
 80005e2:	d2c4      	bcs.n	800056e <__udivmoddi4+0x222>
 80005e4:	4542      	cmp	r2, r8
 80005e6:	d2c2      	bcs.n	800056e <__udivmoddi4+0x222>
 80005e8:	f1a9 0102 	sub.w	r1, r9, #2
 80005ec:	443a      	add	r2, r7
 80005ee:	e7be      	b.n	800056e <__udivmoddi4+0x222>
 80005f0:	45f0      	cmp	r8, lr
 80005f2:	d29d      	bcs.n	8000530 <__udivmoddi4+0x1e4>
 80005f4:	ebbe 0302 	subs.w	r3, lr, r2
 80005f8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005fc:	3801      	subs	r0, #1
 80005fe:	46e1      	mov	r9, ip
 8000600:	e796      	b.n	8000530 <__udivmoddi4+0x1e4>
 8000602:	eba7 0909 	sub.w	r9, r7, r9
 8000606:	4449      	add	r1, r9
 8000608:	f1a8 0c02 	sub.w	ip, r8, #2
 800060c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000610:	fb09 f804 	mul.w	r8, r9, r4
 8000614:	e7db      	b.n	80005ce <__udivmoddi4+0x282>
 8000616:	4673      	mov	r3, lr
 8000618:	e77f      	b.n	800051a <__udivmoddi4+0x1ce>
 800061a:	4650      	mov	r0, sl
 800061c:	e766      	b.n	80004ec <__udivmoddi4+0x1a0>
 800061e:	4608      	mov	r0, r1
 8000620:	e6fd      	b.n	800041e <__udivmoddi4+0xd2>
 8000622:	443b      	add	r3, r7
 8000624:	3a02      	subs	r2, #2
 8000626:	e733      	b.n	8000490 <__udivmoddi4+0x144>
 8000628:	f1ac 0c02 	sub.w	ip, ip, #2
 800062c:	443b      	add	r3, r7
 800062e:	e71c      	b.n	800046a <__udivmoddi4+0x11e>
 8000630:	4649      	mov	r1, r9
 8000632:	e79c      	b.n	800056e <__udivmoddi4+0x222>
 8000634:	eba1 0109 	sub.w	r1, r1, r9
 8000638:	46c4      	mov	ip, r8
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	e7c4      	b.n	80005ce <__udivmoddi4+0x282>

08000644 <__aeabi_idiv0>:
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	@ 0x70
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000652:	224c      	movs	r2, #76	@ 0x4c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f00b f992 	bl	800b980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2220      	movs	r2, #32
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f00b f98c 	bl	800b980 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000668:	2002      	movs	r0, #2
 800066a:	f005 fb19 	bl	8005ca0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <SystemClock_Config+0xd8>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a2a      	ldr	r2, [pc, #168]	@ (8000720 <SystemClock_Config+0xd8>)
 8000678:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b28      	ldr	r3, [pc, #160]	@ (8000720 <SystemClock_Config+0xd8>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800068a:	bf00      	nop
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <SystemClock_Config+0xd8>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000698:	d1f8      	bne.n	800068c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069a:	2302      	movs	r3, #2
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800069e:	2301      	movs	r3, #1
 80006a0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006a2:	2340      	movs	r3, #64	@ 0x40
 80006a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006aa:	2300      	movs	r3, #0
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80006b2:	230c      	movs	r3, #12
 80006b4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006c2:	230c      	movs	r3, #12
 80006c4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006c6:	2300      	movs	r3, #0
 80006c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 fb1e 	bl	8005d14 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006de:	f000 fac3 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	233f      	movs	r3, #63	@ 0x3f
 80006e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2303      	movs	r3, #3
 80006e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006f2:	2340      	movs	r3, #64	@ 0x40
 80006f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006f6:	2340      	movs	r3, #64	@ 0x40
 80006f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000700:	2340      	movs	r3, #64	@ 0x40
 8000702:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f005 fedd 	bl	80064c8 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000714:	f000 faa8 	bl	8000c68 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3770      	adds	r7, #112	@ 0x70
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58024800 	.word	0x58024800

08000724 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	@ 0x30
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800072a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2224      	movs	r2, #36	@ 0x24
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f00b f91f 	bl	800b980 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000742:	4b33      	ldr	r3, [pc, #204]	@ (8000810 <MX_ADC1_Init+0xec>)
 8000744:	4a33      	ldr	r2, [pc, #204]	@ (8000814 <MX_ADC1_Init+0xf0>)
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000748:	4b31      	ldr	r3, [pc, #196]	@ (8000810 <MX_ADC1_Init+0xec>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800074e:	4b30      	ldr	r3, [pc, #192]	@ (8000810 <MX_ADC1_Init+0xec>)
 8000750:	2204      	movs	r2, #4
 8000752:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000754:	4b2e      	ldr	r3, [pc, #184]	@ (8000810 <MX_ADC1_Init+0xec>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800075a:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <MX_ADC1_Init+0xec>)
 800075c:	2208      	movs	r2, #8
 800075e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000760:	4b2b      	ldr	r3, [pc, #172]	@ (8000810 <MX_ADC1_Init+0xec>)
 8000762:	2200      	movs	r2, #0
 8000764:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000766:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <MX_ADC1_Init+0xec>)
 8000768:	2201      	movs	r2, #1
 800076a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800076c:	4b28      	ldr	r3, [pc, #160]	@ (8000810 <MX_ADC1_Init+0xec>)
 800076e:	2201      	movs	r2, #1
 8000770:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000772:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <MX_ADC1_Init+0xec>)
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800077a:	4b25      	ldr	r3, [pc, #148]	@ (8000810 <MX_ADC1_Init+0xec>)
 800077c:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8000780:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <MX_ADC1_Init+0xec>)
 8000784:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000788:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800078a:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <MX_ADC1_Init+0xec>)
 800078c:	2203      	movs	r2, #3
 800078e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <MX_ADC1_Init+0xec>)
 8000792:	2200      	movs	r2, #0
 8000794:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000796:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <MX_ADC1_Init+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_ADC1_Init+0xec>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <MX_ADC1_Init+0xec>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007aa:	4819      	ldr	r0, [pc, #100]	@ (8000810 <MX_ADC1_Init+0xec>)
 80007ac:	f001 fa6e 	bl	8001c8c <HAL_ADC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80007b6:	f000 fa57 	bl	8000c68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c2:	4619      	mov	r1, r3
 80007c4:	4812      	ldr	r0, [pc, #72]	@ (8000810 <MX_ADC1_Init+0xec>)
 80007c6:	f002 fc99 	bl	80030fc <HAL_ADCEx_MultiModeConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80007d0:	f000 fa4a 	bl	8000c68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MX_ADC1_Init+0xf4>)
 80007d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d8:	2306      	movs	r3, #6
 80007da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 80007dc:	2305      	movs	r3, #5
 80007de:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007e0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e6:	2304      	movs	r3, #4
 80007e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_ADC1_Init+0xec>)
 80007fa:	f001 fe0d 	bl	8002418 <HAL_ADC_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000804:	f000 fa30 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3730      	adds	r7, #48	@ 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2400002c 	.word	0x2400002c
 8000814:	40022000 	.word	0x40022000
 8000818:	08600004 	.word	0x08600004

0800081c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_FDCAN1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000820:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000822:	4a2f      	ldr	r2, [pc, #188]	@ (80008e0 <MX_FDCAN1_Init+0xc4>)
 8000824:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000826:	4b2d      	ldr	r3, [pc, #180]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800082c:	4b2b      	ldr	r3, [pc, #172]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000832:	4b2a      	ldr	r3, [pc, #168]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000834:	2201      	movs	r2, #1
 8000836:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000838:	4b28      	ldr	r3, [pc, #160]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 800083a:	2200      	movs	r2, #0
 800083c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800083e:	4b27      	ldr	r3, [pc, #156]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000840:	2200      	movs	r2, #0
 8000842:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000844:	4b25      	ldr	r3, [pc, #148]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000846:	2201      	movs	r2, #1
 8000848:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 12;
 800084a:	4b24      	ldr	r3, [pc, #144]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 800084c:	220c      	movs	r2, #12
 800084e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 83;
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000852:	2253      	movs	r2, #83	@ 0x53
 8000854:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 12;
 8000856:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000858:	220c      	movs	r2, #12
 800085a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 800085c:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 800085e:	2202      	movs	r2, #2
 8000860:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 11;
 8000862:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000864:	220b      	movs	r2, #11
 8000866:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 12;
 8000868:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 800086a:	220c      	movs	r2, #12
 800086c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 11;
 800086e:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000870:	220b      	movs	r2, #11
 8000872:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000874:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000876:	2200      	movs	r2, #0
 8000878:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 800087c:	2201      	movs	r2, #1
 800087e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000880:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000886:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 800088e:	2205      	movs	r2, #5
 8000890:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_12;
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 800089a:	2205      	movs	r2, #5
 800089c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_12;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 80008a6:	2205      	movs	r2, #5
 80008a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 1;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 80008c4:	2205      	movs	r2, #5
 80008c6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_FDCAN1_Init+0xc0>)
 80008ca:	f004 fb13 	bl	8004ef4 <HAL_FDCAN_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008d4:	f000 f9c8 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	24000114 	.word	0x24000114
 80008e0:	4000a000 	.word	0x4000a000

080008e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e8:	4b27      	ldr	r3, [pc, #156]	@ (8000988 <MX_SPI1_Init+0xa4>)
 80008ea:	4a28      	ldr	r2, [pc, #160]	@ (800098c <MX_SPI1_Init+0xa8>)
 80008ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ee:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <MX_SPI1_Init+0xa4>)
 80008f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80008f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008f6:	4b24      	ldr	r3, [pc, #144]	@ (8000988 <MX_SPI1_Init+0xa4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_12BIT;
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <MX_SPI1_Init+0xa4>)
 80008fe:	220b      	movs	r2, #11
 8000900:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000902:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000908:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <MX_SPI1_Init+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800090e:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000910:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000914:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000916:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000918:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800091c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091e:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000924:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092a:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <MX_SPI1_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000930:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000936:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800093c:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <MX_SPI1_Init+0xa4>)
 800093e:	2200      	movs	r2, #0
 8000940:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000942:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000944:	2200      	movs	r2, #0
 8000946:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_SPI1_Init+0xa4>)
 800094a:	2200      	movs	r2, #0
 800094c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800094e:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000954:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <MX_SPI1_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000960:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000962:	2200      	movs	r2, #0
 8000964:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000968:	2200      	movs	r2, #0
 800096a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <MX_SPI1_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_SPI1_Init+0xa4>)
 8000974:	f008 fd1a 	bl	80093ac <HAL_SPI_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800097e:	f000 f973 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	240001b4 	.word	0x240001b4
 800098c:	40013000 	.word	0x40013000

08000990 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000a24 <MX_TIM3_Init+0x94>)
 80009b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <MX_TIM3_Init+0x98>)
 80009b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1919;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_TIM3_Init+0x94>)
 80009b6:	f240 727f 	movw	r2, #1919	@ 0x77f
 80009ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <MX_TIM3_Init+0x94>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_TIM3_Init+0x94>)
 80009c4:	2263      	movs	r2, #99	@ 0x63
 80009c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <MX_TIM3_Init+0x94>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <MX_TIM3_Init+0x94>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d4:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <MX_TIM3_Init+0x94>)
 80009d6:	f009 fa30 	bl	8009e3a <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009e0:	f000 f942 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	4619      	mov	r1, r3
 80009f0:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <MX_TIM3_Init+0x94>)
 80009f2:	f009 fa79 	bl	8009ee8 <HAL_TIM_ConfigClockSource>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80009fc:	f000 f934 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a00:	2320      	movs	r3, #32
 8000a02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_TIM3_Init+0x94>)
 8000a0e:	f009 fcad 	bl	800a36c <HAL_TIMEx_MasterConfigSynchronization>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a18:	f000 f926 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3720      	adds	r7, #32
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2400023c 	.word	0x2400023c
 8000a28:	40000400 	.word	0x40000400

08000a2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a30:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a32:	4a23      	ldr	r2, [pc, #140]	@ (8000ac0 <MX_USART3_UART_Init+0x94>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a74:	4811      	ldr	r0, [pc, #68]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a76:	f009 fd15 	bl	800a4a4 <HAL_UART_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a80:	f000 f8f2 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	480d      	ldr	r0, [pc, #52]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a88:	f00a feaf 	bl	800b7ea <HAL_UARTEx_SetTxFifoThreshold>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a92:	f000 f8e9 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4808      	ldr	r0, [pc, #32]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000a9a:	f00a fee4 	bl	800b866 <HAL_UARTEx_SetRxFifoThreshold>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 f8e0 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	@ (8000abc <MX_USART3_UART_Init+0x90>)
 8000aaa:	f00a fe65 	bl	800b778 <HAL_UARTEx_DisableFifoMode>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab4:	f000 f8d8 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	24000288 	.word	0x24000288
 8000ac0:	40004800 	.word	0x40004800

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	@ 0x30
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b49      	ldr	r3, [pc, #292]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	4a47      	ldr	r2, [pc, #284]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aea:	4b45      	ldr	r3, [pc, #276]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b41      	ldr	r3, [pc, #260]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afe:	4a40      	ldr	r2, [pc, #256]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b08:	4b3d      	ldr	r3, [pc, #244]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	4b3a      	ldr	r3, [pc, #232]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	4a38      	ldr	r2, [pc, #224]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b26:	4b36      	ldr	r3, [pc, #216]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b34:	4b32      	ldr	r3, [pc, #200]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	4a31      	ldr	r2, [pc, #196]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b3c:	f043 0320 	orr.w	r3, r3, #32
 8000b40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b44:	4b2e      	ldr	r3, [pc, #184]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4a:	f003 0320 	and.w	r3, r3, #32
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b52:	4b2b      	ldr	r3, [pc, #172]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b58:	4a29      	ldr	r2, [pc, #164]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b5a:	f043 0308 	orr.w	r3, r3, #8
 8000b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b62:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b68:	f003 0308 	and.w	r3, r3, #8
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b70:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b76:	4a22      	ldr	r2, [pc, #136]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b78:	f043 0310 	orr.w	r3, r3, #16
 8000b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b80:	4b1f      	ldr	r3, [pc, #124]	@ (8000c00 <MX_GPIO_Init+0x13c>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b94:	481b      	ldr	r0, [pc, #108]	@ (8000c04 <MX_GPIO_Init+0x140>)
 8000b96:	f005 f869 	bl	8005c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	481a      	ldr	r0, [pc, #104]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000ba0:	f005 f864 	bl	8005c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4814      	ldr	r0, [pc, #80]	@ (8000c0c <MX_GPIO_Init+0x148>)
 8000bba:	f004 feaf 	bl	800591c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000bbe:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480b      	ldr	r0, [pc, #44]	@ (8000c04 <MX_GPIO_Init+0x140>)
 8000bd8:	f004 fea0 	bl	800591c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 031c 	add.w	r3, r7, #28
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_GPIO_Init+0x144>)
 8000bf4:	f004 fe92 	bl	800591c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3730      	adds	r7, #48	@ 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	58024400 	.word	0x58024400
 8000c04:	58020400 	.word	0x58020400
 8000c08:	58021000 	.word	0x58021000
 8000c0c:	58020800 	.word	0x58020800

08000c10 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c22:	f002 fc31 	bl	8003488 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c26:	2301      	movs	r3, #1
 8000c28:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c32:	231f      	movs	r3, #31
 8000c34:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c36:	2387      	movs	r3, #135	@ 0x87
 8000c38:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c42:	2301      	movs	r3, #1
 8000c44:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c46:	2301      	movs	r3, #1
 8000c48:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c52:	463b      	mov	r3, r7
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 fc4f 	bl	80034f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c5a:	2004      	movs	r0, #4
 8000c5c:	f002 fc2c 	bl	80034b8 <HAL_MPU_Enable>

}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <Error_Handler+0x8>

08000c74 <_Z13UARTtxMessagePKc>:

HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc1);


//Sending messages to the serial port
void UARTtxMessage(const char* msg) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff fb45 	bl	800030c <strlen>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	4803      	ldr	r0, [pc, #12]	@ (8000c9c <_Z13UARTtxMessagePKc+0x28>)
 8000c8e:	f009 fc59 	bl	800a544 <HAL_UART_Transmit>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	24000288 	.word	0x24000288

08000ca0 <_ZN15Microcontroller9testFDCANEv>:



void Microcontroller::testFDCAN() {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b094      	sub	sp, #80	@ 0x50
 8000ca4:	af00      	add	r7, sp, #0
    MX_FDCAN1_Init();
 8000ca6:	f7ff fdb9 	bl	800081c <MX_FDCAN1_Init>
    UARTtxMessage("Initialized FDCAN \r\n");
 8000caa:	4840      	ldr	r0, [pc, #256]	@ (8000dac <_ZN15Microcontroller9testFDCANEv+0x10c>)
 8000cac:	f7ff ffe2 	bl	8000c74 <_Z13UARTtxMessagePKc>

    // === Configure TX Header ===
    FDCAN_TxHeaderTypeDef TxHeader = {};
 8000cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb4:	2224      	movs	r2, #36	@ 0x24
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f00a fe61 	bl	800b980 <memset>
    TxHeader.Identifier = 0x123;
 8000cbe:	f240 1323 	movw	r3, #291	@ 0x123
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TxHeader.IdType = FDCAN_STANDARD_ID;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	@ 0x30
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	637b      	str	r3, [r7, #52]	@ 0x34
    TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	63bb      	str	r3, [r7, #56]	@ 0x38
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000cd4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000cd8:	643b      	str	r3, [r7, #64]	@ 0x40
    TxHeader.FDFormat = FDCAN_FD_CAN;
 8000cda:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000cde:	647b      	str	r3, [r7, #68]	@ 0x44
    TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
    TxHeader.MessageMarker = 0x0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // === Configure Filter (to RX buffer 0) ===
    FDCAN_FilterTypeDef sFilterConfig = {};
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2220      	movs	r2, #32
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f00a fe45 	bl	800b980 <memset>
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterIndex = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXBUFFER;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterID1 = 0x2;  // Accept ID 0x2 (for test or echo)
 8000d02:	2302      	movs	r3, #2
 8000d04:	61fb      	str	r3, [r7, #28]
    sFilterConfig.RxBufferIndex = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000d0a:	f107 030c 	add.w	r3, r7, #12
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4827      	ldr	r0, [pc, #156]	@ (8000db0 <_ZN15Microcontroller9testFDCANEv+0x110>)
 8000d12:	f004 facd 	bl	80052b0 <HAL_FDCAN_ConfigFilter>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <_ZN15Microcontroller9testFDCANEv+0x8e>
        UARTtxMessage("FDCAN Filter Config Failed\r\n");
 8000d26:	4823      	ldr	r0, [pc, #140]	@ (8000db4 <_ZN15Microcontroller9testFDCANEv+0x114>)
 8000d28:	f7ff ffa4 	bl	8000c74 <_Z13UARTtxMessagePKc>
        return;
 8000d2c:	e03a      	b.n	8000da4 <_ZN15Microcontroller9testFDCANEv+0x104>
    }

    // === Start CAN Peripheral ===
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000d2e:	4820      	ldr	r0, [pc, #128]	@ (8000db0 <_ZN15Microcontroller9testFDCANEv+0x110>)
 8000d30:	f004 fb34 	bl	800539c <HAL_FDCAN_Start>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	bf14      	ite	ne
 8000d3a:	2301      	movne	r3, #1
 8000d3c:	2300      	moveq	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <_ZN15Microcontroller9testFDCANEv+0xac>
        UARTtxMessage("FDCAN Start Failed\r\n");
 8000d44:	481c      	ldr	r0, [pc, #112]	@ (8000db8 <_ZN15Microcontroller9testFDCANEv+0x118>)
 8000d46:	f7ff ff95 	bl	8000c74 <_Z13UARTtxMessagePKc>
        return;
 8000d4a:	e02b      	b.n	8000da4 <_ZN15Microcontroller9testFDCANEv+0x104>
    }

    // === Add Message to TX Buffer ===
    uint8_t TxData[8] = {0x10, 0x32, 0x54, 0x76, 0x98, 0x00, 0x11, 0x22};
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dbc <_ZN15Microcontroller9testFDCANEv+0x11c>)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d54:	e883 0003 	stmia.w	r3, {r0, r1}
    if (HAL_FDCAN_AddMessageToTxBuffer(&hfdcan1, &TxHeader, TxData, FDCAN_TX_BUFFER0) != HAL_OK) {
 8000d58:	1d3a      	adds	r2, r7, #4
 8000d5a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000d5e:	2301      	movs	r3, #1
 8000d60:	4813      	ldr	r0, [pc, #76]	@ (8000db0 <_ZN15Microcontroller9testFDCANEv+0x110>)
 8000d62:	f004 fb46 	bl	80053f2 <HAL_FDCAN_AddMessageToTxBuffer>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	bf14      	ite	ne
 8000d6c:	2301      	movne	r3, #1
 8000d6e:	2300      	moveq	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <_ZN15Microcontroller9testFDCANEv+0xde>
        UARTtxMessage("Add to TX Buffer Failed\r\n");
 8000d76:	4812      	ldr	r0, [pc, #72]	@ (8000dc0 <_ZN15Microcontroller9testFDCANEv+0x120>)
 8000d78:	f7ff ff7c 	bl	8000c74 <_Z13UARTtxMessagePKc>
        return;
 8000d7c:	e012      	b.n	8000da4 <_ZN15Microcontroller9testFDCANEv+0x104>
    }

    // === Request Transmission ===
    if (HAL_FDCAN_EnableTxBufferRequest(&hfdcan1, FDCAN_TX_BUFFER0) != HAL_OK) {
 8000d7e:	2101      	movs	r1, #1
 8000d80:	480b      	ldr	r0, [pc, #44]	@ (8000db0 <_ZN15Microcontroller9testFDCANEv+0x110>)
 8000d82:	f004 fba6 	bl	80054d2 <HAL_FDCAN_EnableTxBufferRequest>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf14      	ite	ne
 8000d8c:	2301      	movne	r3, #1
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <_ZN15Microcontroller9testFDCANEv+0xfe>
        UARTtxMessage("TX Buffer Request Failed\r\n");
 8000d96:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <_ZN15Microcontroller9testFDCANEv+0x124>)
 8000d98:	f7ff ff6c 	bl	8000c74 <_Z13UARTtxMessagePKc>
        return;
 8000d9c:	e002      	b.n	8000da4 <_ZN15Microcontroller9testFDCANEv+0x104>
    }


    UARTtxMessage("FDCAN Message Sent!\r\n");
 8000d9e:	480a      	ldr	r0, [pc, #40]	@ (8000dc8 <_ZN15Microcontroller9testFDCANEv+0x128>)
 8000da0:	f7ff ff68 	bl	8000c74 <_Z13UARTtxMessagePKc>
}
 8000da4:	3750      	adds	r7, #80	@ 0x50
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	0800ba0c 	.word	0x0800ba0c
 8000db0:	24000114 	.word	0x24000114
 8000db4:	0800ba24 	.word	0x0800ba24
 8000db8:	0800ba44 	.word	0x0800ba44
 8000dbc:	0800baac 	.word	0x0800baac
 8000dc0:	0800ba5c 	.word	0x0800ba5c
 8000dc4:	0800ba78 	.word	0x0800ba78
 8000dc8:	0800ba94 	.word	0x0800ba94

08000dcc <_ZN15Microcontroller7testSPIEv>:


void Microcontroller::testSPI() {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af02      	add	r7, sp, #8
    MX_SPI1_Init();
 8000dd2:	f7ff fd87 	bl	80008e4 <MX_SPI1_Init>
	UARTtxMessage("Initialized SPI \r\n");
 8000dd6:	4812      	ldr	r0, [pc, #72]	@ (8000e20 <_ZN15Microcontroller7testSPIEv+0x54>)
 8000dd8:	f7ff ff4c 	bl	8000c74 <_Z13UARTtxMessagePKc>

	uint8_t txData[] = {0xAA, 0x55};
 8000ddc:	f245 53aa 	movw	r3, #21930	@ 0x55aa
 8000de0:	80bb      	strh	r3, [r7, #4]
	uint8_t rxData[2] = {};
 8000de2:	2300      	movs	r3, #0
 8000de4:	803b      	strh	r3, [r7, #0]
	if (HAL_SPI_TransmitReceive(&hspi1, txData, rxData, sizeof(txData), HAL_MAX_DELAY) == HAL_OK) {
 8000de6:	463a      	mov	r2, r7
 8000de8:	1d39      	adds	r1, r7, #4
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2302      	movs	r3, #2
 8000df2:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <_ZN15Microcontroller7testSPIEv+0x58>)
 8000df4:	f008 fbfe 	bl	80095f4 <HAL_SPI_TransmitReceive>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	bf0c      	ite	eq
 8000dfe:	2301      	moveq	r3, #1
 8000e00:	2300      	movne	r3, #0
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <_ZN15Microcontroller7testSPIEv+0x44>
		UARTtxMessage("SPI is Working!\r\n");
 8000e08:	4807      	ldr	r0, [pc, #28]	@ (8000e28 <_ZN15Microcontroller7testSPIEv+0x5c>)
 8000e0a:	f7ff ff33 	bl	8000c74 <_Z13UARTtxMessagePKc>
	}
	else {
		UARTtxMessage("SPI is NOT Working...\r\n");
	}

}
 8000e0e:	e002      	b.n	8000e16 <_ZN15Microcontroller7testSPIEv+0x4a>
		UARTtxMessage("SPI is NOT Working...\r\n");
 8000e10:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <_ZN15Microcontroller7testSPIEv+0x60>)
 8000e12:	f7ff ff2f 	bl	8000c74 <_Z13UARTtxMessagePKc>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	0800bab4 	.word	0x0800bab4
 8000e24:	240001b4 	.word	0x240001b4
 8000e28:	0800bac8 	.word	0x0800bac8
 8000e2c:	0800badc 	.word	0x0800badc

08000e30 <_ZN15Microcontroller7testADCEv>:

void Microcontroller::testADC() {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 8000e34:	f7ff fc76 	bl	8000724 <MX_ADC1_Init>
	HAL_ADC_Start(&hadc1);
 8000e38:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <_ZN15Microcontroller7testADCEv+0x40>)
 8000e3a:	f001 f92f 	bl	800209c <HAL_ADC_Start>
	UARTtxMessage("Initialized ADC \r\n");
 8000e3e:	480d      	ldr	r0, [pc, #52]	@ (8000e74 <_ZN15Microcontroller7testADCEv+0x44>)
 8000e40:	f7ff ff18 	bl	8000c74 <_Z13UARTtxMessagePKc>

	if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000e44:	210a      	movs	r1, #10
 8000e46:	480a      	ldr	r0, [pc, #40]	@ (8000e70 <_ZN15Microcontroller7testADCEv+0x40>)
 8000e48:	f001 f9f2 	bl	8002230 <HAL_ADC_PollForConversion>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf0c      	ite	eq
 8000e52:	2301      	moveq	r3, #1
 8000e54:	2300      	movne	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <_ZN15Microcontroller7testADCEv+0x34>
		UARTtxMessage("ADC is Working! \r\n");
 8000e5c:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <_ZN15Microcontroller7testADCEv+0x48>)
 8000e5e:	f7ff ff09 	bl	8000c74 <_Z13UARTtxMessagePKc>
	}
	else {
		UARTtxMessage("ADC is Working... \r\n");
	}
}
 8000e62:	e002      	b.n	8000e6a <_ZN15Microcontroller7testADCEv+0x3a>
		UARTtxMessage("ADC is Working... \r\n");
 8000e64:	4805      	ldr	r0, [pc, #20]	@ (8000e7c <_ZN15Microcontroller7testADCEv+0x4c>)
 8000e66:	f7ff ff05 	bl	8000c74 <_Z13UARTtxMessagePKc>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2400002c 	.word	0x2400002c
 8000e74:	0800baf4 	.word	0x0800baf4
 8000e78:	0800bb08 	.word	0x0800bb08
 8000e7c:	0800bb1c 	.word	0x0800bb1c

08000e80 <_ZN15Microcontroller8testUARTEv>:

void Microcontroller::testUART() {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	MX_USART3_UART_Init();
 8000e84:	f7ff fdd2 	bl	8000a2c <MX_USART3_UART_Init>
    if (HAL_UART_Transmit(&huart3, (const uint8_t*)"Test UART Message\r\n", strlen("Test UART Message\r\n"), HAL_MAX_DELAY) == HAL_OK){
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8c:	2213      	movs	r2, #19
 8000e8e:	490a      	ldr	r1, [pc, #40]	@ (8000eb8 <_ZN15Microcontroller8testUARTEv+0x38>)
 8000e90:	480a      	ldr	r0, [pc, #40]	@ (8000ebc <_ZN15Microcontroller8testUARTEv+0x3c>)
 8000e92:	f009 fb57 	bl	800a544 <HAL_UART_Transmit>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf0c      	ite	eq
 8000e9c:	2301      	moveq	r3, #1
 8000e9e:	2300      	movne	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <_ZN15Microcontroller8testUARTEv+0x2e>
    	UARTtxMessage("UART is Working! \r\n");
 8000ea6:	4806      	ldr	r0, [pc, #24]	@ (8000ec0 <_ZN15Microcontroller8testUARTEv+0x40>)
 8000ea8:	f7ff fee4 	bl	8000c74 <_Z13UARTtxMessagePKc>
	}
	else {
		UARTtxMessage("UART is NOT Working! \r\n");
	}

}
 8000eac:	e002      	b.n	8000eb4 <_ZN15Microcontroller8testUARTEv+0x34>
		UARTtxMessage("UART is NOT Working! \r\n");
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <_ZN15Microcontroller8testUARTEv+0x44>)
 8000eb0:	f7ff fee0 	bl	8000c74 <_Z13UARTtxMessagePKc>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	0800bb34 	.word	0x0800bb34
 8000ebc:	24000288 	.word	0x24000288
 8000ec0:	0800bb48 	.word	0x0800bb48
 8000ec4:	0800bb5c 	.word	0x0800bb5c

08000ec8 <_ZN15Microcontroller4testEv>:

void Microcontroller:: test() {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

		MPU_Config();
 8000ecc:	f7ff fea0 	bl	8000c10 <MPU_Config>
		HAL_Init();
 8000ed0:	f000 fb74 	bl	80015bc <HAL_Init>
		MX_GPIO_Init();
 8000ed4:	f7ff fdf6 	bl	8000ac4 <MX_GPIO_Init>
		MX_TIM3_Init();
 8000ed8:	f7ff fd5a 	bl	8000990 <MX_TIM3_Init>
		SystemClock_Config();
 8000edc:	f7ff fbb4 	bl	8000648 <SystemClock_Config>
		testUART();
 8000ee0:	f7ff ffce 	bl	8000e80 <_ZN15Microcontroller8testUARTEv>
	    testFDCAN();
 8000ee4:	f7ff fedc 	bl	8000ca0 <_ZN15Microcontroller9testFDCANEv>
	    testSPI();
 8000ee8:	f7ff ff70 	bl	8000dcc <_ZN15Microcontroller7testSPIEv>
	    testADC();
 8000eec:	f7ff ffa0 	bl	8000e30 <_ZN15Microcontroller7testADCEv>
		UARTtxMessage("Finished Testing \r\n");
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <_ZN15Microcontroller4testEv+0x34>)
 8000ef2:	f7ff febf 	bl	8000c74 <_Z13UARTtxMessagePKc>
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	0800bb74 	.word	0x0800bb74

08000f00 <main>:
#include "microcontroller.h"

int main() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	Microcontroller:: test();
 8000f04:	f7ff ffe0 	bl	8000ec8 <_ZN15Microcontroller4testEv>
	return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_MspInit+0x30>)
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f1c:	4a08      	ldr	r2, [pc, #32]	@ (8000f40 <HAL_MspInit+0x30>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_MspInit+0x30>)
 8000f28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	58024400 	.word	0x58024400

08000f44 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0b8      	sub	sp, #224	@ 0xe0
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	22b8      	movs	r2, #184	@ 0xb8
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f00a fd0b 	bl	800b980 <memset>
  if(hadc->Instance==ADC1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a45      	ldr	r2, [pc, #276]	@ (8001084 <HAL_ADC_MspInit+0x140>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	f040 8082 	bne.w	800107a <HAL_ADC_MspInit+0x136>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f76:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f7a:	f04f 0300 	mov.w	r3, #0
 8000f7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000f82:	2304      	movs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000f86:	230c      	movs	r3, #12
 8000f88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f96:	23c0      	movs	r3, #192	@ 0xc0
 8000f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4618      	mov	r0, r3
 8000fae:	f005 fe17 	bl	8006be0 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000fb8:	f7ff fe56 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fbc:	4b32      	ldr	r3, [pc, #200]	@ (8001088 <HAL_ADC_MspInit+0x144>)
 8000fbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fc2:	4a31      	ldr	r2, [pc, #196]	@ (8001088 <HAL_ADC_MspInit+0x144>)
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <HAL_ADC_MspInit+0x144>)
 8000fce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fd2:	f003 0320 	and.w	r3, r3, #32
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fda:	4b2b      	ldr	r3, [pc, #172]	@ (8001088 <HAL_ADC_MspInit+0x144>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe0:	4a29      	ldr	r2, [pc, #164]	@ (8001088 <HAL_ADC_MspInit+0x144>)
 8000fe2:	f043 0320 	orr.w	r3, r3, #32
 8000fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fea:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <HAL_ADC_MspInit+0x144>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ff8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ffc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001000:	2303      	movs	r3, #3
 8001002:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800100c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001010:	4619      	mov	r1, r3
 8001012:	481e      	ldr	r0, [pc, #120]	@ (800108c <HAL_ADC_MspInit+0x148>)
 8001014:	f004 fc82 	bl	800591c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001018:	4b1d      	ldr	r3, [pc, #116]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 800101a:	4a1e      	ldr	r2, [pc, #120]	@ (8001094 <HAL_ADC_MspInit+0x150>)
 800101c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800101e:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 8001020:	2209      	movs	r2, #9
 8001022:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001024:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 8001032:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001036:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001038:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 800103a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800103e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001040:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 8001042:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001046:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 800104a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800104e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 8001052:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001056:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001058:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800105e:	480c      	ldr	r0, [pc, #48]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 8001060:	f002 fa8a 	bl	8003578 <HAL_DMA_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 800106a:	f7ff fdfd 	bl	8000c68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 8001072:	659a      	str	r2, [r3, #88]	@ 0x58
 8001074:	4a06      	ldr	r2, [pc, #24]	@ (8001090 <HAL_ADC_MspInit+0x14c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800107a:	bf00      	nop
 800107c:	37e0      	adds	r7, #224	@ 0xe0
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40022000 	.word	0x40022000
 8001088:	58024400 	.word	0x58024400
 800108c:	58021400 	.word	0x58021400
 8001090:	2400009c 	.word	0x2400009c
 8001094:	40020010 	.word	0x40020010

08001098 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0b8      	sub	sp, #224	@ 0xe0
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	22b8      	movs	r2, #184	@ 0xb8
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f00a fc61 	bl	800b980 <memset>
  if(hfdcan->Instance==FDCAN1)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a27      	ldr	r2, [pc, #156]	@ (8001160 <HAL_FDCAN_MspInit+0xc8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d146      	bne.n	8001156 <HAL_FDCAN_MspInit+0xbe>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80010d4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 fd7e 	bl	8006be0 <HAL_RCCEx_PeriphCLKConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80010ea:	f7ff fdbd 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80010ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <HAL_FDCAN_MspInit+0xcc>)
 80010f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80010f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001164 <HAL_FDCAN_MspInit+0xcc>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010fa:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80010fe:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <HAL_FDCAN_MspInit+0xcc>)
 8001100:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <HAL_FDCAN_MspInit+0xcc>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001112:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <HAL_FDCAN_MspInit+0xcc>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800111c:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <HAL_FDCAN_MspInit+0xcc>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800112a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800112e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001144:	2309      	movs	r3, #9
 8001146:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	@ (8001168 <HAL_FDCAN_MspInit+0xd0>)
 8001152:	f004 fbe3 	bl	800591c <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8001156:	bf00      	nop
 8001158:	37e0      	adds	r7, #224	@ 0xe0
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	4000a000 	.word	0x4000a000
 8001164:	58024400 	.word	0x58024400
 8001168:	58020400 	.word	0x58020400

0800116c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0ba      	sub	sp, #232	@ 0xe8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	22b8      	movs	r2, #184	@ 0xb8
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f00a fbf7 	bl	800b980 <memset>
  if(hspi->Instance==SPI1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a38      	ldr	r2, [pc, #224]	@ (8001278 <HAL_SPI_MspInit+0x10c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d168      	bne.n	800126e <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800119c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4618      	mov	r0, r3
 80011b2:	f005 fd15 	bl	8006be0 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80011bc:	f7ff fd54 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011c0:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <HAL_SPI_MspInit+0x110>)
 80011c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011c6:	4a2d      	ldr	r2, [pc, #180]	@ (800127c <HAL_SPI_MspInit+0x110>)
 80011c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011d0:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <HAL_SPI_MspInit+0x110>)
 80011d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b27      	ldr	r3, [pc, #156]	@ (800127c <HAL_SPI_MspInit+0x110>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e4:	4a25      	ldr	r2, [pc, #148]	@ (800127c <HAL_SPI_MspInit+0x110>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ee:	4b23      	ldr	r3, [pc, #140]	@ (800127c <HAL_SPI_MspInit+0x110>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <HAL_SPI_MspInit+0x110>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001202:	4a1e      	ldr	r2, [pc, #120]	@ (800127c <HAL_SPI_MspInit+0x110>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_SPI_MspInit+0x110>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800121a:	2360      	movs	r3, #96	@ 0x60
 800121c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001232:	2305      	movs	r3, #5
 8001234:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800123c:	4619      	mov	r1, r3
 800123e:	4810      	ldr	r0, [pc, #64]	@ (8001280 <HAL_SPI_MspInit+0x114>)
 8001240:	f004 fb6c 	bl	800591c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001244:	2320      	movs	r3, #32
 8001246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800125c:	2305      	movs	r3, #5
 800125e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001266:	4619      	mov	r1, r3
 8001268:	4806      	ldr	r0, [pc, #24]	@ (8001284 <HAL_SPI_MspInit+0x118>)
 800126a:	f004 fb57 	bl	800591c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800126e:	bf00      	nop
 8001270:	37e8      	adds	r7, #232	@ 0xe8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40013000 	.word	0x40013000
 800127c:	58024400 	.word	0x58024400
 8001280:	58020000 	.word	0x58020000
 8001284:	58020400 	.word	0x58020400

08001288 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0b      	ldr	r2, [pc, #44]	@ (80012c4 <HAL_TIM_Base_MspInit+0x3c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d10e      	bne.n	80012b8 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_TIM_Base_MspInit+0x40>)
 800129c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012a0:	4a09      	ldr	r2, [pc, #36]	@ (80012c8 <HAL_TIM_Base_MspInit+0x40>)
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <HAL_TIM_Base_MspInit+0x40>)
 80012ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	40000400 	.word	0x40000400
 80012c8:	58024400 	.word	0x58024400

080012cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0b8      	sub	sp, #224	@ 0xe0
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	22b8      	movs	r2, #184	@ 0xb8
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00a fb47 	bl	800b980 <memset>
  if(huart->Instance==USART3)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a27      	ldr	r2, [pc, #156]	@ (8001394 <HAL_UART_MspInit+0xc8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d146      	bne.n	800138a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012fc:	f04f 0202 	mov.w	r2, #2
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4618      	mov	r0, r3
 8001314:	f005 fc64 	bl	8006be0 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800131e:	f7ff fca3 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001322:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <HAL_UART_MspInit+0xcc>)
 8001324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001328:	4a1b      	ldr	r2, [pc, #108]	@ (8001398 <HAL_UART_MspInit+0xcc>)
 800132a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800132e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001332:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <HAL_UART_MspInit+0xcc>)
 8001334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001338:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_UART_MspInit+0xcc>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001346:	4a14      	ldr	r2, [pc, #80]	@ (8001398 <HAL_UART_MspInit+0xcc>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_UART_MspInit+0xcc>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800135e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001362:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001378:	2307      	movs	r3, #7
 800137a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <HAL_UART_MspInit+0xd0>)
 8001386:	f004 fac9 	bl	800591c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800138a:	bf00      	nop
 800138c:	37e0      	adds	r7, #224	@ 0xe0
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40004800 	.word	0x40004800
 8001398:	58024400 	.word	0x58024400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <NMI_Handler+0x4>

080013a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <MemManage_Handler+0x4>

080013b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f6:	f000 f953 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <DMA1_Stream0_IRQHandler+0x10>)
 8001406:	f002 fc0f 	bl	8003c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2400009c 	.word	0x2400009c

08001414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001418:	4b3e      	ldr	r3, [pc, #248]	@ (8001514 <SystemInit+0x100>)
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800141e:	4a3d      	ldr	r2, [pc, #244]	@ (8001514 <SystemInit+0x100>)
 8001420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001428:	4b3b      	ldr	r3, [pc, #236]	@ (8001518 <SystemInit+0x104>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	2b06      	cmp	r3, #6
 8001432:	d807      	bhi.n	8001444 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001434:	4b38      	ldr	r3, [pc, #224]	@ (8001518 <SystemInit+0x104>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 030f 	bic.w	r3, r3, #15
 800143c:	4a36      	ldr	r2, [pc, #216]	@ (8001518 <SystemInit+0x104>)
 800143e:	f043 0307 	orr.w	r3, r3, #7
 8001442:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001444:	4b35      	ldr	r3, [pc, #212]	@ (800151c <SystemInit+0x108>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a34      	ldr	r2, [pc, #208]	@ (800151c <SystemInit+0x108>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001450:	4b32      	ldr	r3, [pc, #200]	@ (800151c <SystemInit+0x108>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001456:	4b31      	ldr	r3, [pc, #196]	@ (800151c <SystemInit+0x108>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4930      	ldr	r1, [pc, #192]	@ (800151c <SystemInit+0x108>)
 800145c:	4b30      	ldr	r3, [pc, #192]	@ (8001520 <SystemInit+0x10c>)
 800145e:	4013      	ands	r3, r2
 8001460:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001462:	4b2d      	ldr	r3, [pc, #180]	@ (8001518 <SystemInit+0x104>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800146e:	4b2a      	ldr	r3, [pc, #168]	@ (8001518 <SystemInit+0x104>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 030f 	bic.w	r3, r3, #15
 8001476:	4a28      	ldr	r2, [pc, #160]	@ (8001518 <SystemInit+0x104>)
 8001478:	f043 0307 	orr.w	r3, r3, #7
 800147c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800147e:	4b27      	ldr	r3, [pc, #156]	@ (800151c <SystemInit+0x108>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001484:	4b25      	ldr	r3, [pc, #148]	@ (800151c <SystemInit+0x108>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800148a:	4b24      	ldr	r3, [pc, #144]	@ (800151c <SystemInit+0x108>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <SystemInit+0x108>)
 8001492:	4a24      	ldr	r2, [pc, #144]	@ (8001524 <SystemInit+0x110>)
 8001494:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <SystemInit+0x108>)
 8001498:	4a23      	ldr	r2, [pc, #140]	@ (8001528 <SystemInit+0x114>)
 800149a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <SystemInit+0x108>)
 800149e:	4a23      	ldr	r2, [pc, #140]	@ (800152c <SystemInit+0x118>)
 80014a0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <SystemInit+0x108>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014a8:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <SystemInit+0x108>)
 80014aa:	4a20      	ldr	r2, [pc, #128]	@ (800152c <SystemInit+0x118>)
 80014ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014ae:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <SystemInit+0x108>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014b4:	4b19      	ldr	r3, [pc, #100]	@ (800151c <SystemInit+0x108>)
 80014b6:	4a1d      	ldr	r2, [pc, #116]	@ (800152c <SystemInit+0x118>)
 80014b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014ba:	4b18      	ldr	r3, [pc, #96]	@ (800151c <SystemInit+0x108>)
 80014bc:	2200      	movs	r2, #0
 80014be:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014c0:	4b16      	ldr	r3, [pc, #88]	@ (800151c <SystemInit+0x108>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a15      	ldr	r2, [pc, #84]	@ (800151c <SystemInit+0x108>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014cc:	4b13      	ldr	r3, [pc, #76]	@ (800151c <SystemInit+0x108>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80014d2:	4b12      	ldr	r3, [pc, #72]	@ (800151c <SystemInit+0x108>)
 80014d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d113      	bne.n	8001508 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014e0:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <SystemInit+0x108>)
 80014e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014e6:	4a0d      	ldr	r2, [pc, #52]	@ (800151c <SystemInit+0x108>)
 80014e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <SystemInit+0x11c>)
 80014f2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80014f6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80014f8:	4b08      	ldr	r3, [pc, #32]	@ (800151c <SystemInit+0x108>)
 80014fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014fe:	4a07      	ldr	r2, [pc, #28]	@ (800151c <SystemInit+0x108>)
 8001500:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001504:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00
 8001518:	52002000 	.word	0x52002000
 800151c:	58024400 	.word	0x58024400
 8001520:	eaf6ed7f 	.word	0xeaf6ed7f
 8001524:	02020200 	.word	0x02020200
 8001528:	01ff0000 	.word	0x01ff0000
 800152c:	01010280 	.word	0x01010280
 8001530:	52004000 	.word	0x52004000

08001534 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <ExitRun0Mode+0x2c>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4a08      	ldr	r2, [pc, #32]	@ (8001560 <ExitRun0Mode+0x2c>)
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001544:	bf00      	nop
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <ExitRun0Mode+0x2c>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f9      	beq.n	8001546 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	58024800 	.word	0x58024800

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80015a0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001568:	f7ff ffe4 	bl	8001534 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800156c:	f7ff ff52 	bl	8001414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	@ (80015a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	@ (80015b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001596:	f00a f9fb 	bl	800b990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159a:	f7ff fcb1 	bl	8000f00 <main>
  bx  lr
 800159e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80015a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015a8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80015ac:	0800bc34 	.word	0x0800bc34
  ldr r2, =_sbss
 80015b0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80015b4:	24000320 	.word	0x24000320

080015b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC3_IRQHandler>
	...

080015bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c2:	2003      	movs	r0, #3
 80015c4:	f001 ff2e 	bl	8003424 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015c8:	f005 f934 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <HAL_Init+0x68>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	4913      	ldr	r1, [pc, #76]	@ (8001628 <HAL_Init+0x6c>)
 80015da:	5ccb      	ldrb	r3, [r1, r3]
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
 80015e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <HAL_Init+0x68>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001628 <HAL_Init+0x6c>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
 80015fc:	4a0b      	ldr	r2, [pc, #44]	@ (800162c <HAL_Init+0x70>)
 80015fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001600:	4a0b      	ldr	r2, [pc, #44]	@ (8001630 <HAL_Init+0x74>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001606:	2000      	movs	r0, #0
 8001608:	f000 f814 	bl	8001634 <HAL_InitTick>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e002      	b.n	800161c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001616:	f7ff fc7b 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	58024400 	.word	0x58024400
 8001628:	0800bbd4 	.word	0x0800bbd4
 800162c:	24000004 	.word	0x24000004
 8001630:	24000000 	.word	0x24000000

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <HAL_InitTick+0x60>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e021      	b.n	800168c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <HAL_InitTick+0x64>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <HAL_InitTick+0x60>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f001 ff05 	bl	800346e <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f001 fedd 	bl	800343a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	@ (800169c <HAL_InitTick+0x68>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2400000c 	.word	0x2400000c
 8001698:	24000000 	.word	0x24000000
 800169c:	24000008 	.word	0x24000008

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	2400000c 	.word	0x2400000c
 80016c4:	2400031c 	.word	0x2400031c

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	2400031c 	.word	0x2400031c

080016e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	609a      	str	r2, [r3, #8]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a18      	ldr	r2, [pc, #96]	@ (80017b8 <LL_ADC_SetChannelPreselection+0x70>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d027      	beq.n	80017aa <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <LL_ADC_SetChannelPreselection+0x2c>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	0e9b      	lsrs	r3, r3, #26
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	2201      	movs	r2, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	e015      	b.n	80017a0 <LL_ADC_SetChannelPreselection+0x58>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	fa93 f3a3 	rbit	r3, r3
 800177e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 800178a:	2320      	movs	r3, #32
 800178c:	e003      	b.n	8001796 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	fab3 f383 	clz	r3, r3
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	2201      	movs	r2, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	69d2      	ldr	r2, [r2, #28]
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80017aa:	bf00      	nop
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	58026000 	.word	0x58026000

080017bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017bc:	b480      	push	{r7}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3360      	adds	r3, #96	@ 0x60
 80017ce:	461a      	mov	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4a10      	ldr	r2, [pc, #64]	@ (800181c <LL_ADC_SetOffset+0x60>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d10b      	bne.n	80017f8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80017f6:	e00b      	b.n	8001810 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	430b      	orrs	r3, r1
 800180a:	431a      	orrs	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	601a      	str	r2, [r3, #0]
}
 8001810:	bf00      	nop
 8001812:	371c      	adds	r7, #28
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	58026000 	.word	0x58026000

08001820 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3360      	adds	r3, #96	@ 0x60
 800182e:	461a      	mov	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	431a      	orrs	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	611a      	str	r2, [r3, #16]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4a0c      	ldr	r2, [pc, #48]	@ (80018c0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d00e      	beq.n	80018b2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3360      	adds	r3, #96	@ 0x60
 8001898:	461a      	mov	r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]
  }
}
 80018b2:	bf00      	nop
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	58026000 	.word	0x58026000

080018c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001904 <LL_ADC_SetOffsetSaturation+0x40>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d10e      	bne.n	80018f6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3360      	adds	r3, #96	@ 0x60
 80018dc:	461a      	mov	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	58026000 	.word	0x58026000

08001908 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4a0c      	ldr	r2, [pc, #48]	@ (8001948 <LL_ADC_SetOffsetSign+0x40>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d10e      	bne.n	800193a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3360      	adds	r3, #96	@ 0x60
 8001920:	461a      	mov	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	431a      	orrs	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800193a:	bf00      	nop
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	58026000 	.word	0x58026000

0800194c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3360      	adds	r3, #96	@ 0x60
 800195c:	461a      	mov	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4a0c      	ldr	r2, [pc, #48]	@ (800199c <LL_ADC_SetOffsetState+0x50>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d108      	bne.n	8001980 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800197e:	e007      	b.n	8001990 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	431a      	orrs	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	58026000 	.word	0x58026000

080019a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b087      	sub	sp, #28
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3330      	adds	r3, #48	@ 0x30
 80019d6:	461a      	mov	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	4413      	add	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	211f      	movs	r1, #31
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	401a      	ands	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	0e9b      	lsrs	r3, r3, #26
 80019fe:	f003 011f 	and.w	r1, r3, #31
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a12:	bf00      	nop
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b087      	sub	sp, #28
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	3314      	adds	r3, #20
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	0e5b      	lsrs	r3, r3, #25
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	4413      	add	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	0d1b      	lsrs	r3, r3, #20
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	2107      	movs	r1, #7
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	0d1b      	lsrs	r3, r3, #20
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	431a      	orrs	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a68:	bf00      	nop
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a1a      	ldr	r2, [pc, #104]	@ (8001aec <LL_ADC_SetChannelSingleDiff+0x78>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d115      	bne.n	8001ab4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a94:	43db      	mvns	r3, r3
 8001a96:	401a      	ands	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0318 	and.w	r3, r3, #24
 8001a9e:	4914      	ldr	r1, [pc, #80]	@ (8001af0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001aa0:	40d9      	lsrs	r1, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	400b      	ands	r3, r1
 8001aa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ab2:	e014      	b.n	8001ade <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0318 	and.w	r3, r3, #24
 8001aca:	4909      	ldr	r1, [pc, #36]	@ (8001af0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001acc:	40d9      	lsrs	r1, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	58026000 	.word	0x58026000
 8001af0:	000fffff 	.word	0x000fffff

08001af4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 031f 	and.w	r3, r3, #31
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6093      	str	r3, [r2, #8]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	5fffffc0 	.word	0x5fffffc0

08001b50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b64:	d101      	bne.n	8001b6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <LL_ADC_EnableInternalRegulator+0x24>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	6fffffc0 	.word	0x6fffffc0

08001ba0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bb4:	d101      	bne.n	8001bba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <LL_ADC_Enable+0x24>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	7fffffc0 	.word	0x7fffffc0

08001bf0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <LL_ADC_IsEnabled+0x18>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <LL_ADC_IsEnabled+0x1a>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <LL_ADC_REG_StartConversion+0x24>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	7fffffc0 	.word	0x7fffffc0

08001c40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d101      	bne.n	8001c58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d101      	bne.n	8001c7e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e1ee      	b.n	8002084 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff f945 	bl	8000f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff3f 	bl	8001b50 <LL_ADC_IsDeepPowerDownEnabled>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff25 	bl	8001b2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff5a 	bl	8001ba0 <LL_ADC_IsInternalRegulatorEnabled>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d114      	bne.n	8001d1c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff3e 	bl	8001b78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cfc:	4b8e      	ldr	r3, [pc, #568]	@ (8001f38 <HAL_ADC_Init+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	099b      	lsrs	r3, r3, #6
 8001d02:	4a8e      	ldr	r2, [pc, #568]	@ (8001f3c <HAL_ADC_Init+0x2b0>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d0e:	e002      	b.n	8001d16 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f9      	bne.n	8001d10 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff3d 	bl	8001ba0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10d      	bne.n	8001d48 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d30:	f043 0210 	orr.w	r2, r3, #16
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d3c:	f043 0201 	orr.w	r2, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff77 	bl	8001c40 <LL_ADC_REG_IsConversionOngoing>
 8001d52:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f040 8188 	bne.w	8002072 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f040 8184 	bne.w	8002072 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d6e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d72:	f043 0202 	orr.w	r2, r3, #2
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff36 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d136      	bne.n	8001df8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8001f40 <HAL_ADC_Init+0x2b4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d004      	beq.n	8001d9e <HAL_ADC_Init+0x112>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a6a      	ldr	r2, [pc, #424]	@ (8001f44 <HAL_ADC_Init+0x2b8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10e      	bne.n	8001dbc <HAL_ADC_Init+0x130>
 8001d9e:	4868      	ldr	r0, [pc, #416]	@ (8001f40 <HAL_ADC_Init+0x2b4>)
 8001da0:	f7ff ff26 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001da4:	4604      	mov	r4, r0
 8001da6:	4867      	ldr	r0, [pc, #412]	@ (8001f44 <HAL_ADC_Init+0x2b8>)
 8001da8:	f7ff ff22 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	e008      	b.n	8001dce <HAL_ADC_Init+0x142>
 8001dbc:	4862      	ldr	r0, [pc, #392]	@ (8001f48 <HAL_ADC_Init+0x2bc>)
 8001dbe:	f7ff ff17 	bl	8001bf0 <LL_ADC_IsEnabled>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d012      	beq.n	8001df8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a5a      	ldr	r2, [pc, #360]	@ (8001f40 <HAL_ADC_Init+0x2b4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_ADC_Init+0x15a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a58      	ldr	r2, [pc, #352]	@ (8001f44 <HAL_ADC_Init+0x2b8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Init+0x15e>
 8001de6:	4a59      	ldr	r2, [pc, #356]	@ (8001f4c <HAL_ADC_Init+0x2c0>)
 8001de8:	e000      	b.n	8001dec <HAL_ADC_Init+0x160>
 8001dea:	4a59      	ldr	r2, [pc, #356]	@ (8001f50 <HAL_ADC_Init+0x2c4>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4619      	mov	r1, r3
 8001df2:	4610      	mov	r0, r2
 8001df4:	f7ff fc74 	bl	80016e0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a52      	ldr	r2, [pc, #328]	@ (8001f48 <HAL_ADC_Init+0x2bc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d129      	bne.n	8001e56 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7e5b      	ldrb	r3, [r3, #25]
 8001e06:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e0c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8001e12:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d013      	beq.n	8001e44 <HAL_ADC_Init+0x1b8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b0c      	cmp	r3, #12
 8001e22:	d00d      	beq.n	8001e40 <HAL_ADC_Init+0x1b4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b1c      	cmp	r3, #28
 8001e2a:	d007      	beq.n	8001e3c <HAL_ADC_Init+0x1b0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b18      	cmp	r3, #24
 8001e32:	d101      	bne.n	8001e38 <HAL_ADC_Init+0x1ac>
 8001e34:	2318      	movs	r3, #24
 8001e36:	e006      	b.n	8001e46 <HAL_ADC_Init+0x1ba>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e004      	b.n	8001e46 <HAL_ADC_Init+0x1ba>
 8001e3c:	2310      	movs	r3, #16
 8001e3e:	e002      	b.n	8001e46 <HAL_ADC_Init+0x1ba>
 8001e40:	2308      	movs	r3, #8
 8001e42:	e000      	b.n	8001e46 <HAL_ADC_Init+0x1ba>
 8001e44:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8001e46:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	e00e      	b.n	8001e74 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7e5b      	ldrb	r3, [r3, #25]
 8001e5a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e60:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e66:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d106      	bne.n	8001e8c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e82:	3b01      	subs	r3, #1
 8001e84:	045b      	lsls	r3, r3, #17
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d009      	beq.n	8001ea8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e98:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a26      	ldr	r2, [pc, #152]	@ (8001f48 <HAL_ADC_Init+0x2bc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d115      	bne.n	8001ede <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	4b26      	ldr	r3, [pc, #152]	@ (8001f54 <HAL_ADC_Init+0x2c8>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	69b9      	ldr	r1, [r7, #24]
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	611a      	str	r2, [r3, #16]
 8001edc:	e009      	b.n	8001ef2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <HAL_ADC_Init+0x2cc>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	69b9      	ldr	r1, [r7, #24]
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fea2 	bl	8001c40 <LL_ADC_REG_IsConversionOngoing>
 8001efc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff feaf 	bl	8001c66 <LL_ADC_INJ_IsConversionOngoing>
 8001f08:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f040 808e 	bne.w	800202e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f040 808a 	bne.w	800202e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <HAL_ADC_Init+0x2bc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d11b      	bne.n	8001f5c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7e1b      	ldrb	r3, [r3, #24]
 8001f28:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f30:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	e018      	b.n	8001f6a <HAL_ADC_Init+0x2de>
 8001f38:	24000000 	.word	0x24000000
 8001f3c:	053e2d63 	.word	0x053e2d63
 8001f40:	40022000 	.word	0x40022000
 8001f44:	40022100 	.word	0x40022100
 8001f48:	58026000 	.word	0x58026000
 8001f4c:	40022300 	.word	0x40022300
 8001f50:	58026300 	.word	0x58026300
 8001f54:	fff04007 	.word	0xfff04007
 8001f58:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e1b      	ldrb	r3, [r3, #24]
 8001f60:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	4b46      	ldr	r3, [pc, #280]	@ (800208c <HAL_ADC_Init+0x400>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	69b9      	ldr	r1, [r7, #24]
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d137      	bne.n	8001ff8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a3f      	ldr	r2, [pc, #252]	@ (8002090 <HAL_ADC_Init+0x404>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d116      	bne.n	8001fc6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002094 <HAL_ADC_Init+0x408>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001faa:	4311      	orrs	r1, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	611a      	str	r2, [r3, #16]
 8001fc4:	e020      	b.n	8002008 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	4b32      	ldr	r3, [pc, #200]	@ (8002098 <HAL_ADC_Init+0x40c>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fd4:	3a01      	subs	r2, #1
 8001fd6:	0411      	lsls	r1, r2, #16
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001fdc:	4311      	orrs	r1, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fe2:	4311      	orrs	r1, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	611a      	str	r2, [r3, #16]
 8001ff6:	e007      	b.n	8002008 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1b      	ldr	r2, [pc, #108]	@ (8002090 <HAL_ADC_Init+0x404>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d002      	beq.n	800202e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 ff53 	bl	8002ed4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d10c      	bne.n	8002050 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	f023 010f 	bic.w	r1, r3, #15
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	1e5a      	subs	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	631a      	str	r2, [r3, #48]	@ 0x30
 800204e:	e007      	b.n	8002060 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 020f 	bic.w	r2, r2, #15
 800205e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002064:	f023 0303 	bic.w	r3, r3, #3
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002070:	e007      	b.n	8002082 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002076:	f043 0210 	orr.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002082:	7ffb      	ldrb	r3, [r7, #31]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3724      	adds	r7, #36	@ 0x24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	ffffbffc 	.word	0xffffbffc
 8002090:	58026000 	.word	0x58026000
 8002094:	fc00f81f 	.word	0xfc00f81f
 8002098:	fc00f81e 	.word	0xfc00f81e

0800209c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a5c      	ldr	r2, [pc, #368]	@ (800221c <HAL_ADC_Start+0x180>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_ADC_Start+0x1c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002220 <HAL_ADC_Start+0x184>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_Start+0x20>
 80020b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002224 <HAL_ADC_Start+0x188>)
 80020ba:	e000      	b.n	80020be <HAL_ADC_Start+0x22>
 80020bc:	4b5a      	ldr	r3, [pc, #360]	@ (8002228 <HAL_ADC_Start+0x18c>)
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fd18 	bl	8001af4 <LL_ADC_GetMultimode>
 80020c4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fdb8 	bl	8001c40 <LL_ADC_REG_IsConversionOngoing>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 809a 	bne.w	800220c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_Start+0x4a>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e095      	b.n	8002212 <HAL_ADC_Start+0x176>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 fe66 	bl	8002dc0 <ADC_Enable>
 80020f4:	4603      	mov	r3, r0
 80020f6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 8081 	bne.w	8002202 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002104:	4b49      	ldr	r3, [pc, #292]	@ (800222c <HAL_ADC_Start+0x190>)
 8002106:	4013      	ands	r3, r2
 8002108:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a42      	ldr	r2, [pc, #264]	@ (8002220 <HAL_ADC_Start+0x184>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d002      	beq.n	8002120 <HAL_ADC_Start+0x84>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	e000      	b.n	8002122 <HAL_ADC_Start+0x86>
 8002120:	4b3e      	ldr	r3, [pc, #248]	@ (800221c <HAL_ADC_Start+0x180>)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	4293      	cmp	r3, r2
 8002128:	d002      	beq.n	8002130 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002134:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002148:	d106      	bne.n	8002158 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800214e:	f023 0206 	bic.w	r2, r3, #6
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	665a      	str	r2, [r3, #100]	@ 0x64
 8002156:	e002      	b.n	800215e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	221c      	movs	r2, #28
 8002164:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a2b      	ldr	r2, [pc, #172]	@ (8002220 <HAL_ADC_Start+0x184>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d002      	beq.n	800217e <HAL_ADC_Start+0xe2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	e000      	b.n	8002180 <HAL_ADC_Start+0xe4>
 800217e:	4b27      	ldr	r3, [pc, #156]	@ (800221c <HAL_ADC_Start+0x180>)
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	4293      	cmp	r3, r2
 8002186:	d008      	beq.n	800219a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d002      	beq.n	800219a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b09      	cmp	r3, #9
 8002198:	d114      	bne.n	80021c4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fd2b 	bl	8001c18 <LL_ADC_REG_StartConversion>
 80021c2:	e025      	b.n	8002210 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <HAL_ADC_Start+0x184>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d002      	beq.n	80021e0 <HAL_ADC_Start+0x144>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	e000      	b.n	80021e2 <HAL_ADC_Start+0x146>
 80021e0:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <HAL_ADC_Start+0x180>)
 80021e2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00f      	beq.n	8002210 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	661a      	str	r2, [r3, #96]	@ 0x60
 8002200:	e006      	b.n	8002210 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800220a:	e001      	b.n	8002210 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800220c:	2302      	movs	r3, #2
 800220e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002210:	7dfb      	ldrb	r3, [r7, #23]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40022000 	.word	0x40022000
 8002220:	40022100 	.word	0x40022100
 8002224:	40022300 	.word	0x40022300
 8002228:	58026300 	.word	0x58026300
 800222c:	fffff0fe 	.word	0xfffff0fe

08002230 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a72      	ldr	r2, [pc, #456]	@ (8002408 <HAL_ADC_PollForConversion+0x1d8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_ADC_PollForConversion+0x1e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a70      	ldr	r2, [pc, #448]	@ (800240c <HAL_ADC_PollForConversion+0x1dc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_ADC_PollForConversion+0x22>
 800224e:	4b70      	ldr	r3, [pc, #448]	@ (8002410 <HAL_ADC_PollForConversion+0x1e0>)
 8002250:	e000      	b.n	8002254 <HAL_ADC_PollForConversion+0x24>
 8002252:	4b70      	ldr	r3, [pc, #448]	@ (8002414 <HAL_ADC_PollForConversion+0x1e4>)
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fc4d 	bl	8001af4 <LL_ADC_GetMultimode>
 800225a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d102      	bne.n	800226a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002264:	2308      	movs	r3, #8
 8002266:	61fb      	str	r3, [r7, #28]
 8002268:	e037      	b.n	80022da <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b05      	cmp	r3, #5
 8002274:	d002      	beq.n	800227c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b09      	cmp	r3, #9
 800227a:	d111      	bne.n	80022a0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800228e:	f043 0220 	orr.w	r2, r3, #32
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0b1      	b.n	80023fe <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800229a:	2304      	movs	r3, #4
 800229c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800229e:	e01c      	b.n	80022da <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a58      	ldr	r2, [pc, #352]	@ (8002408 <HAL_ADC_PollForConversion+0x1d8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_ADC_PollForConversion+0x84>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a57      	ldr	r2, [pc, #348]	@ (800240c <HAL_ADC_PollForConversion+0x1dc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_PollForConversion+0x88>
 80022b4:	4b56      	ldr	r3, [pc, #344]	@ (8002410 <HAL_ADC_PollForConversion+0x1e0>)
 80022b6:	e000      	b.n	80022ba <HAL_ADC_PollForConversion+0x8a>
 80022b8:	4b56      	ldr	r3, [pc, #344]	@ (8002414 <HAL_ADC_PollForConversion+0x1e4>)
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fc28 	bl	8001b10 <LL_ADC_GetMultiDMATransfer>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e093      	b.n	80023fe <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022d6:	2304      	movs	r3, #4
 80022d8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80022da:	f7ff f9f5 	bl	80016c8 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022e0:	e021      	b.n	8002326 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d01d      	beq.n	8002326 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80022ea:	f7ff f9ed 	bl	80016c8 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <HAL_ADC_PollForConversion+0xd0>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d112      	bne.n	8002326 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	4013      	ands	r3, r2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10b      	bne.n	8002326 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002312:	f043 0204 	orr.w	r2, r3, #4
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e06b      	b.n	80023fe <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0d6      	beq.n	80022e2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002338:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fb2b 	bl	80019a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01c      	beq.n	800238a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7e5b      	ldrb	r3, [r3, #25]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d118      	bne.n	800238a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b08      	cmp	r3, #8
 8002364:	d111      	bne.n	800238a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d105      	bne.n	800238a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1f      	ldr	r2, [pc, #124]	@ (800240c <HAL_ADC_PollForConversion+0x1dc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d002      	beq.n	800239a <HAL_ADC_PollForConversion+0x16a>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	e000      	b.n	800239c <HAL_ADC_PollForConversion+0x16c>
 800239a:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <HAL_ADC_PollForConversion+0x1d8>)
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d008      	beq.n	80023b6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b05      	cmp	r3, #5
 80023ae:	d002      	beq.n	80023b6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b09      	cmp	r3, #9
 80023b4:	d104      	bne.n	80023c0 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	e00c      	b.n	80023da <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a11      	ldr	r2, [pc, #68]	@ (800240c <HAL_ADC_PollForConversion+0x1dc>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d002      	beq.n	80023d0 <HAL_ADC_PollForConversion+0x1a0>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	e000      	b.n	80023d2 <HAL_ADC_PollForConversion+0x1a2>
 80023d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <HAL_ADC_PollForConversion+0x1d8>)
 80023d2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d104      	bne.n	80023ea <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2208      	movs	r2, #8
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e008      	b.n	80023fc <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d103      	bne.n	80023fc <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	220c      	movs	r2, #12
 80023fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000
 800240c:	40022100 	.word	0x40022100
 8002410:	40022300 	.word	0x40022300
 8002414:	58026300 	.word	0x58026300

08002418 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b0a5      	sub	sp, #148	@ 0x94
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002432:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4aa4      	ldr	r2, [pc, #656]	@ (80026cc <HAL_ADC_ConfigChannel+0x2b4>)
 800243a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002442:	2b01      	cmp	r3, #1
 8002444:	d102      	bne.n	800244c <HAL_ADC_ConfigChannel+0x34>
 8002446:	2302      	movs	r3, #2
 8002448:	f000 bca2 	b.w	8002d90 <HAL_ADC_ConfigChannel+0x978>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fbf1 	bl	8001c40 <LL_ADC_REG_IsConversionOngoing>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 8486 	bne.w	8002d72 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db31      	blt.n	80024d2 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a97      	ldr	r2, [pc, #604]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2b8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d02c      	beq.n	80024d2 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002480:	2b00      	cmp	r3, #0
 8002482:	d108      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x7e>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2201      	movs	r2, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	e016      	b.n	80024c4 <HAL_ADC_ConfigChannel+0xac>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80024a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024a6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80024a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 80024ae:	2320      	movs	r3, #32
 80024b0:	e003      	b.n	80024ba <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 80024b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2201      	movs	r2, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	69d1      	ldr	r1, [r2, #28]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	430b      	orrs	r3, r1
 80024d0:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6859      	ldr	r1, [r3, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	f7ff fa71 	bl	80019c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fba9 	bl	8001c40 <LL_ADC_REG_IsConversionOngoing>
 80024ee:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fbb5 	bl	8001c66 <LL_ADC_INJ_IsConversionOngoing>
 80024fc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002500:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002504:	2b00      	cmp	r3, #0
 8002506:	f040 824a 	bne.w	800299e <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800250a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	f040 8245 	bne.w	800299e <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6819      	ldr	r1, [r3, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	461a      	mov	r2, r3
 8002522:	f7ff fa7c 	bl	8001a1e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a69      	ldr	r2, [pc, #420]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2b8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d10d      	bne.n	800254c <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	08db      	lsrs	r3, r3, #3
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800254a:	e032      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800254c:	4b61      	ldr	r3, [pc, #388]	@ (80026d4 <HAL_ADC_ConfigChannel+0x2bc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002554:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002558:	d10b      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x15a>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	089b      	lsrs	r3, r3, #2
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	e01d      	b.n	80025ae <HAL_ADC_ConfigChannel+0x196>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10b      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x180>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	e00a      	b.n	80025ae <HAL_ADC_ConfigChannel+0x196>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d048      	beq.n	800264c <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6919      	ldr	r1, [r3, #16]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025ca:	f7ff f8f7 	bl	80017bc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a3f      	ldr	r2, [pc, #252]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2b8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d119      	bne.n	800260c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6919      	ldr	r1, [r3, #16]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	461a      	mov	r2, r3
 80025e6:	f7ff f98f 	bl	8001908 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6919      	ldr	r1, [r3, #16]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d102      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x1ea>
 80025fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002600:	e000      	b.n	8002604 <HAL_ADC_ConfigChannel+0x1ec>
 8002602:	2300      	movs	r3, #0
 8002604:	461a      	mov	r2, r3
 8002606:	f7ff f95d 	bl	80018c4 <LL_ADC_SetOffsetSaturation>
 800260a:	e1c8      	b.n	800299e <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6919      	ldr	r1, [r3, #16]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800261a:	2b01      	cmp	r3, #1
 800261c:	d102      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x20c>
 800261e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002622:	e000      	b.n	8002626 <HAL_ADC_ConfigChannel+0x20e>
 8002624:	2300      	movs	r3, #0
 8002626:	461a      	mov	r2, r3
 8002628:	f7ff f92a 	bl	8001880 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6919      	ldr	r1, [r3, #16]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	7e1b      	ldrb	r3, [r3, #24]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d102      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x22a>
 800263c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002640:	e000      	b.n	8002644 <HAL_ADC_ConfigChannel+0x22c>
 8002642:	2300      	movs	r3, #0
 8002644:	461a      	mov	r2, r3
 8002646:	f7ff f901 	bl	800184c <LL_ADC_SetDataRightShift>
 800264a:	e1a8      	b.n	800299e <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1f      	ldr	r2, [pc, #124]	@ (80026d0 <HAL_ADC_ConfigChannel+0x2b8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	f040 815b 	bne.w	800290e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff f8de 	bl	8001820 <LL_ADC_GetOffsetChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x26c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff f8d3 	bl	8001820 <LL_ADC_GetOffsetChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	f003 021f 	and.w	r2, r3, #31
 8002682:	e017      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x29c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f8c8 	bl	8001820 <LL_ADC_GetOffsetChannel>
 8002690:	4603      	mov	r3, r0
 8002692:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800269c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800269e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80026a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80026a6:	2320      	movs	r3, #32
 80026a8:	e003      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 80026aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10b      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x2c0>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	e017      	b.n	80026fc <HAL_ADC_ConfigChannel+0x2e4>
 80026cc:	47ff0000 	.word	0x47ff0000
 80026d0:	58026000 	.word	0x58026000
 80026d4:	5c001000 	.word	0x5c001000
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80026e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026e8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80026ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80026f0:	2320      	movs	r3, #32
 80026f2:	e003      	b.n	80026fc <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80026f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d106      	bne.n	800270e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2200      	movs	r2, #0
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff f91f 	bl	800194c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2101      	movs	r1, #1
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff f883 	bl	8001820 <LL_ADC_GetOffsetChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10a      	bne.n	800273a <HAL_ADC_ConfigChannel+0x322>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff f878 	bl	8001820 <LL_ADC_GetOffsetChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	e017      	b.n	800276a <HAL_ADC_ConfigChannel+0x352>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2101      	movs	r1, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff f86d 	bl	8001820 <LL_ADC_GetOffsetChannel>
 8002746:	4603      	mov	r3, r0
 8002748:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002754:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 800275c:	2320      	movs	r3, #32
 800275e:	e003      	b.n	8002768 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8002760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x36a>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	0e9b      	lsrs	r3, r3, #26
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	e011      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x38e>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002792:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800279a:	2320      	movs	r3, #32
 800279c:	e003      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800279e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	2101      	movs	r1, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff f8ca 	bl	800194c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2102      	movs	r1, #2
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff f82e 	bl	8001820 <LL_ADC_GetOffsetChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x3cc>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2102      	movs	r1, #2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff f823 	bl	8001820 <LL_ADC_GetOffsetChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	f003 021f 	and.w	r2, r3, #31
 80027e2:	e017      	b.n	8002814 <HAL_ADC_ConfigChannel+0x3fc>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2102      	movs	r1, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff f818 	bl	8001820 <LL_ADC_GetOffsetChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80027fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002806:	2320      	movs	r3, #32
 8002808:	e003      	b.n	8002812 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800280a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800280c:	fab3 f383 	clz	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <HAL_ADC_ConfigChannel+0x414>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	e011      	b.n	8002850 <HAL_ADC_ConfigChannel+0x438>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800283a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800283e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e003      	b.n	8002850 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284a:	fab3 f383 	clz	r3, r3
 800284e:	b2db      	uxtb	r3, r3
 8002850:	429a      	cmp	r2, r3
 8002852:	d106      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2200      	movs	r2, #0
 800285a:	2102      	movs	r1, #2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff f875 	bl	800194c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2103      	movs	r1, #3
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe ffd9 	bl	8001820 <LL_ADC_GetOffsetChannel>
 800286e:	4603      	mov	r3, r0
 8002870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10a      	bne.n	800288e <HAL_ADC_ConfigChannel+0x476>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2103      	movs	r1, #3
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe ffce 	bl	8001820 <LL_ADC_GetOffsetChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	0e9b      	lsrs	r3, r3, #26
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	e017      	b.n	80028be <HAL_ADC_ConfigChannel+0x4a6>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2103      	movs	r1, #3
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe ffc3 	bl	8001820 <LL_ADC_GetOffsetChannel>
 800289a:	4603      	mov	r3, r0
 800289c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	61fb      	str	r3, [r7, #28]
  return result;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e003      	b.n	80028bc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d105      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x4be>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0e9b      	lsrs	r3, r3, #26
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	e011      	b.n	80028fa <HAL_ADC_ConfigChannel+0x4e2>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	613b      	str	r3, [r7, #16]
  return result;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e003      	b.n	80028fa <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d14f      	bne.n	800299e <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	2103      	movs	r1, #3
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff f820 	bl	800194c <LL_ADC_SetOffsetState>
 800290c:	e047      	b.n	800299e <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002914:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	069b      	lsls	r3, r3, #26
 800291e:	429a      	cmp	r2, r3
 8002920:	d107      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002930:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002938:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	069b      	lsls	r3, r3, #26
 8002942:	429a      	cmp	r2, r3
 8002944:	d107      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002954:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800295c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	069b      	lsls	r3, r3, #26
 8002966:	429a      	cmp	r2, r3
 8002968:	d107      	bne.n	800297a <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002978:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002980:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	069b      	lsls	r3, r3, #26
 800298a:	429a      	cmp	r2, r3
 800298c:	d107      	bne.n	800299e <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800299c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f924 	bl	8001bf0 <LL_ADC_IsEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 81ea 	bne.w	8002d84 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	461a      	mov	r2, r3
 80029be:	f7ff f859 	bl	8001a74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a7a      	ldr	r2, [pc, #488]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x798>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	f040 80e0 	bne.w	8002b8e <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4977      	ldr	r1, [pc, #476]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x79c>)
 80029d8:	428b      	cmp	r3, r1
 80029da:	d147      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x654>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4975      	ldr	r1, [pc, #468]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x7a0>)
 80029e2:	428b      	cmp	r3, r1
 80029e4:	d040      	beq.n	8002a68 <HAL_ADC_ConfigChannel+0x650>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4974      	ldr	r1, [pc, #464]	@ (8002bbc <HAL_ADC_ConfigChannel+0x7a4>)
 80029ec:	428b      	cmp	r3, r1
 80029ee:	d039      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x64c>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4972      	ldr	r1, [pc, #456]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x7a8>)
 80029f6:	428b      	cmp	r3, r1
 80029f8:	d032      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0x648>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4971      	ldr	r1, [pc, #452]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002a00:	428b      	cmp	r3, r1
 8002a02:	d02b      	beq.n	8002a5c <HAL_ADC_ConfigChannel+0x644>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	496f      	ldr	r1, [pc, #444]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002a0a:	428b      	cmp	r3, r1
 8002a0c:	d024      	beq.n	8002a58 <HAL_ADC_ConfigChannel+0x640>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	496e      	ldr	r1, [pc, #440]	@ (8002bcc <HAL_ADC_ConfigChannel+0x7b4>)
 8002a14:	428b      	cmp	r3, r1
 8002a16:	d01d      	beq.n	8002a54 <HAL_ADC_ConfigChannel+0x63c>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	496c      	ldr	r1, [pc, #432]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002a1e:	428b      	cmp	r3, r1
 8002a20:	d016      	beq.n	8002a50 <HAL_ADC_ConfigChannel+0x638>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	496b      	ldr	r1, [pc, #428]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002a28:	428b      	cmp	r3, r1
 8002a2a:	d00f      	beq.n	8002a4c <HAL_ADC_ConfigChannel+0x634>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4969      	ldr	r1, [pc, #420]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a32:	428b      	cmp	r3, r1
 8002a34:	d008      	beq.n	8002a48 <HAL_ADC_ConfigChannel+0x630>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4968      	ldr	r1, [pc, #416]	@ (8002bdc <HAL_ADC_ConfigChannel+0x7c4>)
 8002a3c:	428b      	cmp	r3, r1
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x62c>
 8002a40:	4b67      	ldr	r3, [pc, #412]	@ (8002be0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a42:	e0a0      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002a44:	2300      	movs	r3, #0
 8002a46:	e09e      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002a48:	4b66      	ldr	r3, [pc, #408]	@ (8002be4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a4a:	e09c      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002a4c:	4b66      	ldr	r3, [pc, #408]	@ (8002be8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a4e:	e09a      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002a50:	4b60      	ldr	r3, [pc, #384]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002a52:	e098      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002a54:	4b5e      	ldr	r3, [pc, #376]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002a56:	e096      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002a58:	4b64      	ldr	r3, [pc, #400]	@ (8002bec <HAL_ADC_ConfigChannel+0x7d4>)
 8002a5a:	e094      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002a5c:	4b64      	ldr	r3, [pc, #400]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a5e:	e092      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002a60:	4b64      	ldr	r3, [pc, #400]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a62:	e090      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002a64:	4b64      	ldr	r3, [pc, #400]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a66:	e08e      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e08c      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4962      	ldr	r1, [pc, #392]	@ (8002bfc <HAL_ADC_ConfigChannel+0x7e4>)
 8002a72:	428b      	cmp	r3, r1
 8002a74:	d140      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x6e0>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	494f      	ldr	r1, [pc, #316]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002a7c:	428b      	cmp	r3, r1
 8002a7e:	d039      	beq.n	8002af4 <HAL_ADC_ConfigChannel+0x6dc>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	494d      	ldr	r1, [pc, #308]	@ (8002bbc <HAL_ADC_ConfigChannel+0x7a4>)
 8002a86:	428b      	cmp	r3, r1
 8002a88:	d032      	beq.n	8002af0 <HAL_ADC_ConfigChannel+0x6d8>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	494c      	ldr	r1, [pc, #304]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002a90:	428b      	cmp	r3, r1
 8002a92:	d02b      	beq.n	8002aec <HAL_ADC_ConfigChannel+0x6d4>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	494a      	ldr	r1, [pc, #296]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002a9a:	428b      	cmp	r3, r1
 8002a9c:	d024      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0x6d0>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4949      	ldr	r1, [pc, #292]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002aa4:	428b      	cmp	r3, r1
 8002aa6:	d01d      	beq.n	8002ae4 <HAL_ADC_ConfigChannel+0x6cc>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4947      	ldr	r1, [pc, #284]	@ (8002bcc <HAL_ADC_ConfigChannel+0x7b4>)
 8002aae:	428b      	cmp	r3, r1
 8002ab0:	d016      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0x6c8>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4946      	ldr	r1, [pc, #280]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002ab8:	428b      	cmp	r3, r1
 8002aba:	d00f      	beq.n	8002adc <HAL_ADC_ConfigChannel+0x6c4>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4944      	ldr	r1, [pc, #272]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ac2:	428b      	cmp	r3, r1
 8002ac4:	d008      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x6c0>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4944      	ldr	r1, [pc, #272]	@ (8002bdc <HAL_ADC_ConfigChannel+0x7c4>)
 8002acc:	428b      	cmp	r3, r1
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x6bc>
 8002ad0:	4b43      	ldr	r3, [pc, #268]	@ (8002be0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ad2:	e058      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e056      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002ad8:	4b43      	ldr	r3, [pc, #268]	@ (8002be8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ada:	e054      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002adc:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002ade:	e052      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002ae2:	e050      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002ae4:	4b41      	ldr	r3, [pc, #260]	@ (8002bec <HAL_ADC_ConfigChannel+0x7d4>)
 8002ae6:	e04e      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002ae8:	4b41      	ldr	r3, [pc, #260]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002aea:	e04c      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002aec:	4b41      	ldr	r3, [pc, #260]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002aee:	e04a      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002af0:	4b41      	ldr	r3, [pc, #260]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002af2:	e048      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e046      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4940      	ldr	r1, [pc, #256]	@ (8002c00 <HAL_ADC_ConfigChannel+0x7e8>)
 8002afe:	428b      	cmp	r3, r1
 8002b00:	d140      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x76c>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	492c      	ldr	r1, [pc, #176]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002b08:	428b      	cmp	r3, r1
 8002b0a:	d039      	beq.n	8002b80 <HAL_ADC_ConfigChannel+0x768>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	492a      	ldr	r1, [pc, #168]	@ (8002bbc <HAL_ADC_ConfigChannel+0x7a4>)
 8002b12:	428b      	cmp	r3, r1
 8002b14:	d032      	beq.n	8002b7c <HAL_ADC_ConfigChannel+0x764>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4929      	ldr	r1, [pc, #164]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002b1c:	428b      	cmp	r3, r1
 8002b1e:	d02b      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x760>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4927      	ldr	r1, [pc, #156]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002b26:	428b      	cmp	r3, r1
 8002b28:	d024      	beq.n	8002b74 <HAL_ADC_ConfigChannel+0x75c>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4926      	ldr	r1, [pc, #152]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002b30:	428b      	cmp	r3, r1
 8002b32:	d01d      	beq.n	8002b70 <HAL_ADC_ConfigChannel+0x758>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4924      	ldr	r1, [pc, #144]	@ (8002bcc <HAL_ADC_ConfigChannel+0x7b4>)
 8002b3a:	428b      	cmp	r3, r1
 8002b3c:	d016      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0x754>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4923      	ldr	r1, [pc, #140]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b44:	428b      	cmp	r3, r1
 8002b46:	d00f      	beq.n	8002b68 <HAL_ADC_ConfigChannel+0x750>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4926      	ldr	r1, [pc, #152]	@ (8002be8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b4e:	428b      	cmp	r3, r1
 8002b50:	d008      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x74c>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	492b      	ldr	r1, [pc, #172]	@ (8002c04 <HAL_ADC_ConfigChannel+0x7ec>)
 8002b58:	428b      	cmp	r3, r1
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x748>
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c08 <HAL_ADC_ConfigChannel+0x7f0>)
 8002b5e:	e012      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002b60:	2300      	movs	r3, #0
 8002b62:	e010      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002b64:	4b27      	ldr	r3, [pc, #156]	@ (8002c04 <HAL_ADC_ConfigChannel+0x7ec>)
 8002b66:	e00e      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002b68:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002b6a:	e00c      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002b6c:	4b18      	ldr	r3, [pc, #96]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002b6e:	e00a      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002b70:	4b1e      	ldr	r3, [pc, #120]	@ (8002bec <HAL_ADC_ConfigChannel+0x7d4>)
 8002b72:	e008      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002b74:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b76:	e006      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002b78:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b7a:	e004      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b7e:	e002      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x76e>
 8002b84:	2300      	movs	r3, #0
 8002b86:	4619      	mov	r1, r3
 8002b88:	4610      	mov	r0, r2
 8002b8a:	f7fe fddd 	bl	8001748 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f280 80f6 	bge.w	8002d84 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x79c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_ADC_ConfigChannel+0x794>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a15      	ldr	r2, [pc, #84]	@ (8002bfc <HAL_ADC_ConfigChannel+0x7e4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d131      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x7f8>
 8002bac:	4b17      	ldr	r3, [pc, #92]	@ (8002c0c <HAL_ADC_ConfigChannel+0x7f4>)
 8002bae:	e030      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x7fa>
 8002bb0:	47ff0000 	.word	0x47ff0000
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	04300002 	.word	0x04300002
 8002bbc:	08600004 	.word	0x08600004
 8002bc0:	0c900008 	.word	0x0c900008
 8002bc4:	10c00010 	.word	0x10c00010
 8002bc8:	14f00020 	.word	0x14f00020
 8002bcc:	2a000400 	.word	0x2a000400
 8002bd0:	2e300800 	.word	0x2e300800
 8002bd4:	32601000 	.word	0x32601000
 8002bd8:	43210000 	.word	0x43210000
 8002bdc:	4b840000 	.word	0x4b840000
 8002be0:	4fb80000 	.word	0x4fb80000
 8002be4:	47520000 	.word	0x47520000
 8002be8:	36902000 	.word	0x36902000
 8002bec:	25b00200 	.word	0x25b00200
 8002bf0:	21800100 	.word	0x21800100
 8002bf4:	1d500080 	.word	0x1d500080
 8002bf8:	19200040 	.word	0x19200040
 8002bfc:	40022100 	.word	0x40022100
 8002c00:	58026000 	.word	0x58026000
 8002c04:	3ac04000 	.word	0x3ac04000
 8002c08:	3ef08000 	.word	0x3ef08000
 8002c0c:	40022300 	.word	0x40022300
 8002c10:	4b61      	ldr	r3, [pc, #388]	@ (8002d98 <HAL_ADC_ConfigChannel+0x980>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fd8a 	bl	800172c <LL_ADC_GetCommonPathInternalCh>
 8002c18:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8002d9c <HAL_ADC_ConfigChannel+0x984>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d004      	beq.n	8002c2e <HAL_ADC_ConfigChannel+0x816>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a5d      	ldr	r2, [pc, #372]	@ (8002da0 <HAL_ADC_ConfigChannel+0x988>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d10e      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x834>
 8002c2e:	485b      	ldr	r0, [pc, #364]	@ (8002d9c <HAL_ADC_ConfigChannel+0x984>)
 8002c30:	f7fe ffde 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002c34:	4604      	mov	r4, r0
 8002c36:	485a      	ldr	r0, [pc, #360]	@ (8002da0 <HAL_ADC_ConfigChannel+0x988>)
 8002c38:	f7fe ffda 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4323      	orrs	r3, r4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e008      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x846>
 8002c4c:	4855      	ldr	r0, [pc, #340]	@ (8002da4 <HAL_ADC_ConfigChannel+0x98c>)
 8002c4e:	f7fe ffcf 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d07d      	beq.n	8002d5e <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a50      	ldr	r2, [pc, #320]	@ (8002da8 <HAL_ADC_ConfigChannel+0x990>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d130      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x8b6>
 8002c6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d12b      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002da4 <HAL_ADC_ConfigChannel+0x98c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	f040 8081 	bne.w	8002d84 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a45      	ldr	r2, [pc, #276]	@ (8002d9c <HAL_ADC_ConfigChannel+0x984>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d004      	beq.n	8002c96 <HAL_ADC_ConfigChannel+0x87e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a43      	ldr	r2, [pc, #268]	@ (8002da0 <HAL_ADC_ConfigChannel+0x988>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x882>
 8002c96:	4a45      	ldr	r2, [pc, #276]	@ (8002dac <HAL_ADC_ConfigChannel+0x994>)
 8002c98:	e000      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x884>
 8002c9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d98 <HAL_ADC_ConfigChannel+0x980>)
 8002c9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	f7fe fd2e 	bl	8001706 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002caa:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <HAL_ADC_ConfigChannel+0x998>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	099b      	lsrs	r3, r3, #6
 8002cb0:	4a40      	ldr	r2, [pc, #256]	@ (8002db4 <HAL_ADC_ConfigChannel+0x99c>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	099b      	lsrs	r3, r3, #6
 8002cb8:	3301      	adds	r3, #1
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002cbe:	e002      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f9      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ccc:	e05a      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a39      	ldr	r2, [pc, #228]	@ (8002db8 <HAL_ADC_ConfigChannel+0x9a0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d11e      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x8fe>
 8002cd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d119      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8002da4 <HAL_ADC_ConfigChannel+0x98c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d14b      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d9c <HAL_ADC_ConfigChannel+0x984>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d004      	beq.n	8002d00 <HAL_ADC_ConfigChannel+0x8e8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a29      	ldr	r2, [pc, #164]	@ (8002da0 <HAL_ADC_ConfigChannel+0x988>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x8ec>
 8002d00:	4a2a      	ldr	r2, [pc, #168]	@ (8002dac <HAL_ADC_ConfigChannel+0x994>)
 8002d02:	e000      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x8ee>
 8002d04:	4a24      	ldr	r2, [pc, #144]	@ (8002d98 <HAL_ADC_ConfigChannel+0x980>)
 8002d06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f7fe fcf9 	bl	8001706 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d14:	e036      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a28      	ldr	r2, [pc, #160]	@ (8002dbc <HAL_ADC_ConfigChannel+0x9a4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d131      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x96c>
 8002d20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d12c      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002da4 <HAL_ADC_ConfigChannel+0x98c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d127      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a18      	ldr	r2, [pc, #96]	@ (8002d9c <HAL_ADC_ConfigChannel+0x984>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d004      	beq.n	8002d48 <HAL_ADC_ConfigChannel+0x930>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a17      	ldr	r2, [pc, #92]	@ (8002da0 <HAL_ADC_ConfigChannel+0x988>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x934>
 8002d48:	4a18      	ldr	r2, [pc, #96]	@ (8002dac <HAL_ADC_ConfigChannel+0x994>)
 8002d4a:	e000      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x936>
 8002d4c:	4a12      	ldr	r2, [pc, #72]	@ (8002d98 <HAL_ADC_ConfigChannel+0x980>)
 8002d4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f7fe fcd5 	bl	8001706 <LL_ADC_SetCommonPathInternalCh>
 8002d5c:	e012      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002d70:	e008      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002d8c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3794      	adds	r7, #148	@ 0x94
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd90      	pop	{r4, r7, pc}
 8002d98:	58026300 	.word	0x58026300
 8002d9c:	40022000 	.word	0x40022000
 8002da0:	40022100 	.word	0x40022100
 8002da4:	58026000 	.word	0x58026000
 8002da8:	c7520000 	.word	0xc7520000
 8002dac:	40022300 	.word	0x40022300
 8002db0:	24000000 	.word	0x24000000
 8002db4:	053e2d63 	.word	0x053e2d63
 8002db8:	c3210000 	.word	0xc3210000
 8002dbc:	cb840000 	.word	0xcb840000

08002dc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe ff0f 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d16e      	bne.n	8002eb6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	4b38      	ldr	r3, [pc, #224]	@ (8002ec0 <ADC_Enable+0x100>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dea:	f043 0210 	orr.w	r2, r3, #16
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e05a      	b.n	8002eb8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe fede 	bl	8001bc8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e0c:	f7fe fc5c 	bl	80016c8 <HAL_GetTick>
 8002e10:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec4 <ADC_Enable+0x104>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <ADC_Enable+0x66>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a29      	ldr	r2, [pc, #164]	@ (8002ec8 <ADC_Enable+0x108>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d101      	bne.n	8002e2a <ADC_Enable+0x6a>
 8002e26:	4b29      	ldr	r3, [pc, #164]	@ (8002ecc <ADC_Enable+0x10c>)
 8002e28:	e000      	b.n	8002e2c <ADC_Enable+0x6c>
 8002e2a:	4b29      	ldr	r3, [pc, #164]	@ (8002ed0 <ADC_Enable+0x110>)
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fe61 	bl	8001af4 <LL_ADC_GetMultimode>
 8002e32:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a23      	ldr	r2, [pc, #140]	@ (8002ec8 <ADC_Enable+0x108>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d002      	beq.n	8002e44 <ADC_Enable+0x84>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	e000      	b.n	8002e46 <ADC_Enable+0x86>
 8002e44:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec4 <ADC_Enable+0x104>)
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d02c      	beq.n	8002ea8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d130      	bne.n	8002eb6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e54:	e028      	b.n	8002ea8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fec8 	bl	8001bf0 <LL_ADC_IsEnabled>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d104      	bne.n	8002e70 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe feac 	bl	8001bc8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e70:	f7fe fc2a 	bl	80016c8 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d914      	bls.n	8002ea8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d00d      	beq.n	8002ea8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e007      	b.n	8002eb8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d1cf      	bne.n	8002e56 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	8000003f 	.word	0x8000003f
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	40022100 	.word	0x40022100
 8002ecc:	40022300 	.word	0x40022300
 8002ed0:	58026300 	.word	0x58026300

08002ed4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a6c      	ldr	r2, [pc, #432]	@ (8003094 <ADC_ConfigureBoostMode+0x1c0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <ADC_ConfigureBoostMode+0x1c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	@ (8003098 <ADC_ConfigureBoostMode+0x1c4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d109      	bne.n	8002f04 <ADC_ConfigureBoostMode+0x30>
 8002ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800309c <ADC_ConfigureBoostMode+0x1c8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf14      	ite	ne
 8002efc:	2301      	movne	r3, #1
 8002efe:	2300      	moveq	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e008      	b.n	8002f16 <ADC_ConfigureBoostMode+0x42>
 8002f04:	4b66      	ldr	r3, [pc, #408]	@ (80030a0 <ADC_ConfigureBoostMode+0x1cc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01c      	beq.n	8002f54 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f1a:	f003 fe05 	bl	8006b28 <HAL_RCC_GetHCLKFreq>
 8002f1e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f28:	d010      	beq.n	8002f4c <ADC_ConfigureBoostMode+0x78>
 8002f2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f2e:	d873      	bhi.n	8003018 <ADC_ConfigureBoostMode+0x144>
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f34:	d002      	beq.n	8002f3c <ADC_ConfigureBoostMode+0x68>
 8002f36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f3a:	d16d      	bne.n	8003018 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	60fb      	str	r3, [r7, #12]
        break;
 8002f4a:	e068      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	089b      	lsrs	r3, r3, #2
 8002f50:	60fb      	str	r3, [r7, #12]
        break;
 8002f52:	e064      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f54:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	f004 ffe0 	bl	8007f20 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f60:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f6a:	d051      	beq.n	8003010 <ADC_ConfigureBoostMode+0x13c>
 8002f6c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002f70:	d854      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002f72:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f76:	d047      	beq.n	8003008 <ADC_ConfigureBoostMode+0x134>
 8002f78:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002f7c:	d84e      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002f7e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f82:	d03d      	beq.n	8003000 <ADC_ConfigureBoostMode+0x12c>
 8002f84:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002f88:	d848      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002f8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f8e:	d033      	beq.n	8002ff8 <ADC_ConfigureBoostMode+0x124>
 8002f90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f94:	d842      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002f96:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002f9a:	d029      	beq.n	8002ff0 <ADC_ConfigureBoostMode+0x11c>
 8002f9c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002fa0:	d83c      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002fa2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002fa6:	d01a      	beq.n	8002fde <ADC_ConfigureBoostMode+0x10a>
 8002fa8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002fac:	d836      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002fae:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002fb2:	d014      	beq.n	8002fde <ADC_ConfigureBoostMode+0x10a>
 8002fb4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002fb8:	d830      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fbe:	d00e      	beq.n	8002fde <ADC_ConfigureBoostMode+0x10a>
 8002fc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fc4:	d82a      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002fc6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fca:	d008      	beq.n	8002fde <ADC_ConfigureBoostMode+0x10a>
 8002fcc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002fd0:	d824      	bhi.n	800301c <ADC_ConfigureBoostMode+0x148>
 8002fd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fd6:	d002      	beq.n	8002fde <ADC_ConfigureBoostMode+0x10a>
 8002fd8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002fdc:	d11e      	bne.n	800301c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	0c9b      	lsrs	r3, r3, #18
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	60fb      	str	r3, [r7, #12]
        break;
 8002fee:	e016      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	091b      	lsrs	r3, r3, #4
 8002ff4:	60fb      	str	r3, [r7, #12]
        break;
 8002ff6:	e012      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	60fb      	str	r3, [r7, #12]
        break;
 8002ffe:	e00e      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	60fb      	str	r3, [r7, #12]
        break;
 8003006:	e00a      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	09db      	lsrs	r3, r3, #7
 800300c:	60fb      	str	r3, [r7, #12]
        break;
 800300e:	e006      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	60fb      	str	r3, [r7, #12]
        break;
 8003016:	e002      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003018:	bf00      	nop
 800301a:	e000      	b.n	800301e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800301c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a1f      	ldr	r2, [pc, #124]	@ (80030a4 <ADC_ConfigureBoostMode+0x1d0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d808      	bhi.n	800303e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800303a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800303c:	e025      	b.n	800308a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4a19      	ldr	r2, [pc, #100]	@ (80030a8 <ADC_ConfigureBoostMode+0x1d4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d80a      	bhi.n	800305c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003058:	609a      	str	r2, [r3, #8]
}
 800305a:	e016      	b.n	800308a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4a13      	ldr	r2, [pc, #76]	@ (80030ac <ADC_ConfigureBoostMode+0x1d8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d80a      	bhi.n	800307a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003076:	609a      	str	r2, [r3, #8]
}
 8003078:	e007      	b.n	800308a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003088:	609a      	str	r2, [r3, #8]
}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40022000 	.word	0x40022000
 8003098:	40022100 	.word	0x40022100
 800309c:	40022300 	.word	0x40022300
 80030a0:	58026300 	.word	0x58026300
 80030a4:	005f5e10 	.word	0x005f5e10
 80030a8:	00bebc20 	.word	0x00bebc20
 80030ac:	017d7840 	.word	0x017d7840

080030b0 <LL_ADC_IsEnabled>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <LL_ADC_IsEnabled+0x18>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <LL_ADC_IsEnabled+0x1a>
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d101      	bne.n	80030ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b0a3      	sub	sp, #140	@ 0x8c
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003116:	2302      	movs	r3, #2
 8003118:	e0c1      	b.n	800329e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003122:	2300      	movs	r3, #0
 8003124:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003126:	2300      	movs	r3, #0
 8003128:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a5e      	ldr	r2, [pc, #376]	@ (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d102      	bne.n	800313a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003134:	4b5d      	ldr	r3, [pc, #372]	@ (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e001      	b.n	800313e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003148:	f043 0220 	orr.w	r2, r3, #32
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0a0      	b.n	800329e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ffb9 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 8003164:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ffb2 	bl	80030d6 <LL_ADC_REG_IsConversionOngoing>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	f040 8081 	bne.w	800327c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800317a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800317e:	2b00      	cmp	r3, #0
 8003180:	d17c      	bne.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a48      	ldr	r2, [pc, #288]	@ (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d004      	beq.n	8003196 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a46      	ldr	r2, [pc, #280]	@ (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003196:	4b46      	ldr	r3, [pc, #280]	@ (80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003198:	e000      	b.n	800319c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800319a:	4b46      	ldr	r3, [pc, #280]	@ (80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800319c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d039      	beq.n	800321a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80031a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3a      	ldr	r2, [pc, #232]	@ (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a39      	ldr	r2, [pc, #228]	@ (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d10e      	bne.n	80031ea <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80031cc:	4836      	ldr	r0, [pc, #216]	@ (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80031ce:	f7ff ff6f 	bl	80030b0 <LL_ADC_IsEnabled>
 80031d2:	4604      	mov	r4, r0
 80031d4:	4835      	ldr	r0, [pc, #212]	@ (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80031d6:	f7ff ff6b 	bl	80030b0 <LL_ADC_IsEnabled>
 80031da:	4603      	mov	r3, r0
 80031dc:	4323      	orrs	r3, r4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf0c      	ite	eq
 80031e2:	2301      	moveq	r3, #1
 80031e4:	2300      	movne	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e008      	b.n	80031fc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80031ea:	4833      	ldr	r0, [pc, #204]	@ (80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80031ec:	f7ff ff60 	bl	80030b0 <LL_ADC_IsEnabled>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d047      	beq.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003200:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	4b2d      	ldr	r3, [pc, #180]	@ (80032bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003206:	4013      	ands	r3, r2
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	6811      	ldr	r1, [r2, #0]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	6892      	ldr	r2, [r2, #8]
 8003210:	430a      	orrs	r2, r1
 8003212:	431a      	orrs	r2, r3
 8003214:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003216:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003218:	e03a      	b.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800321a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003222:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003224:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1f      	ldr	r2, [pc, #124]	@ (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d004      	beq.n	800323a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1d      	ldr	r2, [pc, #116]	@ (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d10e      	bne.n	8003258 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800323a:	481b      	ldr	r0, [pc, #108]	@ (80032a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800323c:	f7ff ff38 	bl	80030b0 <LL_ADC_IsEnabled>
 8003240:	4604      	mov	r4, r0
 8003242:	481a      	ldr	r0, [pc, #104]	@ (80032ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003244:	f7ff ff34 	bl	80030b0 <LL_ADC_IsEnabled>
 8003248:	4603      	mov	r3, r0
 800324a:	4323      	orrs	r3, r4
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf0c      	ite	eq
 8003250:	2301      	moveq	r3, #1
 8003252:	2300      	movne	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e008      	b.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003258:	4817      	ldr	r0, [pc, #92]	@ (80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800325a:	f7ff ff29 	bl	80030b0 <LL_ADC_IsEnabled>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d010      	beq.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800326e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	4b12      	ldr	r3, [pc, #72]	@ (80032bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003274:	4013      	ands	r3, r2
 8003276:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003278:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800327a:	e009      	b.n	8003290 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003280:	f043 0220 	orr.w	r2, r3, #32
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800328e:	e000      	b.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003290:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800329a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800329e:	4618      	mov	r0, r3
 80032a0:	378c      	adds	r7, #140	@ 0x8c
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd90      	pop	{r4, r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40022000 	.word	0x40022000
 80032ac:	40022100 	.word	0x40022100
 80032b0:	40022300 	.word	0x40022300
 80032b4:	58026300 	.word	0x58026300
 80032b8:	58026000 	.word	0x58026000
 80032bc:	fffff0e0 	.word	0xfffff0e0

080032c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <__NVIC_SetPriorityGrouping+0x40>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032dc:	4013      	ands	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032e8:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <__NVIC_SetPriorityGrouping+0x44>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ee:	4a04      	ldr	r2, [pc, #16]	@ (8003300 <__NVIC_SetPriorityGrouping+0x40>)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	60d3      	str	r3, [r2, #12]
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000ed00 	.word	0xe000ed00
 8003304:	05fa0000 	.word	0x05fa0000

08003308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800330c:	4b04      	ldr	r3, [pc, #16]	@ (8003320 <__NVIC_GetPriorityGrouping+0x18>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	0a1b      	lsrs	r3, r3, #8
 8003312:	f003 0307 	and.w	r3, r3, #7
}
 8003316:	4618      	mov	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	e000ed00 	.word	0xe000ed00

08003324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003334:	2b00      	cmp	r3, #0
 8003336:	db0a      	blt.n	800334e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	490c      	ldr	r1, [pc, #48]	@ (8003370 <__NVIC_SetPriority+0x4c>)
 800333e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	440b      	add	r3, r1
 8003348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800334c:	e00a      	b.n	8003364 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4908      	ldr	r1, [pc, #32]	@ (8003374 <__NVIC_SetPriority+0x50>)
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	3b04      	subs	r3, #4
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	440b      	add	r3, r1
 8003362:	761a      	strb	r2, [r3, #24]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000e100 	.word	0xe000e100
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	@ 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f1c3 0307 	rsb	r3, r3, #7
 8003392:	2b04      	cmp	r3, #4
 8003394:	bf28      	it	cs
 8003396:	2304      	movcs	r3, #4
 8003398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3304      	adds	r3, #4
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d902      	bls.n	80033a8 <NVIC_EncodePriority+0x30>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3b03      	subs	r3, #3
 80033a6:	e000      	b.n	80033aa <NVIC_EncodePriority+0x32>
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	f04f 32ff 	mov.w	r2, #4294967295
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	401a      	ands	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c0:	f04f 31ff 	mov.w	r1, #4294967295
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	43d9      	mvns	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	4313      	orrs	r3, r2
         );
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3724      	adds	r7, #36	@ 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033f0:	d301      	bcc.n	80033f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033f2:	2301      	movs	r3, #1
 80033f4:	e00f      	b.n	8003416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003420 <SysTick_Config+0x40>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fe:	210f      	movs	r1, #15
 8003400:	f04f 30ff 	mov.w	r0, #4294967295
 8003404:	f7ff ff8e 	bl	8003324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003408:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <SysTick_Config+0x40>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340e:	4b04      	ldr	r3, [pc, #16]	@ (8003420 <SysTick_Config+0x40>)
 8003410:	2207      	movs	r2, #7
 8003412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	e000e010 	.word	0xe000e010

08003424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff47 	bl	80032c0 <__NVIC_SetPriorityGrouping>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af00      	add	r7, sp, #0
 8003440:	4603      	mov	r3, r0
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003448:	f7ff ff5e 	bl	8003308 <__NVIC_GetPriorityGrouping>
 800344c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	6978      	ldr	r0, [r7, #20]
 8003454:	f7ff ff90 	bl	8003378 <NVIC_EncodePriority>
 8003458:	4602      	mov	r2, r0
 800345a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff5f 	bl	8003324 <__NVIC_SetPriority>
}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff ffb2 	bl	80033e0 <SysTick_Config>
 800347c:	4603      	mov	r3, r0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800348c:	f3bf 8f5f 	dmb	sy
}
 8003490:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003492:	4b07      	ldr	r3, [pc, #28]	@ (80034b0 <HAL_MPU_Disable+0x28>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	4a06      	ldr	r2, [pc, #24]	@ (80034b0 <HAL_MPU_Disable+0x28>)
 8003498:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800349c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800349e:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <HAL_MPU_Disable+0x2c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	605a      	str	r2, [r3, #4]
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000ed00 	.word	0xe000ed00
 80034b4:	e000ed90 	.word	0xe000ed90

080034b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80034c0:	4a0b      	ldr	r2, [pc, #44]	@ (80034f0 <HAL_MPU_Enable+0x38>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80034ca:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <HAL_MPU_Enable+0x3c>)
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ce:	4a09      	ldr	r2, [pc, #36]	@ (80034f4 <HAL_MPU_Enable+0x3c>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80034d6:	f3bf 8f4f 	dsb	sy
}
 80034da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034dc:	f3bf 8f6f 	isb	sy
}
 80034e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000ed90 	.word	0xe000ed90
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	785a      	ldrb	r2, [r3, #1]
 8003504:	4b1b      	ldr	r3, [pc, #108]	@ (8003574 <HAL_MPU_ConfigRegion+0x7c>)
 8003506:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003508:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <HAL_MPU_ConfigRegion+0x7c>)
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	4a19      	ldr	r2, [pc, #100]	@ (8003574 <HAL_MPU_ConfigRegion+0x7c>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003514:	4a17      	ldr	r2, [pc, #92]	@ (8003574 <HAL_MPU_ConfigRegion+0x7c>)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7b1b      	ldrb	r3, [r3, #12]
 8003520:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7adb      	ldrb	r3, [r3, #11]
 8003526:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003528:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	7a9b      	ldrb	r3, [r3, #10]
 800352e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003530:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	7b5b      	ldrb	r3, [r3, #13]
 8003536:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003538:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7b9b      	ldrb	r3, [r3, #14]
 800353e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003540:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7bdb      	ldrb	r3, [r3, #15]
 8003546:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003548:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	7a5b      	ldrb	r3, [r3, #9]
 800354e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003550:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	7a1b      	ldrb	r3, [r3, #8]
 8003556:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003558:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	7812      	ldrb	r2, [r2, #0]
 800355e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003560:	4a04      	ldr	r2, [pc, #16]	@ (8003574 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003562:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003564:	6113      	str	r3, [r2, #16]
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	e000ed90 	.word	0xe000ed90

08003578 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003580:	f7fe f8a2 	bl	80016c8 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e312      	b.n	8003bb6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a66      	ldr	r2, [pc, #408]	@ (8003730 <HAL_DMA_Init+0x1b8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d04a      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a65      	ldr	r2, [pc, #404]	@ (8003734 <HAL_DMA_Init+0x1bc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d045      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a63      	ldr	r2, [pc, #396]	@ (8003738 <HAL_DMA_Init+0x1c0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d040      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a62      	ldr	r2, [pc, #392]	@ (800373c <HAL_DMA_Init+0x1c4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d03b      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a60      	ldr	r2, [pc, #384]	@ (8003740 <HAL_DMA_Init+0x1c8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d036      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5f      	ldr	r2, [pc, #380]	@ (8003744 <HAL_DMA_Init+0x1cc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d031      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003748 <HAL_DMA_Init+0x1d0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d02c      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a5c      	ldr	r2, [pc, #368]	@ (800374c <HAL_DMA_Init+0x1d4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d027      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003750 <HAL_DMA_Init+0x1d8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d022      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a59      	ldr	r2, [pc, #356]	@ (8003754 <HAL_DMA_Init+0x1dc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d01d      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a57      	ldr	r2, [pc, #348]	@ (8003758 <HAL_DMA_Init+0x1e0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d018      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a56      	ldr	r2, [pc, #344]	@ (800375c <HAL_DMA_Init+0x1e4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a54      	ldr	r2, [pc, #336]	@ (8003760 <HAL_DMA_Init+0x1e8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00e      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a53      	ldr	r2, [pc, #332]	@ (8003764 <HAL_DMA_Init+0x1ec>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d009      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a51      	ldr	r2, [pc, #324]	@ (8003768 <HAL_DMA_Init+0x1f0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_DMA_Init+0xb8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a50      	ldr	r2, [pc, #320]	@ (800376c <HAL_DMA_Init+0x1f4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_DMA_Init+0xbc>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <HAL_DMA_Init+0xbe>
 8003634:	2300      	movs	r3, #0
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 813c 	beq.w	80038b4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a37      	ldr	r2, [pc, #220]	@ (8003730 <HAL_DMA_Init+0x1b8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d04a      	beq.n	80036ec <HAL_DMA_Init+0x174>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a36      	ldr	r2, [pc, #216]	@ (8003734 <HAL_DMA_Init+0x1bc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d045      	beq.n	80036ec <HAL_DMA_Init+0x174>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a34      	ldr	r2, [pc, #208]	@ (8003738 <HAL_DMA_Init+0x1c0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d040      	beq.n	80036ec <HAL_DMA_Init+0x174>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a33      	ldr	r2, [pc, #204]	@ (800373c <HAL_DMA_Init+0x1c4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d03b      	beq.n	80036ec <HAL_DMA_Init+0x174>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a31      	ldr	r2, [pc, #196]	@ (8003740 <HAL_DMA_Init+0x1c8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d036      	beq.n	80036ec <HAL_DMA_Init+0x174>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a30      	ldr	r2, [pc, #192]	@ (8003744 <HAL_DMA_Init+0x1cc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d031      	beq.n	80036ec <HAL_DMA_Init+0x174>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2e      	ldr	r2, [pc, #184]	@ (8003748 <HAL_DMA_Init+0x1d0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d02c      	beq.n	80036ec <HAL_DMA_Init+0x174>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2d      	ldr	r2, [pc, #180]	@ (800374c <HAL_DMA_Init+0x1d4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d027      	beq.n	80036ec <HAL_DMA_Init+0x174>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003750 <HAL_DMA_Init+0x1d8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d022      	beq.n	80036ec <HAL_DMA_Init+0x174>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003754 <HAL_DMA_Init+0x1dc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d01d      	beq.n	80036ec <HAL_DMA_Init+0x174>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a28      	ldr	r2, [pc, #160]	@ (8003758 <HAL_DMA_Init+0x1e0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <HAL_DMA_Init+0x174>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a27      	ldr	r2, [pc, #156]	@ (800375c <HAL_DMA_Init+0x1e4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <HAL_DMA_Init+0x174>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a25      	ldr	r2, [pc, #148]	@ (8003760 <HAL_DMA_Init+0x1e8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <HAL_DMA_Init+0x174>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a24      	ldr	r2, [pc, #144]	@ (8003764 <HAL_DMA_Init+0x1ec>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_DMA_Init+0x174>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a22      	ldr	r2, [pc, #136]	@ (8003768 <HAL_DMA_Init+0x1f0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_DMA_Init+0x174>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a21      	ldr	r2, [pc, #132]	@ (800376c <HAL_DMA_Init+0x1f4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d108      	bne.n	80036fe <HAL_DMA_Init+0x186>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e007      	b.n	800370e <HAL_DMA_Init+0x196>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800370e:	e02f      	b.n	8003770 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003710:	f7fd ffda 	bl	80016c8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b05      	cmp	r3, #5
 800371c:	d928      	bls.n	8003770 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2203      	movs	r2, #3
 8003728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e242      	b.n	8003bb6 <HAL_DMA_Init+0x63e>
 8003730:	40020010 	.word	0x40020010
 8003734:	40020028 	.word	0x40020028
 8003738:	40020040 	.word	0x40020040
 800373c:	40020058 	.word	0x40020058
 8003740:	40020070 	.word	0x40020070
 8003744:	40020088 	.word	0x40020088
 8003748:	400200a0 	.word	0x400200a0
 800374c:	400200b8 	.word	0x400200b8
 8003750:	40020410 	.word	0x40020410
 8003754:	40020428 	.word	0x40020428
 8003758:	40020440 	.word	0x40020440
 800375c:	40020458 	.word	0x40020458
 8003760:	40020470 	.word	0x40020470
 8003764:	40020488 	.word	0x40020488
 8003768:	400204a0 	.word	0x400204a0
 800376c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1c8      	bne.n	8003710 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4b83      	ldr	r3, [pc, #524]	@ (8003998 <HAL_DMA_Init+0x420>)
 800378a:	4013      	ands	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003796:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d107      	bne.n	80037d4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	4313      	orrs	r3, r2
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b28      	cmp	r3, #40	@ 0x28
 80037da:	d903      	bls.n	80037e4 <HAL_DMA_Init+0x26c>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80037e2:	d91f      	bls.n	8003824 <HAL_DMA_Init+0x2ac>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80037ea:	d903      	bls.n	80037f4 <HAL_DMA_Init+0x27c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b42      	cmp	r3, #66	@ 0x42
 80037f2:	d917      	bls.n	8003824 <HAL_DMA_Init+0x2ac>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b46      	cmp	r3, #70	@ 0x46
 80037fa:	d903      	bls.n	8003804 <HAL_DMA_Init+0x28c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b48      	cmp	r3, #72	@ 0x48
 8003802:	d90f      	bls.n	8003824 <HAL_DMA_Init+0x2ac>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b4e      	cmp	r3, #78	@ 0x4e
 800380a:	d903      	bls.n	8003814 <HAL_DMA_Init+0x29c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b52      	cmp	r3, #82	@ 0x52
 8003812:	d907      	bls.n	8003824 <HAL_DMA_Init+0x2ac>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b73      	cmp	r3, #115	@ 0x73
 800381a:	d905      	bls.n	8003828 <HAL_DMA_Init+0x2b0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b77      	cmp	r3, #119	@ 0x77
 8003822:	d801      	bhi.n	8003828 <HAL_DMA_Init+0x2b0>
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_DMA_Init+0x2b2>
 8003828:	2300      	movs	r3, #0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003834:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f023 0307 	bic.w	r3, r3, #7
 800384c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	2b04      	cmp	r3, #4
 800385e:	d117      	bne.n	8003890 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00e      	beq.n	8003890 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f001 f9b4 	bl	8004be0 <DMA_CheckFifoParam>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2240      	movs	r2, #64	@ 0x40
 8003882:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e192      	b.n	8003bb6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f001 f8ef 	bl	8004a7c <DMA_CalcBaseAndBitshift>
 800389e:	4603      	mov	r3, r0
 80038a0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	223f      	movs	r2, #63	@ 0x3f
 80038ac:	409a      	lsls	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	e0c8      	b.n	8003a46 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a38      	ldr	r2, [pc, #224]	@ (800399c <HAL_DMA_Init+0x424>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d022      	beq.n	8003904 <HAL_DMA_Init+0x38c>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a37      	ldr	r2, [pc, #220]	@ (80039a0 <HAL_DMA_Init+0x428>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d01d      	beq.n	8003904 <HAL_DMA_Init+0x38c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a35      	ldr	r2, [pc, #212]	@ (80039a4 <HAL_DMA_Init+0x42c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d018      	beq.n	8003904 <HAL_DMA_Init+0x38c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a34      	ldr	r2, [pc, #208]	@ (80039a8 <HAL_DMA_Init+0x430>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <HAL_DMA_Init+0x38c>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a32      	ldr	r2, [pc, #200]	@ (80039ac <HAL_DMA_Init+0x434>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00e      	beq.n	8003904 <HAL_DMA_Init+0x38c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a31      	ldr	r2, [pc, #196]	@ (80039b0 <HAL_DMA_Init+0x438>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d009      	beq.n	8003904 <HAL_DMA_Init+0x38c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2f      	ldr	r2, [pc, #188]	@ (80039b4 <HAL_DMA_Init+0x43c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d004      	beq.n	8003904 <HAL_DMA_Init+0x38c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2e      	ldr	r2, [pc, #184]	@ (80039b8 <HAL_DMA_Init+0x440>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d101      	bne.n	8003908 <HAL_DMA_Init+0x390>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_DMA_Init+0x392>
 8003908:	2300      	movs	r3, #0
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8092 	beq.w	8003a34 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a21      	ldr	r2, [pc, #132]	@ (800399c <HAL_DMA_Init+0x424>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d021      	beq.n	800395e <HAL_DMA_Init+0x3e6>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a20      	ldr	r2, [pc, #128]	@ (80039a0 <HAL_DMA_Init+0x428>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d01c      	beq.n	800395e <HAL_DMA_Init+0x3e6>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1e      	ldr	r2, [pc, #120]	@ (80039a4 <HAL_DMA_Init+0x42c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d017      	beq.n	800395e <HAL_DMA_Init+0x3e6>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1d      	ldr	r2, [pc, #116]	@ (80039a8 <HAL_DMA_Init+0x430>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d012      	beq.n	800395e <HAL_DMA_Init+0x3e6>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1b      	ldr	r2, [pc, #108]	@ (80039ac <HAL_DMA_Init+0x434>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00d      	beq.n	800395e <HAL_DMA_Init+0x3e6>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1a      	ldr	r2, [pc, #104]	@ (80039b0 <HAL_DMA_Init+0x438>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d008      	beq.n	800395e <HAL_DMA_Init+0x3e6>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a18      	ldr	r2, [pc, #96]	@ (80039b4 <HAL_DMA_Init+0x43c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d003      	beq.n	800395e <HAL_DMA_Init+0x3e6>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a17      	ldr	r2, [pc, #92]	@ (80039b8 <HAL_DMA_Init+0x440>)
 800395c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4b10      	ldr	r3, [pc, #64]	@ (80039bc <HAL_DMA_Init+0x444>)
 800397a:	4013      	ands	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b40      	cmp	r3, #64	@ 0x40
 8003984:	d01c      	beq.n	80039c0 <HAL_DMA_Init+0x448>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b80      	cmp	r3, #128	@ 0x80
 800398c:	d102      	bne.n	8003994 <HAL_DMA_Init+0x41c>
 800398e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003992:	e016      	b.n	80039c2 <HAL_DMA_Init+0x44a>
 8003994:	2300      	movs	r3, #0
 8003996:	e014      	b.n	80039c2 <HAL_DMA_Init+0x44a>
 8003998:	fe10803f 	.word	0xfe10803f
 800399c:	58025408 	.word	0x58025408
 80039a0:	5802541c 	.word	0x5802541c
 80039a4:	58025430 	.word	0x58025430
 80039a8:	58025444 	.word	0x58025444
 80039ac:	58025458 	.word	0x58025458
 80039b0:	5802546c 	.word	0x5802546c
 80039b4:	58025480 	.word	0x58025480
 80039b8:	58025494 	.word	0x58025494
 80039bc:	fffe000f 	.word	0xfffe000f
 80039c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68d2      	ldr	r2, [r2, #12]
 80039c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80039f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b6e      	ldr	r3, [pc, #440]	@ (8003bc0 <HAL_DMA_Init+0x648>)
 8003a08:	4413      	add	r3, r2
 8003a0a:	4a6e      	ldr	r2, [pc, #440]	@ (8003bc4 <HAL_DMA_Init+0x64c>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	009a      	lsls	r2, r3, #2
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f001 f82f 	bl	8004a7c <DMA_CalcBaseAndBitshift>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	e008      	b.n	8003a46 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2240      	movs	r2, #64	@ 0x40
 8003a38:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e0b7      	b.n	8003bb6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a5f      	ldr	r2, [pc, #380]	@ (8003bc8 <HAL_DMA_Init+0x650>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d072      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a5d      	ldr	r2, [pc, #372]	@ (8003bcc <HAL_DMA_Init+0x654>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d06d      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd0 <HAL_DMA_Init+0x658>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d068      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5a      	ldr	r2, [pc, #360]	@ (8003bd4 <HAL_DMA_Init+0x65c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d063      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a59      	ldr	r2, [pc, #356]	@ (8003bd8 <HAL_DMA_Init+0x660>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d05e      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a57      	ldr	r2, [pc, #348]	@ (8003bdc <HAL_DMA_Init+0x664>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d059      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a56      	ldr	r2, [pc, #344]	@ (8003be0 <HAL_DMA_Init+0x668>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d054      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a54      	ldr	r2, [pc, #336]	@ (8003be4 <HAL_DMA_Init+0x66c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d04f      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a53      	ldr	r2, [pc, #332]	@ (8003be8 <HAL_DMA_Init+0x670>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d04a      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a51      	ldr	r2, [pc, #324]	@ (8003bec <HAL_DMA_Init+0x674>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d045      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a50      	ldr	r2, [pc, #320]	@ (8003bf0 <HAL_DMA_Init+0x678>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d040      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a4e      	ldr	r2, [pc, #312]	@ (8003bf4 <HAL_DMA_Init+0x67c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d03b      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a4d      	ldr	r2, [pc, #308]	@ (8003bf8 <HAL_DMA_Init+0x680>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d036      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a4b      	ldr	r2, [pc, #300]	@ (8003bfc <HAL_DMA_Init+0x684>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d031      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8003c00 <HAL_DMA_Init+0x688>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d02c      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a48      	ldr	r2, [pc, #288]	@ (8003c04 <HAL_DMA_Init+0x68c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d027      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a47      	ldr	r2, [pc, #284]	@ (8003c08 <HAL_DMA_Init+0x690>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d022      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a45      	ldr	r2, [pc, #276]	@ (8003c0c <HAL_DMA_Init+0x694>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01d      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a44      	ldr	r2, [pc, #272]	@ (8003c10 <HAL_DMA_Init+0x698>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d018      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a42      	ldr	r2, [pc, #264]	@ (8003c14 <HAL_DMA_Init+0x69c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a41      	ldr	r2, [pc, #260]	@ (8003c18 <HAL_DMA_Init+0x6a0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00e      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c1c <HAL_DMA_Init+0x6a4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d009      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a3e      	ldr	r2, [pc, #248]	@ (8003c20 <HAL_DMA_Init+0x6a8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_DMA_Init+0x5be>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a3c      	ldr	r2, [pc, #240]	@ (8003c24 <HAL_DMA_Init+0x6ac>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <HAL_DMA_Init+0x5c2>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_DMA_Init+0x5c4>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d032      	beq.n	8003ba6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f001 f8c9 	bl	8004cd8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b80      	cmp	r3, #128	@ 0x80
 8003b4c:	d102      	bne.n	8003b54 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b68:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d010      	beq.n	8003b94 <HAL_DMA_Init+0x61c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d80c      	bhi.n	8003b94 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f001 f946 	bl	8004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	e008      	b.n	8003ba6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	a7fdabf8 	.word	0xa7fdabf8
 8003bc4:	cccccccd 	.word	0xcccccccd
 8003bc8:	40020010 	.word	0x40020010
 8003bcc:	40020028 	.word	0x40020028
 8003bd0:	40020040 	.word	0x40020040
 8003bd4:	40020058 	.word	0x40020058
 8003bd8:	40020070 	.word	0x40020070
 8003bdc:	40020088 	.word	0x40020088
 8003be0:	400200a0 	.word	0x400200a0
 8003be4:	400200b8 	.word	0x400200b8
 8003be8:	40020410 	.word	0x40020410
 8003bec:	40020428 	.word	0x40020428
 8003bf0:	40020440 	.word	0x40020440
 8003bf4:	40020458 	.word	0x40020458
 8003bf8:	40020470 	.word	0x40020470
 8003bfc:	40020488 	.word	0x40020488
 8003c00:	400204a0 	.word	0x400204a0
 8003c04:	400204b8 	.word	0x400204b8
 8003c08:	58025408 	.word	0x58025408
 8003c0c:	5802541c 	.word	0x5802541c
 8003c10:	58025430 	.word	0x58025430
 8003c14:	58025444 	.word	0x58025444
 8003c18:	58025458 	.word	0x58025458
 8003c1c:	5802546c 	.word	0x5802546c
 8003c20:	58025480 	.word	0x58025480
 8003c24:	58025494 	.word	0x58025494

08003c28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	@ 0x28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c34:	4b67      	ldr	r3, [pc, #412]	@ (8003dd4 <HAL_DMA_IRQHandler+0x1ac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a67      	ldr	r2, [pc, #412]	@ (8003dd8 <HAL_DMA_IRQHandler+0x1b0>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	0a9b      	lsrs	r3, r3, #10
 8003c40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a5f      	ldr	r2, [pc, #380]	@ (8003ddc <HAL_DMA_IRQHandler+0x1b4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d04a      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a5d      	ldr	r2, [pc, #372]	@ (8003de0 <HAL_DMA_IRQHandler+0x1b8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d045      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a5c      	ldr	r2, [pc, #368]	@ (8003de4 <HAL_DMA_IRQHandler+0x1bc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d040      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a5a      	ldr	r2, [pc, #360]	@ (8003de8 <HAL_DMA_IRQHandler+0x1c0>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d03b      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a59      	ldr	r2, [pc, #356]	@ (8003dec <HAL_DMA_IRQHandler+0x1c4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d036      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a57      	ldr	r2, [pc, #348]	@ (8003df0 <HAL_DMA_IRQHandler+0x1c8>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d031      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a56      	ldr	r2, [pc, #344]	@ (8003df4 <HAL_DMA_IRQHandler+0x1cc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d02c      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a54      	ldr	r2, [pc, #336]	@ (8003df8 <HAL_DMA_IRQHandler+0x1d0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d027      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a53      	ldr	r2, [pc, #332]	@ (8003dfc <HAL_DMA_IRQHandler+0x1d4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a51      	ldr	r2, [pc, #324]	@ (8003e00 <HAL_DMA_IRQHandler+0x1d8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01d      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a50      	ldr	r2, [pc, #320]	@ (8003e04 <HAL_DMA_IRQHandler+0x1dc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d018      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a4e      	ldr	r2, [pc, #312]	@ (8003e08 <HAL_DMA_IRQHandler+0x1e0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a4d      	ldr	r2, [pc, #308]	@ (8003e0c <HAL_DMA_IRQHandler+0x1e4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a4b      	ldr	r2, [pc, #300]	@ (8003e10 <HAL_DMA_IRQHandler+0x1e8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a4a      	ldr	r2, [pc, #296]	@ (8003e14 <HAL_DMA_IRQHandler+0x1ec>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xd2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a48      	ldr	r2, [pc, #288]	@ (8003e18 <HAL_DMA_IRQHandler+0x1f0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d101      	bne.n	8003cfe <HAL_DMA_IRQHandler+0xd6>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_DMA_IRQHandler+0xd8>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 842b 	beq.w	800455c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2208      	movs	r2, #8
 8003d10:	409a      	lsls	r2, r3
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80a2 	beq.w	8003e60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2e      	ldr	r2, [pc, #184]	@ (8003ddc <HAL_DMA_IRQHandler+0x1b4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d04a      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8003de0 <HAL_DMA_IRQHandler+0x1b8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d045      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a2b      	ldr	r2, [pc, #172]	@ (8003de4 <HAL_DMA_IRQHandler+0x1bc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d040      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8003de8 <HAL_DMA_IRQHandler+0x1c0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d03b      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a28      	ldr	r2, [pc, #160]	@ (8003dec <HAL_DMA_IRQHandler+0x1c4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d036      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a27      	ldr	r2, [pc, #156]	@ (8003df0 <HAL_DMA_IRQHandler+0x1c8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d031      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a25      	ldr	r2, [pc, #148]	@ (8003df4 <HAL_DMA_IRQHandler+0x1cc>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02c      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a24      	ldr	r2, [pc, #144]	@ (8003df8 <HAL_DMA_IRQHandler+0x1d0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d027      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a22      	ldr	r2, [pc, #136]	@ (8003dfc <HAL_DMA_IRQHandler+0x1d4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d022      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a21      	ldr	r2, [pc, #132]	@ (8003e00 <HAL_DMA_IRQHandler+0x1d8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d01d      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1f      	ldr	r2, [pc, #124]	@ (8003e04 <HAL_DMA_IRQHandler+0x1dc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d018      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <HAL_DMA_IRQHandler+0x1e0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1c      	ldr	r2, [pc, #112]	@ (8003e0c <HAL_DMA_IRQHandler+0x1e4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e10 <HAL_DMA_IRQHandler+0x1e8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d009      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a19      	ldr	r2, [pc, #100]	@ (8003e14 <HAL_DMA_IRQHandler+0x1ec>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x194>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a18      	ldr	r2, [pc, #96]	@ (8003e18 <HAL_DMA_IRQHandler+0x1f0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d12f      	bne.n	8003e1c <HAL_DMA_IRQHandler+0x1f4>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	bf14      	ite	ne
 8003dca:	2301      	movne	r3, #1
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	e02e      	b.n	8003e30 <HAL_DMA_IRQHandler+0x208>
 8003dd2:	bf00      	nop
 8003dd4:	24000000 	.word	0x24000000
 8003dd8:	1b4e81b5 	.word	0x1b4e81b5
 8003ddc:	40020010 	.word	0x40020010
 8003de0:	40020028 	.word	0x40020028
 8003de4:	40020040 	.word	0x40020040
 8003de8:	40020058 	.word	0x40020058
 8003dec:	40020070 	.word	0x40020070
 8003df0:	40020088 	.word	0x40020088
 8003df4:	400200a0 	.word	0x400200a0
 8003df8:	400200b8 	.word	0x400200b8
 8003dfc:	40020410 	.word	0x40020410
 8003e00:	40020428 	.word	0x40020428
 8003e04:	40020440 	.word	0x40020440
 8003e08:	40020458 	.word	0x40020458
 8003e0c:	40020470 	.word	0x40020470
 8003e10:	40020488 	.word	0x40020488
 8003e14:	400204a0 	.word	0x400204a0
 8003e18:	400204b8 	.word	0x400204b8
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf14      	ite	ne
 8003e2a:	2301      	movne	r3, #1
 8003e2c:	2300      	moveq	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d015      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0204 	bic.w	r2, r2, #4
 8003e42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e58:	f043 0201 	orr.w	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d06e      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a69      	ldr	r2, [pc, #420]	@ (8004020 <HAL_DMA_IRQHandler+0x3f8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d04a      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a67      	ldr	r2, [pc, #412]	@ (8004024 <HAL_DMA_IRQHandler+0x3fc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d045      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a66      	ldr	r2, [pc, #408]	@ (8004028 <HAL_DMA_IRQHandler+0x400>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d040      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a64      	ldr	r2, [pc, #400]	@ (800402c <HAL_DMA_IRQHandler+0x404>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d03b      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a63      	ldr	r2, [pc, #396]	@ (8004030 <HAL_DMA_IRQHandler+0x408>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d036      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a61      	ldr	r2, [pc, #388]	@ (8004034 <HAL_DMA_IRQHandler+0x40c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d031      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a60      	ldr	r2, [pc, #384]	@ (8004038 <HAL_DMA_IRQHandler+0x410>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d02c      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a5e      	ldr	r2, [pc, #376]	@ (800403c <HAL_DMA_IRQHandler+0x414>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d027      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a5d      	ldr	r2, [pc, #372]	@ (8004040 <HAL_DMA_IRQHandler+0x418>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d022      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a5b      	ldr	r2, [pc, #364]	@ (8004044 <HAL_DMA_IRQHandler+0x41c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01d      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a5a      	ldr	r2, [pc, #360]	@ (8004048 <HAL_DMA_IRQHandler+0x420>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d018      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a58      	ldr	r2, [pc, #352]	@ (800404c <HAL_DMA_IRQHandler+0x424>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a57      	ldr	r2, [pc, #348]	@ (8004050 <HAL_DMA_IRQHandler+0x428>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a55      	ldr	r2, [pc, #340]	@ (8004054 <HAL_DMA_IRQHandler+0x42c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a54      	ldr	r2, [pc, #336]	@ (8004058 <HAL_DMA_IRQHandler+0x430>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <HAL_DMA_IRQHandler+0x2ee>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a52      	ldr	r2, [pc, #328]	@ (800405c <HAL_DMA_IRQHandler+0x434>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10a      	bne.n	8003f2c <HAL_DMA_IRQHandler+0x304>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bf14      	ite	ne
 8003f24:	2301      	movne	r3, #1
 8003f26:	2300      	moveq	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	e003      	b.n	8003f34 <HAL_DMA_IRQHandler+0x30c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2201      	movs	r2, #1
 8003f42:	409a      	lsls	r2, r3
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4c:	f043 0202 	orr.w	r2, r3, #2
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 808f 	beq.w	8004088 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004020 <HAL_DMA_IRQHandler+0x3f8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d04a      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a2a      	ldr	r2, [pc, #168]	@ (8004024 <HAL_DMA_IRQHandler+0x3fc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d045      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a29      	ldr	r2, [pc, #164]	@ (8004028 <HAL_DMA_IRQHandler+0x400>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d040      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a27      	ldr	r2, [pc, #156]	@ (800402c <HAL_DMA_IRQHandler+0x404>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d03b      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a26      	ldr	r2, [pc, #152]	@ (8004030 <HAL_DMA_IRQHandler+0x408>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d036      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a24      	ldr	r2, [pc, #144]	@ (8004034 <HAL_DMA_IRQHandler+0x40c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d031      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a23      	ldr	r2, [pc, #140]	@ (8004038 <HAL_DMA_IRQHandler+0x410>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d02c      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a21      	ldr	r2, [pc, #132]	@ (800403c <HAL_DMA_IRQHandler+0x414>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d027      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a20      	ldr	r2, [pc, #128]	@ (8004040 <HAL_DMA_IRQHandler+0x418>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8004044 <HAL_DMA_IRQHandler+0x41c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01d      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004048 <HAL_DMA_IRQHandler+0x420>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d018      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800404c <HAL_DMA_IRQHandler+0x424>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8004050 <HAL_DMA_IRQHandler+0x428>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d00e      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a18      	ldr	r2, [pc, #96]	@ (8004054 <HAL_DMA_IRQHandler+0x42c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d009      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a17      	ldr	r2, [pc, #92]	@ (8004058 <HAL_DMA_IRQHandler+0x430>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d004      	beq.n	800400a <HAL_DMA_IRQHandler+0x3e2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a15      	ldr	r2, [pc, #84]	@ (800405c <HAL_DMA_IRQHandler+0x434>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d12a      	bne.n	8004060 <HAL_DMA_IRQHandler+0x438>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	e023      	b.n	8004068 <HAL_DMA_IRQHandler+0x440>
 8004020:	40020010 	.word	0x40020010
 8004024:	40020028 	.word	0x40020028
 8004028:	40020040 	.word	0x40020040
 800402c:	40020058 	.word	0x40020058
 8004030:	40020070 	.word	0x40020070
 8004034:	40020088 	.word	0x40020088
 8004038:	400200a0 	.word	0x400200a0
 800403c:	400200b8 	.word	0x400200b8
 8004040:	40020410 	.word	0x40020410
 8004044:	40020428 	.word	0x40020428
 8004048:	40020440 	.word	0x40020440
 800404c:	40020458 	.word	0x40020458
 8004050:	40020470 	.word	0x40020470
 8004054:	40020488 	.word	0x40020488
 8004058:	400204a0 	.word	0x400204a0
 800405c:	400204b8 	.word	0x400204b8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00d      	beq.n	8004088 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2204      	movs	r2, #4
 8004076:	409a      	lsls	r2, r3
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004080:	f043 0204 	orr.w	r2, r3, #4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	2210      	movs	r2, #16
 8004092:	409a      	lsls	r2, r3
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80a6 	beq.w	80041ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a85      	ldr	r2, [pc, #532]	@ (80042b8 <HAL_DMA_IRQHandler+0x690>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d04a      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a83      	ldr	r2, [pc, #524]	@ (80042bc <HAL_DMA_IRQHandler+0x694>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d045      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a82      	ldr	r2, [pc, #520]	@ (80042c0 <HAL_DMA_IRQHandler+0x698>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d040      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a80      	ldr	r2, [pc, #512]	@ (80042c4 <HAL_DMA_IRQHandler+0x69c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d03b      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a7f      	ldr	r2, [pc, #508]	@ (80042c8 <HAL_DMA_IRQHandler+0x6a0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d036      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a7d      	ldr	r2, [pc, #500]	@ (80042cc <HAL_DMA_IRQHandler+0x6a4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d031      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a7c      	ldr	r2, [pc, #496]	@ (80042d0 <HAL_DMA_IRQHandler+0x6a8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d02c      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a7a      	ldr	r2, [pc, #488]	@ (80042d4 <HAL_DMA_IRQHandler+0x6ac>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d027      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a79      	ldr	r2, [pc, #484]	@ (80042d8 <HAL_DMA_IRQHandler+0x6b0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d022      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a77      	ldr	r2, [pc, #476]	@ (80042dc <HAL_DMA_IRQHandler+0x6b4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d01d      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a76      	ldr	r2, [pc, #472]	@ (80042e0 <HAL_DMA_IRQHandler+0x6b8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d018      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a74      	ldr	r2, [pc, #464]	@ (80042e4 <HAL_DMA_IRQHandler+0x6bc>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d013      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a73      	ldr	r2, [pc, #460]	@ (80042e8 <HAL_DMA_IRQHandler+0x6c0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00e      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a71      	ldr	r2, [pc, #452]	@ (80042ec <HAL_DMA_IRQHandler+0x6c4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d009      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a70      	ldr	r2, [pc, #448]	@ (80042f0 <HAL_DMA_IRQHandler+0x6c8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d004      	beq.n	800413e <HAL_DMA_IRQHandler+0x516>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a6e      	ldr	r2, [pc, #440]	@ (80042f4 <HAL_DMA_IRQHandler+0x6cc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d10a      	bne.n	8004154 <HAL_DMA_IRQHandler+0x52c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf14      	ite	ne
 800414c:	2301      	movne	r3, #1
 800414e:	2300      	moveq	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	e009      	b.n	8004168 <HAL_DMA_IRQHandler+0x540>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	bf14      	ite	ne
 8004162:	2301      	movne	r3, #1
 8004164:	2300      	moveq	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d03e      	beq.n	80041ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	2210      	movs	r2, #16
 8004176:	409a      	lsls	r2, r3
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d018      	beq.n	80041bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d108      	bne.n	80041aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d024      	beq.n	80041ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
 80041a8:	e01f      	b.n	80041ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01b      	beq.n	80041ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	4798      	blx	r3
 80041ba:	e016      	b.n	80041ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0208 	bic.w	r2, r2, #8
 80041d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	2220      	movs	r2, #32
 80041f4:	409a      	lsls	r2, r3
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8110 	beq.w	8004420 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2c      	ldr	r2, [pc, #176]	@ (80042b8 <HAL_DMA_IRQHandler+0x690>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d04a      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2b      	ldr	r2, [pc, #172]	@ (80042bc <HAL_DMA_IRQHandler+0x694>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d045      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a29      	ldr	r2, [pc, #164]	@ (80042c0 <HAL_DMA_IRQHandler+0x698>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d040      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a28      	ldr	r2, [pc, #160]	@ (80042c4 <HAL_DMA_IRQHandler+0x69c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d03b      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a26      	ldr	r2, [pc, #152]	@ (80042c8 <HAL_DMA_IRQHandler+0x6a0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d036      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a25      	ldr	r2, [pc, #148]	@ (80042cc <HAL_DMA_IRQHandler+0x6a4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d031      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a23      	ldr	r2, [pc, #140]	@ (80042d0 <HAL_DMA_IRQHandler+0x6a8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02c      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a22      	ldr	r2, [pc, #136]	@ (80042d4 <HAL_DMA_IRQHandler+0x6ac>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d027      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a20      	ldr	r2, [pc, #128]	@ (80042d8 <HAL_DMA_IRQHandler+0x6b0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d022      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1f      	ldr	r2, [pc, #124]	@ (80042dc <HAL_DMA_IRQHandler+0x6b4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d01d      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1d      	ldr	r2, [pc, #116]	@ (80042e0 <HAL_DMA_IRQHandler+0x6b8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d018      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1c      	ldr	r2, [pc, #112]	@ (80042e4 <HAL_DMA_IRQHandler+0x6bc>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1a      	ldr	r2, [pc, #104]	@ (80042e8 <HAL_DMA_IRQHandler+0x6c0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00e      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a19      	ldr	r2, [pc, #100]	@ (80042ec <HAL_DMA_IRQHandler+0x6c4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d009      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a17      	ldr	r2, [pc, #92]	@ (80042f0 <HAL_DMA_IRQHandler+0x6c8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x678>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a16      	ldr	r2, [pc, #88]	@ (80042f4 <HAL_DMA_IRQHandler+0x6cc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d12b      	bne.n	80042f8 <HAL_DMA_IRQHandler+0x6d0>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf14      	ite	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	2300      	moveq	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	e02a      	b.n	800430c <HAL_DMA_IRQHandler+0x6e4>
 80042b6:	bf00      	nop
 80042b8:	40020010 	.word	0x40020010
 80042bc:	40020028 	.word	0x40020028
 80042c0:	40020040 	.word	0x40020040
 80042c4:	40020058 	.word	0x40020058
 80042c8:	40020070 	.word	0x40020070
 80042cc:	40020088 	.word	0x40020088
 80042d0:	400200a0 	.word	0x400200a0
 80042d4:	400200b8 	.word	0x400200b8
 80042d8:	40020410 	.word	0x40020410
 80042dc:	40020428 	.word	0x40020428
 80042e0:	40020440 	.word	0x40020440
 80042e4:	40020458 	.word	0x40020458
 80042e8:	40020470 	.word	0x40020470
 80042ec:	40020488 	.word	0x40020488
 80042f0:	400204a0 	.word	0x400204a0
 80042f4:	400204b8 	.word	0x400204b8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf14      	ite	ne
 8004306:	2301      	movne	r3, #1
 8004308:	2300      	moveq	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8087 	beq.w	8004420 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2220      	movs	r2, #32
 800431c:	409a      	lsls	r2, r3
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b04      	cmp	r3, #4
 800432c:	d139      	bne.n	80043a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0216 	bic.w	r2, r2, #22
 800433c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800434c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d103      	bne.n	800435e <HAL_DMA_IRQHandler+0x736>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0208 	bic.w	r2, r2, #8
 800436c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	223f      	movs	r2, #63	@ 0x3f
 8004378:	409a      	lsls	r2, r3
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 834a 	beq.w	8004a2c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	4798      	blx	r3
          }
          return;
 80043a0:	e344      	b.n	8004a2c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d018      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d108      	bne.n	80043d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d02c      	beq.n	8004420 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	4798      	blx	r3
 80043ce:	e027      	b.n	8004420 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d023      	beq.n	8004420 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
 80043e0:	e01e      	b.n	8004420 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10f      	bne.n	8004410 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0210 	bic.w	r2, r2, #16
 80043fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8306 	beq.w	8004a36 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8088 	beq.w	8004548 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2204      	movs	r2, #4
 800443c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a7a      	ldr	r2, [pc, #488]	@ (8004630 <HAL_DMA_IRQHandler+0xa08>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d04a      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a79      	ldr	r2, [pc, #484]	@ (8004634 <HAL_DMA_IRQHandler+0xa0c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d045      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a77      	ldr	r2, [pc, #476]	@ (8004638 <HAL_DMA_IRQHandler+0xa10>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d040      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a76      	ldr	r2, [pc, #472]	@ (800463c <HAL_DMA_IRQHandler+0xa14>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d03b      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a74      	ldr	r2, [pc, #464]	@ (8004640 <HAL_DMA_IRQHandler+0xa18>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d036      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a73      	ldr	r2, [pc, #460]	@ (8004644 <HAL_DMA_IRQHandler+0xa1c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d031      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a71      	ldr	r2, [pc, #452]	@ (8004648 <HAL_DMA_IRQHandler+0xa20>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d02c      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a70      	ldr	r2, [pc, #448]	@ (800464c <HAL_DMA_IRQHandler+0xa24>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d027      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a6e      	ldr	r2, [pc, #440]	@ (8004650 <HAL_DMA_IRQHandler+0xa28>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d022      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a6d      	ldr	r2, [pc, #436]	@ (8004654 <HAL_DMA_IRQHandler+0xa2c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d01d      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004658 <HAL_DMA_IRQHandler+0xa30>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d018      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a6a      	ldr	r2, [pc, #424]	@ (800465c <HAL_DMA_IRQHandler+0xa34>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a68      	ldr	r2, [pc, #416]	@ (8004660 <HAL_DMA_IRQHandler+0xa38>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00e      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a67      	ldr	r2, [pc, #412]	@ (8004664 <HAL_DMA_IRQHandler+0xa3c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a65      	ldr	r2, [pc, #404]	@ (8004668 <HAL_DMA_IRQHandler+0xa40>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x8b8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a64      	ldr	r2, [pc, #400]	@ (800466c <HAL_DMA_IRQHandler+0xa44>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d108      	bne.n	80044f2 <HAL_DMA_IRQHandler+0x8ca>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e007      	b.n	8004502 <HAL_DMA_IRQHandler+0x8da>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0201 	bic.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3301      	adds	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800450a:	429a      	cmp	r2, r3
 800450c:	d307      	bcc.n	800451e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f2      	bne.n	8004502 <HAL_DMA_IRQHandler+0x8da>
 800451c:	e000      	b.n	8004520 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800451e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d004      	beq.n	8004538 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2203      	movs	r2, #3
 8004532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004536:	e003      	b.n	8004540 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8272 	beq.w	8004a36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
 800455a:	e26c      	b.n	8004a36 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a43      	ldr	r2, [pc, #268]	@ (8004670 <HAL_DMA_IRQHandler+0xa48>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d022      	beq.n	80045ac <HAL_DMA_IRQHandler+0x984>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a42      	ldr	r2, [pc, #264]	@ (8004674 <HAL_DMA_IRQHandler+0xa4c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d01d      	beq.n	80045ac <HAL_DMA_IRQHandler+0x984>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a40      	ldr	r2, [pc, #256]	@ (8004678 <HAL_DMA_IRQHandler+0xa50>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d018      	beq.n	80045ac <HAL_DMA_IRQHandler+0x984>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a3f      	ldr	r2, [pc, #252]	@ (800467c <HAL_DMA_IRQHandler+0xa54>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d013      	beq.n	80045ac <HAL_DMA_IRQHandler+0x984>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a3d      	ldr	r2, [pc, #244]	@ (8004680 <HAL_DMA_IRQHandler+0xa58>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00e      	beq.n	80045ac <HAL_DMA_IRQHandler+0x984>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a3c      	ldr	r2, [pc, #240]	@ (8004684 <HAL_DMA_IRQHandler+0xa5c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d009      	beq.n	80045ac <HAL_DMA_IRQHandler+0x984>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a3a      	ldr	r2, [pc, #232]	@ (8004688 <HAL_DMA_IRQHandler+0xa60>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d004      	beq.n	80045ac <HAL_DMA_IRQHandler+0x984>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a39      	ldr	r2, [pc, #228]	@ (800468c <HAL_DMA_IRQHandler+0xa64>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d101      	bne.n	80045b0 <HAL_DMA_IRQHandler+0x988>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <HAL_DMA_IRQHandler+0x98a>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 823f 	beq.w	8004a36 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2204      	movs	r2, #4
 80045ca:	409a      	lsls	r2, r3
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80cd 	beq.w	8004770 <HAL_DMA_IRQHandler+0xb48>
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80c7 	beq.w	8004770 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2204      	movs	r2, #4
 80045ec:	409a      	lsls	r2, r3
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d049      	beq.n	8004690 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8210 	beq.w	8004a30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004618:	e20a      	b.n	8004a30 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8206 	beq.w	8004a30 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800462c:	e200      	b.n	8004a30 <HAL_DMA_IRQHandler+0xe08>
 800462e:	bf00      	nop
 8004630:	40020010 	.word	0x40020010
 8004634:	40020028 	.word	0x40020028
 8004638:	40020040 	.word	0x40020040
 800463c:	40020058 	.word	0x40020058
 8004640:	40020070 	.word	0x40020070
 8004644:	40020088 	.word	0x40020088
 8004648:	400200a0 	.word	0x400200a0
 800464c:	400200b8 	.word	0x400200b8
 8004650:	40020410 	.word	0x40020410
 8004654:	40020428 	.word	0x40020428
 8004658:	40020440 	.word	0x40020440
 800465c:	40020458 	.word	0x40020458
 8004660:	40020470 	.word	0x40020470
 8004664:	40020488 	.word	0x40020488
 8004668:	400204a0 	.word	0x400204a0
 800466c:	400204b8 	.word	0x400204b8
 8004670:	58025408 	.word	0x58025408
 8004674:	5802541c 	.word	0x5802541c
 8004678:	58025430 	.word	0x58025430
 800467c:	58025444 	.word	0x58025444
 8004680:	58025458 	.word	0x58025458
 8004684:	5802546c 	.word	0x5802546c
 8004688:	58025480 	.word	0x58025480
 800468c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d160      	bne.n	800475c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a7f      	ldr	r2, [pc, #508]	@ (800489c <HAL_DMA_IRQHandler+0xc74>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d04a      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a7d      	ldr	r2, [pc, #500]	@ (80048a0 <HAL_DMA_IRQHandler+0xc78>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d045      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a7c      	ldr	r2, [pc, #496]	@ (80048a4 <HAL_DMA_IRQHandler+0xc7c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d040      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a7a      	ldr	r2, [pc, #488]	@ (80048a8 <HAL_DMA_IRQHandler+0xc80>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d03b      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a79      	ldr	r2, [pc, #484]	@ (80048ac <HAL_DMA_IRQHandler+0xc84>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d036      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a77      	ldr	r2, [pc, #476]	@ (80048b0 <HAL_DMA_IRQHandler+0xc88>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d031      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a76      	ldr	r2, [pc, #472]	@ (80048b4 <HAL_DMA_IRQHandler+0xc8c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d02c      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a74      	ldr	r2, [pc, #464]	@ (80048b8 <HAL_DMA_IRQHandler+0xc90>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d027      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a73      	ldr	r2, [pc, #460]	@ (80048bc <HAL_DMA_IRQHandler+0xc94>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d022      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a71      	ldr	r2, [pc, #452]	@ (80048c0 <HAL_DMA_IRQHandler+0xc98>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01d      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a70      	ldr	r2, [pc, #448]	@ (80048c4 <HAL_DMA_IRQHandler+0xc9c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d018      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a6e      	ldr	r2, [pc, #440]	@ (80048c8 <HAL_DMA_IRQHandler+0xca0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a6d      	ldr	r2, [pc, #436]	@ (80048cc <HAL_DMA_IRQHandler+0xca4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a6b      	ldr	r2, [pc, #428]	@ (80048d0 <HAL_DMA_IRQHandler+0xca8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a6a      	ldr	r2, [pc, #424]	@ (80048d4 <HAL_DMA_IRQHandler+0xcac>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_DMA_IRQHandler+0xb12>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a68      	ldr	r2, [pc, #416]	@ (80048d8 <HAL_DMA_IRQHandler+0xcb0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d108      	bne.n	800474c <HAL_DMA_IRQHandler+0xb24>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0208 	bic.w	r2, r2, #8
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e007      	b.n	800475c <HAL_DMA_IRQHandler+0xb34>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0204 	bic.w	r2, r2, #4
 800475a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8165 	beq.w	8004a30 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800476e:	e15f      	b.n	8004a30 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	2202      	movs	r2, #2
 800477a:	409a      	lsls	r2, r3
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80c5 	beq.w	8004910 <HAL_DMA_IRQHandler+0xce8>
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80bf 	beq.w	8004910 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	2202      	movs	r2, #2
 800479c:	409a      	lsls	r2, r3
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d018      	beq.n	80047de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 813a 	beq.w	8004a34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c8:	e134      	b.n	8004a34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8130 	beq.w	8004a34 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047dc:	e12a      	b.n	8004a34 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f040 8089 	bne.w	80048fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a2b      	ldr	r2, [pc, #172]	@ (800489c <HAL_DMA_IRQHandler+0xc74>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d04a      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a29      	ldr	r2, [pc, #164]	@ (80048a0 <HAL_DMA_IRQHandler+0xc78>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d045      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a28      	ldr	r2, [pc, #160]	@ (80048a4 <HAL_DMA_IRQHandler+0xc7c>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d040      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a26      	ldr	r2, [pc, #152]	@ (80048a8 <HAL_DMA_IRQHandler+0xc80>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d03b      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <HAL_DMA_IRQHandler+0xc84>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d036      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a23      	ldr	r2, [pc, #140]	@ (80048b0 <HAL_DMA_IRQHandler+0xc88>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d031      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a22      	ldr	r2, [pc, #136]	@ (80048b4 <HAL_DMA_IRQHandler+0xc8c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d02c      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a20      	ldr	r2, [pc, #128]	@ (80048b8 <HAL_DMA_IRQHandler+0xc90>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d027      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <HAL_DMA_IRQHandler+0xc94>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d022      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1d      	ldr	r2, [pc, #116]	@ (80048c0 <HAL_DMA_IRQHandler+0xc98>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01d      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1c      	ldr	r2, [pc, #112]	@ (80048c4 <HAL_DMA_IRQHandler+0xc9c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d018      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1a      	ldr	r2, [pc, #104]	@ (80048c8 <HAL_DMA_IRQHandler+0xca0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a19      	ldr	r2, [pc, #100]	@ (80048cc <HAL_DMA_IRQHandler+0xca4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a17      	ldr	r2, [pc, #92]	@ (80048d0 <HAL_DMA_IRQHandler+0xca8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d009      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a16      	ldr	r2, [pc, #88]	@ (80048d4 <HAL_DMA_IRQHandler+0xcac>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_DMA_IRQHandler+0xc62>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a14      	ldr	r2, [pc, #80]	@ (80048d8 <HAL_DMA_IRQHandler+0xcb0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d128      	bne.n	80048dc <HAL_DMA_IRQHandler+0xcb4>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0214 	bic.w	r2, r2, #20
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	e027      	b.n	80048ec <HAL_DMA_IRQHandler+0xcc4>
 800489c:	40020010 	.word	0x40020010
 80048a0:	40020028 	.word	0x40020028
 80048a4:	40020040 	.word	0x40020040
 80048a8:	40020058 	.word	0x40020058
 80048ac:	40020070 	.word	0x40020070
 80048b0:	40020088 	.word	0x40020088
 80048b4:	400200a0 	.word	0x400200a0
 80048b8:	400200b8 	.word	0x400200b8
 80048bc:	40020410 	.word	0x40020410
 80048c0:	40020428 	.word	0x40020428
 80048c4:	40020440 	.word	0x40020440
 80048c8:	40020458 	.word	0x40020458
 80048cc:	40020470 	.word	0x40020470
 80048d0:	40020488 	.word	0x40020488
 80048d4:	400204a0 	.word	0x400204a0
 80048d8:	400204b8 	.word	0x400204b8
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 020a 	bic.w	r2, r2, #10
 80048ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8097 	beq.w	8004a34 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800490e:	e091      	b.n	8004a34 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2208      	movs	r2, #8
 800491a:	409a      	lsls	r2, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8088 	beq.w	8004a36 <HAL_DMA_IRQHandler+0xe0e>
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8082 	beq.w	8004a36 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a41      	ldr	r2, [pc, #260]	@ (8004a3c <HAL_DMA_IRQHandler+0xe14>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d04a      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a3f      	ldr	r2, [pc, #252]	@ (8004a40 <HAL_DMA_IRQHandler+0xe18>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d045      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3e      	ldr	r2, [pc, #248]	@ (8004a44 <HAL_DMA_IRQHandler+0xe1c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d040      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3c      	ldr	r2, [pc, #240]	@ (8004a48 <HAL_DMA_IRQHandler+0xe20>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d03b      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a4c <HAL_DMA_IRQHandler+0xe24>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d036      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a39      	ldr	r2, [pc, #228]	@ (8004a50 <HAL_DMA_IRQHandler+0xe28>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d031      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a38      	ldr	r2, [pc, #224]	@ (8004a54 <HAL_DMA_IRQHandler+0xe2c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d02c      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a36      	ldr	r2, [pc, #216]	@ (8004a58 <HAL_DMA_IRQHandler+0xe30>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d027      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a35      	ldr	r2, [pc, #212]	@ (8004a5c <HAL_DMA_IRQHandler+0xe34>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d022      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a33      	ldr	r2, [pc, #204]	@ (8004a60 <HAL_DMA_IRQHandler+0xe38>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01d      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a32      	ldr	r2, [pc, #200]	@ (8004a64 <HAL_DMA_IRQHandler+0xe3c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d018      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a30      	ldr	r2, [pc, #192]	@ (8004a68 <HAL_DMA_IRQHandler+0xe40>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a2f      	ldr	r2, [pc, #188]	@ (8004a6c <HAL_DMA_IRQHandler+0xe44>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00e      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004a70 <HAL_DMA_IRQHandler+0xe48>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d009      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a74 <HAL_DMA_IRQHandler+0xe4c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_DMA_IRQHandler+0xdaa>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004a78 <HAL_DMA_IRQHandler+0xe50>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d108      	bne.n	80049e4 <HAL_DMA_IRQHandler+0xdbc>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 021c 	bic.w	r2, r2, #28
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e007      	b.n	80049f4 <HAL_DMA_IRQHandler+0xdcc>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 020e 	bic.w	r2, r2, #14
 80049f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	2201      	movs	r2, #1
 80049fe:	409a      	lsls	r2, r3
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
 8004a2a:	e004      	b.n	8004a36 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a2c:	bf00      	nop
 8004a2e:	e002      	b.n	8004a36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a30:	bf00      	nop
 8004a32:	e000      	b.n	8004a36 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a34:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a36:	3728      	adds	r7, #40	@ 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40020010 	.word	0x40020010
 8004a40:	40020028 	.word	0x40020028
 8004a44:	40020040 	.word	0x40020040
 8004a48:	40020058 	.word	0x40020058
 8004a4c:	40020070 	.word	0x40020070
 8004a50:	40020088 	.word	0x40020088
 8004a54:	400200a0 	.word	0x400200a0
 8004a58:	400200b8 	.word	0x400200b8
 8004a5c:	40020410 	.word	0x40020410
 8004a60:	40020428 	.word	0x40020428
 8004a64:	40020440 	.word	0x40020440
 8004a68:	40020458 	.word	0x40020458
 8004a6c:	40020470 	.word	0x40020470
 8004a70:	40020488 	.word	0x40020488
 8004a74:	400204a0 	.word	0x400204a0
 8004a78:	400204b8 	.word	0x400204b8

08004a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a42      	ldr	r2, [pc, #264]	@ (8004b94 <DMA_CalcBaseAndBitshift+0x118>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d04a      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a41      	ldr	r2, [pc, #260]	@ (8004b98 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d045      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b9c <DMA_CalcBaseAndBitshift+0x120>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d040      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ba0 <DMA_CalcBaseAndBitshift+0x124>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d03b      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba4 <DMA_CalcBaseAndBitshift+0x128>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d036      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3b      	ldr	r2, [pc, #236]	@ (8004ba8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d031      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a39      	ldr	r2, [pc, #228]	@ (8004bac <DMA_CalcBaseAndBitshift+0x130>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d02c      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a38      	ldr	r2, [pc, #224]	@ (8004bb0 <DMA_CalcBaseAndBitshift+0x134>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d027      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a36      	ldr	r2, [pc, #216]	@ (8004bb4 <DMA_CalcBaseAndBitshift+0x138>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a35      	ldr	r2, [pc, #212]	@ (8004bb8 <DMA_CalcBaseAndBitshift+0x13c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d01d      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a33      	ldr	r2, [pc, #204]	@ (8004bbc <DMA_CalcBaseAndBitshift+0x140>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a32      	ldr	r2, [pc, #200]	@ (8004bc0 <DMA_CalcBaseAndBitshift+0x144>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a30      	ldr	r2, [pc, #192]	@ (8004bc4 <DMA_CalcBaseAndBitshift+0x148>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc8 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a2d      	ldr	r2, [pc, #180]	@ (8004bcc <DMA_CalcBaseAndBitshift+0x150>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <DMA_CalcBaseAndBitshift+0xa8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd0 <DMA_CalcBaseAndBitshift+0x154>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d101      	bne.n	8004b28 <DMA_CalcBaseAndBitshift+0xac>
 8004b24:	2301      	movs	r3, #1
 8004b26:	e000      	b.n	8004b2a <DMA_CalcBaseAndBitshift+0xae>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d024      	beq.n	8004b78 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	3b10      	subs	r3, #16
 8004b36:	4a27      	ldr	r2, [pc, #156]	@ (8004bd4 <DMA_CalcBaseAndBitshift+0x158>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	4a24      	ldr	r2, [pc, #144]	@ (8004bd8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004b48:	5cd3      	ldrb	r3, [r2, r3]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d908      	bls.n	8004b68 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004bdc <DMA_CalcBaseAndBitshift+0x160>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	1d1a      	adds	r2, r3, #4
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b66:	e00d      	b.n	8004b84 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bdc <DMA_CalcBaseAndBitshift+0x160>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b76:	e005      	b.n	8004b84 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40020010 	.word	0x40020010
 8004b98:	40020028 	.word	0x40020028
 8004b9c:	40020040 	.word	0x40020040
 8004ba0:	40020058 	.word	0x40020058
 8004ba4:	40020070 	.word	0x40020070
 8004ba8:	40020088 	.word	0x40020088
 8004bac:	400200a0 	.word	0x400200a0
 8004bb0:	400200b8 	.word	0x400200b8
 8004bb4:	40020410 	.word	0x40020410
 8004bb8:	40020428 	.word	0x40020428
 8004bbc:	40020440 	.word	0x40020440
 8004bc0:	40020458 	.word	0x40020458
 8004bc4:	40020470 	.word	0x40020470
 8004bc8:	40020488 	.word	0x40020488
 8004bcc:	400204a0 	.word	0x400204a0
 8004bd0:	400204b8 	.word	0x400204b8
 8004bd4:	aaaaaaab 	.word	0xaaaaaaab
 8004bd8:	0800bbe4 	.word	0x0800bbe4
 8004bdc:	fffffc00 	.word	0xfffffc00

08004be0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d120      	bne.n	8004c36 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d858      	bhi.n	8004cae <DMA_CheckFifoParam+0xce>
 8004bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004c04 <DMA_CheckFifoParam+0x24>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c15 	.word	0x08004c15
 8004c08:	08004c27 	.word	0x08004c27
 8004c0c:	08004c15 	.word	0x08004c15
 8004c10:	08004caf 	.word	0x08004caf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d048      	beq.n	8004cb2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c24:	e045      	b.n	8004cb2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c2e:	d142      	bne.n	8004cb6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c34:	e03f      	b.n	8004cb6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3e:	d123      	bne.n	8004c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d838      	bhi.n	8004cba <DMA_CheckFifoParam+0xda>
 8004c48:	a201      	add	r2, pc, #4	@ (adr r2, 8004c50 <DMA_CheckFifoParam+0x70>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c61 	.word	0x08004c61
 8004c54:	08004c67 	.word	0x08004c67
 8004c58:	08004c61 	.word	0x08004c61
 8004c5c:	08004c79 	.word	0x08004c79
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
        break;
 8004c64:	e030      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d025      	beq.n	8004cbe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c76:	e022      	b.n	8004cbe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c80:	d11f      	bne.n	8004cc2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c86:	e01c      	b.n	8004cc2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d902      	bls.n	8004c96 <DMA_CheckFifoParam+0xb6>
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d003      	beq.n	8004c9c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c94:	e018      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
        break;
 8004c9a:	e015      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00e      	beq.n	8004cc6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
    break;
 8004cac:	e00b      	b.n	8004cc6 <DMA_CheckFifoParam+0xe6>
        break;
 8004cae:	bf00      	nop
 8004cb0:	e00a      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cb2:	bf00      	nop
 8004cb4:	e008      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cb6:	bf00      	nop
 8004cb8:	e006      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cba:	bf00      	nop
 8004cbc:	e004      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cbe:	bf00      	nop
 8004cc0:	e002      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
        break;
 8004cc2:	bf00      	nop
 8004cc4:	e000      	b.n	8004cc8 <DMA_CheckFifoParam+0xe8>
    break;
 8004cc6:	bf00      	nop
    }
  }

  return status;
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop

08004cd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a38      	ldr	r2, [pc, #224]	@ (8004dcc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d022      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a36      	ldr	r2, [pc, #216]	@ (8004dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01d      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a35      	ldr	r2, [pc, #212]	@ (8004dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d018      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a33      	ldr	r2, [pc, #204]	@ (8004dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a32      	ldr	r2, [pc, #200]	@ (8004ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a30      	ldr	r2, [pc, #192]	@ (8004de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a2f      	ldr	r2, [pc, #188]	@ (8004de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2d      	ldr	r2, [pc, #180]	@ (8004de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d101      	bne.n	8004d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01a      	beq.n	8004d76 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	3b08      	subs	r3, #8
 8004d48:	4a28      	ldr	r2, [pc, #160]	@ (8004dec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4b26      	ldr	r3, [pc, #152]	@ (8004df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a24      	ldr	r2, [pc, #144]	@ (8004df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004d64:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004d74:	e024      	b.n	8004dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	3b10      	subs	r3, #16
 8004d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d806      	bhi.n	8004d9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a1b      	ldr	r2, [pc, #108]	@ (8004e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d902      	bls.n	8004d9e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4b18      	ldr	r3, [pc, #96]	@ (8004e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	461a      	mov	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a16      	ldr	r2, [pc, #88]	@ (8004e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004db0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	2201      	movs	r2, #1
 8004dba:	409a      	lsls	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004dc0:	bf00      	nop
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	58025408 	.word	0x58025408
 8004dd0:	5802541c 	.word	0x5802541c
 8004dd4:	58025430 	.word	0x58025430
 8004dd8:	58025444 	.word	0x58025444
 8004ddc:	58025458 	.word	0x58025458
 8004de0:	5802546c 	.word	0x5802546c
 8004de4:	58025480 	.word	0x58025480
 8004de8:	58025494 	.word	0x58025494
 8004dec:	cccccccd 	.word	0xcccccccd
 8004df0:	16009600 	.word	0x16009600
 8004df4:	58025880 	.word	0x58025880
 8004df8:	aaaaaaab 	.word	0xaaaaaaab
 8004dfc:	400204b8 	.word	0x400204b8
 8004e00:	4002040f 	.word	0x4002040f
 8004e04:	10008200 	.word	0x10008200
 8004e08:	40020880 	.word	0x40020880

08004e0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d04a      	beq.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d847      	bhi.n	8004eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a25      	ldr	r2, [pc, #148]	@ (8004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d022      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a24      	ldr	r2, [pc, #144]	@ (8004ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d01d      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a22      	ldr	r2, [pc, #136]	@ (8004ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d018      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	@ (8004ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d013      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00e      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d009      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1c      	ldr	r2, [pc, #112]	@ (8004edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d101      	bne.n	8004e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4b17      	ldr	r3, [pc, #92]	@ (8004ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a15      	ldr	r2, [pc, #84]	@ (8004ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e94:	671a      	str	r2, [r3, #112]	@ 0x70
 8004e96:	e009      	b.n	8004eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4b14      	ldr	r3, [pc, #80]	@ (8004eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a11      	ldr	r2, [pc, #68]	@ (8004ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004eaa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	58025408 	.word	0x58025408
 8004ec8:	5802541c 	.word	0x5802541c
 8004ecc:	58025430 	.word	0x58025430
 8004ed0:	58025444 	.word	0x58025444
 8004ed4:	58025458 	.word	0x58025458
 8004ed8:	5802546c 	.word	0x5802546c
 8004edc:	58025480 	.word	0x58025480
 8004ee0:	58025494 	.word	0x58025494
 8004ee4:	1600963f 	.word	0x1600963f
 8004ee8:	58025940 	.word	0x58025940
 8004eec:	1000823f 	.word	0x1000823f
 8004ef0:	40020940 	.word	0x40020940

08004ef4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b098      	sub	sp, #96	@ 0x60
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004efc:	4a84      	ldr	r2, [pc, #528]	@ (8005110 <HAL_FDCAN_Init+0x21c>)
 8004efe:	f107 030c 	add.w	r3, r7, #12
 8004f02:	4611      	mov	r1, r2
 8004f04:	224c      	movs	r2, #76	@ 0x4c
 8004f06:	4618      	mov	r0, r3
 8004f08:	f006 fd66 	bl	800b9d8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e1c6      	b.n	80052a4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8005114 <HAL_FDCAN_Init+0x220>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d106      	bne.n	8004f2e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004f28:	461a      	mov	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fc f8a8 	bl	8001098 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0210 	bic.w	r2, r2, #16
 8004f56:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f58:	f7fc fbb6 	bl	80016c8 <HAL_GetTick>
 8004f5c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f5e:	e014      	b.n	8004f8a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004f60:	f7fc fbb2 	bl	80016c8 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b0a      	cmp	r3, #10
 8004f6c:	d90d      	bls.n	8004f8a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f74:	f043 0201 	orr.w	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2203      	movs	r2, #3
 8004f82:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e18c      	b.n	80052a4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d0e3      	beq.n	8004f60 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fa8:	f7fc fb8e 	bl	80016c8 <HAL_GetTick>
 8004fac:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004fae:	e014      	b.n	8004fda <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004fb0:	f7fc fb8a 	bl	80016c8 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b0a      	cmp	r3, #10
 8004fbc:	d90d      	bls.n	8004fda <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fc4:	f043 0201 	orr.w	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e164      	b.n	80052a4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0e3      	beq.n	8004fb0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0202 	orr.w	r2, r2, #2
 8004ff6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	7c1b      	ldrb	r3, [r3, #16]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d108      	bne.n	8005012 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800500e:	619a      	str	r2, [r3, #24]
 8005010:	e007      	b.n	8005022 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699a      	ldr	r2, [r3, #24]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005020:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	7c5b      	ldrb	r3, [r3, #17]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d108      	bne.n	800503c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699a      	ldr	r2, [r3, #24]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005038:	619a      	str	r2, [r3, #24]
 800503a:	e007      	b.n	800504c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800504a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	7c9b      	ldrb	r3, [r3, #18]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d108      	bne.n	8005066 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005062:	619a      	str	r2, [r3, #24]
 8005064:	e007      	b.n	8005076 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699a      	ldr	r2, [r3, #24]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005074:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800509a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0210 	bic.w	r2, r2, #16
 80050aa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d108      	bne.n	80050c6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699a      	ldr	r2, [r3, #24]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0204 	orr.w	r2, r2, #4
 80050c2:	619a      	str	r2, [r3, #24]
 80050c4:	e030      	b.n	8005128 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d02c      	beq.n	8005128 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d020      	beq.n	8005118 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699a      	ldr	r2, [r3, #24]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80050e4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0210 	orr.w	r2, r2, #16
 80050f4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d114      	bne.n	8005128 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699a      	ldr	r2, [r3, #24]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0220 	orr.w	r2, r2, #32
 800510c:	619a      	str	r2, [r3, #24]
 800510e:	e00b      	b.n	8005128 <HAL_FDCAN_Init+0x234>
 8005110:	0800bb88 	.word	0x0800bb88
 8005114:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0220 	orr.w	r2, r2, #32
 8005126:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	3b01      	subs	r3, #1
 800512e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	3b01      	subs	r3, #1
 8005136:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005138:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005140:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	3b01      	subs	r3, #1
 800514a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005150:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005152:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800515c:	d115      	bne.n	800518a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005162:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005168:	3b01      	subs	r3, #1
 800516a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800516c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005172:	3b01      	subs	r3, #1
 8005174:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005176:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	3b01      	subs	r3, #1
 8005180:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005186:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005188:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b0:	4413      	add	r3, r2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d011      	beq.n	80051da <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80051be:	f023 0107 	bic.w	r1, r3, #7
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	3360      	adds	r3, #96	@ 0x60
 80051ca:	443b      	add	r3, r7
 80051cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d011      	beq.n	8005206 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80051ea:	f023 0107 	bic.w	r1, r3, #7
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	3360      	adds	r3, #96	@ 0x60
 80051f6:	443b      	add	r3, r7
 80051f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800520a:	2b00      	cmp	r3, #0
 800520c:	d012      	beq.n	8005234 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005216:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	3360      	adds	r3, #96	@ 0x60
 8005222:	443b      	add	r3, r7
 8005224:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005228:	011a      	lsls	r2, r3, #4
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005238:	2b00      	cmp	r3, #0
 800523a:	d012      	beq.n	8005262 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005244:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	3360      	adds	r3, #96	@ 0x60
 8005250:	443b      	add	r3, r7
 8005252:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005256:	021a      	lsls	r2, r3, #8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a11      	ldr	r2, [pc, #68]	@ (80052ac <HAL_FDCAN_Init+0x3b8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d107      	bne.n	800527c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f022 0203 	bic.w	r2, r2, #3
 800527a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f93d 	bl	8005514 <FDCAN_CalcultateRamBlockAddresses>
 800529a:	4603      	mov	r3, r0
 800529c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80052a0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3760      	adds	r7, #96	@ 0x60
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	4000a000 	.word	0x4000a000

080052b0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80052c0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d002      	beq.n	80052ce <HAL_FDCAN_ConfigFilter+0x1e>
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d157      	bne.n	800537e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d12b      	bne.n	800532e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b07      	cmp	r3, #7
 80052dc:	d10d      	bne.n	80052fa <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80052ea:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80052f0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80052f2:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	e00e      	b.n	8005318 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005306:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800530e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	e025      	b.n	800537a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	075a      	lsls	r2, r3, #29
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	2b07      	cmp	r3, #7
 8005342:	d103      	bne.n	800534c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	e006      	b.n	800535a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	079a      	lsls	r2, r3, #30
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4413      	add	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	3304      	adds	r3, #4
 8005372:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e008      	b.n	8005390 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005384:	f043 0202 	orr.w	r2, r3, #2
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
  }
}
 8005390:	4618      	mov	r0, r3
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d111      	bne.n	80053d4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0201 	bic.w	r2, r2, #1
 80053c6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	e008      	b.n	80053e6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053da:	f043 0204 	orr.w	r2, r3, #4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
  }
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <HAL_FDCAN_AddMessageToTxBuffer>:
  *         This parameter can be a value of @arg FDCAN_Tx_location.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxBuffer(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                 const uint8_t *pTxData, uint32_t BufferIndex)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b08c      	sub	sp, #48	@ 0x30
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
 80053fe:	603b      	str	r3, [r7, #0]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005406:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));
  assert_param(IS_FDCAN_TX_LOCATION(BufferIndex));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800540a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800540e:	2b01      	cmp	r3, #1
 8005410:	d003      	beq.n	800541a <HAL_FDCAN_AddMessageToTxBuffer+0x28>
 8005412:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005416:	2b02      	cmp	r3, #2
 8005418:	d14e      	bne.n	80054b8 <HAL_FDCAN_AddMessageToTxBuffer+0xc6>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	fa93 f3a3 	rbit	r3, r3
 8005424:	623b      	str	r3, [r7, #32]
  return result;
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (value == 0U)
 800542a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_FDCAN_AddMessageToTxBuffer+0x42>
    return 32U;
 8005430:	2320      	movs	r3, #32
 8005432:	e003      	b.n	800543c <HAL_FDCAN_AddMessageToTxBuffer+0x4a>
  return __builtin_clz(value);
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	fab3 f383 	clz	r3, r3
 800543a:	b2db      	uxtb	r3, r3
  {
    /* Check that the selected buffer has an allocated area into the RAM */
    if (POSITION_VAL(BufferIndex) >= ((hfdcan->Instance->TXBC & FDCAN_TXBC_NDTB) >> FDCAN_TXBC_NDTB_Pos))
 800543c:	461a      	mov	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005446:	0c1b      	lsrs	r3, r3, #16
 8005448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800544c:	429a      	cmp	r2, r3
 800544e:	d309      	bcc.n	8005464 <HAL_FDCAN_AddMessageToTxBuffer+0x72>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005456:	f043 0220 	orr.w	r2, r3, #32
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e032      	b.n	80054ca <HAL_FDCAN_AddMessageToTxBuffer+0xd8>
    }

    /* Check that there is no transmission request pending for the selected buffer */
    if ((hfdcan->Instance->TXBRP & BufferIndex) != 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	4013      	ands	r3, r2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <HAL_FDCAN_AddMessageToTxBuffer+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PENDING;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800547a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e020      	b.n	80054ca <HAL_FDCAN_AddMessageToTxBuffer+0xd8>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	fa93 f3a3 	rbit	r3, r3
 8005492:	617b      	str	r3, [r7, #20]
  return result;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_FDCAN_AddMessageToTxBuffer+0xb0>
    return 32U;
 800549e:	2320      	movs	r3, #32
 80054a0:	e003      	b.n	80054aa <HAL_FDCAN_AddMessageToTxBuffer+0xb8>
  return __builtin_clz(value);
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	fab3 f383 	clz	r3, r3
 80054a8:	b2db      	uxtb	r3, r3
    }
    else
    {
      /* Add the message to the Tx buffer */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, POSITION_VAL(BufferIndex));
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f9b6 	bl	8005820 <FDCAN_CopyMessageToRAM>
    }

    /* Return function status */
    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e008      	b.n	80054ca <HAL_FDCAN_AddMessageToTxBuffer+0xd8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054be:	f043 0202 	orr.w	r2, r3, #2
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3730      	adds	r7, #48	@ 0x30
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_FDCAN_EnableTxBufferRequest>:
  * @param  BufferIndex buffer index.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxBufferRequest(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndex)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d106      	bne.n	80054f6 <HAL_FDCAN_EnableTxBufferRequest+0x24>
  {
    /* Add transmission request */
    hfdcan->Instance->TXBAR = BufferIndex;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    /* Return function status */
    return HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	e008      	b.n	8005508 <HAL_FDCAN_EnableTxBufferRequest+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054fc:	f043 0208 	orr.w	r2, r3, #8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005520:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800552a:	4ba7      	ldr	r3, [pc, #668]	@ (80057c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800552c:	4013      	ands	r3, r2
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	0091      	lsls	r1, r2, #2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6812      	ldr	r2, [r2, #0]
 8005536:	430b      	orrs	r3, r1
 8005538:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005544:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	041a      	lsls	r2, r3, #16
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	4413      	add	r3, r2
 8005560:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800556a:	4b97      	ldr	r3, [pc, #604]	@ (80057c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800556c:	4013      	ands	r3, r2
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	0091      	lsls	r1, r2, #2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6812      	ldr	r2, [r2, #0]
 8005576:	430b      	orrs	r3, r1
 8005578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558c:	041a      	lsls	r2, r3, #16
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	4413      	add	r3, r2
 80055a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80055ac:	4b86      	ldr	r3, [pc, #536]	@ (80057c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	0091      	lsls	r1, r2, #2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	430b      	orrs	r3, r1
 80055ba:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055c6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ce:	041a      	lsls	r2, r3, #16
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80055e2:	fb02 f303 	mul.w	r3, r2, r3
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	4413      	add	r3, r2
 80055ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80055f4:	4b74      	ldr	r3, [pc, #464]	@ (80057c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	0091      	lsls	r1, r2, #2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	430b      	orrs	r3, r1
 8005602:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800560e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005616:	041a      	lsls	r2, r3, #16
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4413      	add	r3, r2
 8005632:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800563c:	4b62      	ldr	r3, [pc, #392]	@ (80057c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800563e:	4013      	ands	r3, r2
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	0091      	lsls	r1, r2, #2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	430b      	orrs	r3, r1
 800564a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005656:	fb02 f303 	mul.w	r3, r2, r3
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	4413      	add	r3, r2
 800565e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005668:	4b57      	ldr	r3, [pc, #348]	@ (80057c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800566a:	4013      	ands	r3, r2
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	0091      	lsls	r1, r2, #2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	430b      	orrs	r3, r1
 8005676:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005682:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	041a      	lsls	r2, r3, #16
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	4413      	add	r3, r2
 80056a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80056aa:	4b47      	ldr	r3, [pc, #284]	@ (80057c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	0091      	lsls	r1, r2, #2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	430b      	orrs	r3, r1
 80056b8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056c4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056cc:	041a      	lsls	r2, r3, #16
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056e0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e8:	061a      	lsls	r2, r3, #24
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056f8:	4b34      	ldr	r3, [pc, #208]	@ (80057cc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80056fa:	4413      	add	r3, r2
 80056fc:	009a      	lsls	r2, r3, #2
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	441a      	add	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	441a      	add	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005734:	441a      	add	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005746:	fb01 f303 	mul.w	r3, r1, r3
 800574a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800574c:	441a      	add	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800575e:	fb01 f303 	mul.w	r3, r1, r3
 8005762:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005764:	441a      	add	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800578e:	fb01 f303 	mul.w	r3, r1, r3
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	441a      	add	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80057aa:	fb01 f303 	mul.w	r3, r1, r3
 80057ae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80057b0:	441a      	add	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057be:	4a04      	ldr	r2, [pc, #16]	@ (80057d0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d915      	bls.n	80057f0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80057c4:	e006      	b.n	80057d4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80057c6:	bf00      	nop
 80057c8:	ffff0003 	.word	0xffff0003
 80057cc:	10002b00 	.word	0x10002b00
 80057d0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057da:	f043 0220 	orr.w	r2, r3, #32
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2203      	movs	r2, #3
 80057e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e010      	b.n	8005812 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	e005      	b.n	8005804 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3304      	adds	r3, #4
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	429a      	cmp	r2, r3
 800580e:	d3f3      	bcc.n	80057f8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop

08005820 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005820:	b480      	push	{r7}
 8005822:	b089      	sub	sp, #36	@ 0x24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800583e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005846:	4313      	orrs	r3, r2
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	e00a      	b.n	8005862 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005854:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800585a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800585c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005860:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800586c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005872:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005878:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800588e:	6839      	ldr	r1, [r7, #0]
 8005890:	fb01 f303 	mul.w	r3, r1, r3
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	3304      	adds	r3, #4
 80058a4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	3304      	adds	r3, #4
 80058b0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e020      	b.n	80058fa <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	3303      	adds	r3, #3
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4413      	add	r3, r2
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	3302      	adds	r3, #2
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	440b      	add	r3, r1
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80058d0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	3301      	adds	r3, #1
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	440b      	add	r3, r1
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80058de:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	440a      	add	r2, r1
 80058e6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80058e8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	3304      	adds	r3, #4
 80058f2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	3304      	adds	r3, #4
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	4a06      	ldr	r2, [pc, #24]	@ (8005918 <FDCAN_CopyMessageToRAM+0xf8>)
 8005900:	5cd3      	ldrb	r3, [r2, r3]
 8005902:	461a      	mov	r2, r3
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	4293      	cmp	r3, r2
 8005908:	d3d6      	bcc.n	80058b8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800590a:	bf00      	nop
 800590c:	bf00      	nop
 800590e:	3724      	adds	r7, #36	@ 0x24
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	0800bbec 	.word	0x0800bbec

0800591c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800591c:	b480      	push	{r7}
 800591e:	b089      	sub	sp, #36	@ 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800592a:	4b86      	ldr	r3, [pc, #536]	@ (8005b44 <HAL_GPIO_Init+0x228>)
 800592c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800592e:	e18c      	b.n	8005c4a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	2101      	movs	r1, #1
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	fa01 f303 	lsl.w	r3, r1, r3
 800593c:	4013      	ands	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 817e 	beq.w	8005c44 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d005      	beq.n	8005960 <HAL_GPIO_Init+0x44>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d130      	bne.n	80059c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	2203      	movs	r2, #3
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	4313      	orrs	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005996:	2201      	movs	r2, #1
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	43db      	mvns	r3, r3
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	4013      	ands	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	091b      	lsrs	r3, r3, #4
 80059ac:	f003 0201 	and.w	r2, r3, #1
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d017      	beq.n	80059fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	2203      	movs	r2, #3
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d123      	bne.n	8005a52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	08da      	lsrs	r2, r3, #3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3208      	adds	r2, #8
 8005a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	220f      	movs	r2, #15
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43db      	mvns	r3, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	08da      	lsrs	r2, r3, #3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3208      	adds	r2, #8
 8005a4c:	69b9      	ldr	r1, [r7, #24]
 8005a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f003 0203 	and.w	r2, r3, #3
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80d8 	beq.w	8005c44 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a94:	4b2c      	ldr	r3, [pc, #176]	@ (8005b48 <HAL_GPIO_Init+0x22c>)
 8005a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005b48 <HAL_GPIO_Init+0x22c>)
 8005a9c:	f043 0302 	orr.w	r3, r3, #2
 8005aa0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005aa4:	4b28      	ldr	r3, [pc, #160]	@ (8005b48 <HAL_GPIO_Init+0x22c>)
 8005aa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ab2:	4a26      	ldr	r2, [pc, #152]	@ (8005b4c <HAL_GPIO_Init+0x230>)
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	089b      	lsrs	r3, r3, #2
 8005ab8:	3302      	adds	r3, #2
 8005aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	220f      	movs	r2, #15
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b50 <HAL_GPIO_Init+0x234>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d04a      	beq.n	8005b74 <HAL_GPIO_Init+0x258>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8005b54 <HAL_GPIO_Init+0x238>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d02b      	beq.n	8005b3e <HAL_GPIO_Init+0x222>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b58 <HAL_GPIO_Init+0x23c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d025      	beq.n	8005b3a <HAL_GPIO_Init+0x21e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a1a      	ldr	r2, [pc, #104]	@ (8005b5c <HAL_GPIO_Init+0x240>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d01f      	beq.n	8005b36 <HAL_GPIO_Init+0x21a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a19      	ldr	r2, [pc, #100]	@ (8005b60 <HAL_GPIO_Init+0x244>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d019      	beq.n	8005b32 <HAL_GPIO_Init+0x216>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a18      	ldr	r2, [pc, #96]	@ (8005b64 <HAL_GPIO_Init+0x248>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d013      	beq.n	8005b2e <HAL_GPIO_Init+0x212>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a17      	ldr	r2, [pc, #92]	@ (8005b68 <HAL_GPIO_Init+0x24c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00d      	beq.n	8005b2a <HAL_GPIO_Init+0x20e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a16      	ldr	r2, [pc, #88]	@ (8005b6c <HAL_GPIO_Init+0x250>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d007      	beq.n	8005b26 <HAL_GPIO_Init+0x20a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a15      	ldr	r2, [pc, #84]	@ (8005b70 <HAL_GPIO_Init+0x254>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d101      	bne.n	8005b22 <HAL_GPIO_Init+0x206>
 8005b1e:	2309      	movs	r3, #9
 8005b20:	e029      	b.n	8005b76 <HAL_GPIO_Init+0x25a>
 8005b22:	230a      	movs	r3, #10
 8005b24:	e027      	b.n	8005b76 <HAL_GPIO_Init+0x25a>
 8005b26:	2307      	movs	r3, #7
 8005b28:	e025      	b.n	8005b76 <HAL_GPIO_Init+0x25a>
 8005b2a:	2306      	movs	r3, #6
 8005b2c:	e023      	b.n	8005b76 <HAL_GPIO_Init+0x25a>
 8005b2e:	2305      	movs	r3, #5
 8005b30:	e021      	b.n	8005b76 <HAL_GPIO_Init+0x25a>
 8005b32:	2304      	movs	r3, #4
 8005b34:	e01f      	b.n	8005b76 <HAL_GPIO_Init+0x25a>
 8005b36:	2303      	movs	r3, #3
 8005b38:	e01d      	b.n	8005b76 <HAL_GPIO_Init+0x25a>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e01b      	b.n	8005b76 <HAL_GPIO_Init+0x25a>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e019      	b.n	8005b76 <HAL_GPIO_Init+0x25a>
 8005b42:	bf00      	nop
 8005b44:	58000080 	.word	0x58000080
 8005b48:	58024400 	.word	0x58024400
 8005b4c:	58000400 	.word	0x58000400
 8005b50:	58020000 	.word	0x58020000
 8005b54:	58020400 	.word	0x58020400
 8005b58:	58020800 	.word	0x58020800
 8005b5c:	58020c00 	.word	0x58020c00
 8005b60:	58021000 	.word	0x58021000
 8005b64:	58021400 	.word	0x58021400
 8005b68:	58021800 	.word	0x58021800
 8005b6c:	58021c00 	.word	0x58021c00
 8005b70:	58022400 	.word	0x58022400
 8005b74:	2300      	movs	r3, #0
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	f002 0203 	and.w	r2, r2, #3
 8005b7c:	0092      	lsls	r2, r2, #2
 8005b7e:	4093      	lsls	r3, r2
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b86:	4938      	ldr	r1, [pc, #224]	@ (8005c68 <HAL_GPIO_Init+0x34c>)
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	089b      	lsrs	r3, r3, #2
 8005b8c:	3302      	adds	r3, #2
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	43db      	mvns	r3, r3
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005bba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005be8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	3301      	adds	r3, #1
 8005c48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f47f ae6b 	bne.w	8005930 <HAL_GPIO_Init+0x14>
  }
}
 8005c5a:	bf00      	nop
 8005c5c:	bf00      	nop
 8005c5e:	3724      	adds	r7, #36	@ 0x24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	58000400 	.word	0x58000400

08005c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	807b      	strh	r3, [r7, #2]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c7c:	787b      	ldrb	r3, [r7, #1]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c82:	887a      	ldrh	r2, [r7, #2]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c88:	e003      	b.n	8005c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c8a:	887b      	ldrh	r3, [r7, #2]
 8005c8c:	041a      	lsls	r2, r3, #16
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	619a      	str	r2, [r3, #24]
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ca8:	4b19      	ldr	r3, [pc, #100]	@ (8005d10 <HAL_PWREx_ConfigSupply+0x70>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0304 	and.w	r3, r3, #4
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d00a      	beq.n	8005cca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005cb4:	4b16      	ldr	r3, [pc, #88]	@ (8005d10 <HAL_PWREx_ConfigSupply+0x70>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d001      	beq.n	8005cc6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e01f      	b.n	8005d06 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e01d      	b.n	8005d06 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005cca:	4b11      	ldr	r3, [pc, #68]	@ (8005d10 <HAL_PWREx_ConfigSupply+0x70>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f023 0207 	bic.w	r2, r3, #7
 8005cd2:	490f      	ldr	r1, [pc, #60]	@ (8005d10 <HAL_PWREx_ConfigSupply+0x70>)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005cda:	f7fb fcf5 	bl	80016c8 <HAL_GetTick>
 8005cde:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ce0:	e009      	b.n	8005cf6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ce2:	f7fb fcf1 	bl	80016c8 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cf0:	d901      	bls.n	8005cf6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e007      	b.n	8005d06 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cf6:	4b06      	ldr	r3, [pc, #24]	@ (8005d10 <HAL_PWREx_ConfigSupply+0x70>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d02:	d1ee      	bne.n	8005ce2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	58024800 	.word	0x58024800

08005d14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08c      	sub	sp, #48	@ 0x30
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e3c8      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 8087 	beq.w	8005e42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d34:	4b88      	ldr	r3, [pc, #544]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d3e:	4b86      	ldr	r3, [pc, #536]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d46:	2b10      	cmp	r3, #16
 8005d48:	d007      	beq.n	8005d5a <HAL_RCC_OscConfig+0x46>
 8005d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4c:	2b18      	cmp	r3, #24
 8005d4e:	d110      	bne.n	8005d72 <HAL_RCC_OscConfig+0x5e>
 8005d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d10b      	bne.n	8005d72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d06c      	beq.n	8005e40 <HAL_RCC_OscConfig+0x12c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d168      	bne.n	8005e40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e3a2      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d7a:	d106      	bne.n	8005d8a <HAL_RCC_OscConfig+0x76>
 8005d7c:	4b76      	ldr	r3, [pc, #472]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a75      	ldr	r2, [pc, #468]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005d82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	e02e      	b.n	8005de8 <HAL_RCC_OscConfig+0xd4>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10c      	bne.n	8005dac <HAL_RCC_OscConfig+0x98>
 8005d92:	4b71      	ldr	r3, [pc, #452]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a70      	ldr	r2, [pc, #448]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	4b6e      	ldr	r3, [pc, #440]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a6d      	ldr	r2, [pc, #436]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005da4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	e01d      	b.n	8005de8 <HAL_RCC_OscConfig+0xd4>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005db4:	d10c      	bne.n	8005dd0 <HAL_RCC_OscConfig+0xbc>
 8005db6:	4b68      	ldr	r3, [pc, #416]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a67      	ldr	r2, [pc, #412]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	4b65      	ldr	r3, [pc, #404]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a64      	ldr	r2, [pc, #400]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e00b      	b.n	8005de8 <HAL_RCC_OscConfig+0xd4>
 8005dd0:	4b61      	ldr	r3, [pc, #388]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a60      	ldr	r2, [pc, #384]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a5d      	ldr	r2, [pc, #372]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d013      	beq.n	8005e18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fb fc6a 	bl	80016c8 <HAL_GetTick>
 8005df4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df8:	f7fb fc66 	bl	80016c8 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b64      	cmp	r3, #100	@ 0x64
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e356      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e0a:	4b53      	ldr	r3, [pc, #332]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCC_OscConfig+0xe4>
 8005e16:	e014      	b.n	8005e42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e18:	f7fb fc56 	bl	80016c8 <HAL_GetTick>
 8005e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e20:	f7fb fc52 	bl	80016c8 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b64      	cmp	r3, #100	@ 0x64
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e342      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e32:	4b49      	ldr	r3, [pc, #292]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1f0      	bne.n	8005e20 <HAL_RCC_OscConfig+0x10c>
 8005e3e:	e000      	b.n	8005e42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 808c 	beq.w	8005f68 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e50:	4b41      	ldr	r3, [pc, #260]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <HAL_RCC_OscConfig+0x162>
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	2b18      	cmp	r3, #24
 8005e6a:	d137      	bne.n	8005edc <HAL_RCC_OscConfig+0x1c8>
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d132      	bne.n	8005edc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e76:	4b38      	ldr	r3, [pc, #224]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_RCC_OscConfig+0x17a>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e314      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e8e:	4b32      	ldr	r3, [pc, #200]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f023 0219 	bic.w	r2, r3, #25
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	492f      	ldr	r1, [pc, #188]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea0:	f7fb fc12 	bl	80016c8 <HAL_GetTick>
 8005ea4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea8:	f7fb fc0e 	bl	80016c8 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e2fe      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005eba:	4b27      	ldr	r3, [pc, #156]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec6:	4b24      	ldr	r3, [pc, #144]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	061b      	lsls	r3, r3, #24
 8005ed4:	4920      	ldr	r1, [pc, #128]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eda:	e045      	b.n	8005f68 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d026      	beq.n	8005f32 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f023 0219 	bic.w	r2, r3, #25
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	4919      	ldr	r1, [pc, #100]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef6:	f7fb fbe7 	bl	80016c8 <HAL_GetTick>
 8005efa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005efc:	e008      	b.n	8005f10 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005efe:	f7fb fbe3 	bl	80016c8 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e2d3      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f10:	4b11      	ldr	r3, [pc, #68]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0f0      	beq.n	8005efe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	061b      	lsls	r3, r3, #24
 8005f2a:	490b      	ldr	r1, [pc, #44]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	604b      	str	r3, [r1, #4]
 8005f30:	e01a      	b.n	8005f68 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f32:	4b09      	ldr	r3, [pc, #36]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a08      	ldr	r2, [pc, #32]	@ (8005f58 <HAL_RCC_OscConfig+0x244>)
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3e:	f7fb fbc3 	bl	80016c8 <HAL_GetTick>
 8005f42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f44:	e00a      	b.n	8005f5c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f46:	f7fb fbbf 	bl	80016c8 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d903      	bls.n	8005f5c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e2af      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
 8005f58:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f5c:	4b96      	ldr	r3, [pc, #600]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1ee      	bne.n	8005f46 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d06a      	beq.n	800604a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f74:	4b90      	ldr	r3, [pc, #576]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f7c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f7e:	4b8e      	ldr	r3, [pc, #568]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8005f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f82:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d007      	beq.n	8005f9a <HAL_RCC_OscConfig+0x286>
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	2b18      	cmp	r3, #24
 8005f8e:	d11b      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x2b4>
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d116      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f9a:	4b87      	ldr	r3, [pc, #540]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x29e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	2b80      	cmp	r3, #128	@ 0x80
 8005fac:	d001      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e282      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fb2:	4b81      	ldr	r3, [pc, #516]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	061b      	lsls	r3, r3, #24
 8005fc0:	497d      	ldr	r1, [pc, #500]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fc6:	e040      	b.n	800604a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d023      	beq.n	8006018 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005fd0:	4b79      	ldr	r3, [pc, #484]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a78      	ldr	r2, [pc, #480]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8005fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fdc:	f7fb fb74 	bl	80016c8 <HAL_GetTick>
 8005fe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005fe4:	f7fb fb70 	bl	80016c8 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e260      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ff6:	4b70      	ldr	r3, [pc, #448]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0f0      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006002:	4b6d      	ldr	r3, [pc, #436]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	061b      	lsls	r3, r3, #24
 8006010:	4969      	ldr	r1, [pc, #420]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8006012:	4313      	orrs	r3, r2
 8006014:	60cb      	str	r3, [r1, #12]
 8006016:	e018      	b.n	800604a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006018:	4b67      	ldr	r3, [pc, #412]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a66      	ldr	r2, [pc, #408]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 800601e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fb fb50 	bl	80016c8 <HAL_GetTick>
 8006028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800602c:	f7fb fb4c 	bl	80016c8 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e23c      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800603e:	4b5e      	ldr	r3, [pc, #376]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b00      	cmp	r3, #0
 8006054:	d036      	beq.n	80060c4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d019      	beq.n	8006092 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800605e:	4b56      	ldr	r3, [pc, #344]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8006060:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006062:	4a55      	ldr	r2, [pc, #340]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606a:	f7fb fb2d 	bl	80016c8 <HAL_GetTick>
 800606e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006070:	e008      	b.n	8006084 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006072:	f7fb fb29 	bl	80016c8 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e219      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006084:	4b4c      	ldr	r3, [pc, #304]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8006086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0f0      	beq.n	8006072 <HAL_RCC_OscConfig+0x35e>
 8006090:	e018      	b.n	80060c4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006092:	4b49      	ldr	r3, [pc, #292]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8006094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006096:	4a48      	ldr	r2, [pc, #288]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8006098:	f023 0301 	bic.w	r3, r3, #1
 800609c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609e:	f7fb fb13 	bl	80016c8 <HAL_GetTick>
 80060a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a6:	f7fb fb0f 	bl	80016c8 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e1ff      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060b8:	4b3f      	ldr	r3, [pc, #252]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 80060ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1f0      	bne.n	80060a6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0320 	and.w	r3, r3, #32
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d036      	beq.n	800613e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d019      	beq.n	800610c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060d8:	4b37      	ldr	r3, [pc, #220]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a36      	ldr	r2, [pc, #216]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 80060de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80060e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060e4:	f7fb faf0 	bl	80016c8 <HAL_GetTick>
 80060e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060ec:	f7fb faec 	bl	80016c8 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e1dc      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80060fe:	4b2e      	ldr	r3, [pc, #184]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0f0      	beq.n	80060ec <HAL_RCC_OscConfig+0x3d8>
 800610a:	e018      	b.n	800613e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800610c:	4b2a      	ldr	r3, [pc, #168]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a29      	ldr	r2, [pc, #164]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8006112:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006116:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006118:	f7fb fad6 	bl	80016c8 <HAL_GetTick>
 800611c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006120:	f7fb fad2 	bl	80016c8 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e1c2      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006132:	4b21      	ldr	r3, [pc, #132]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f0      	bne.n	8006120 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 8086 	beq.w	8006258 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800614c:	4b1b      	ldr	r3, [pc, #108]	@ (80061bc <HAL_RCC_OscConfig+0x4a8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a1a      	ldr	r2, [pc, #104]	@ (80061bc <HAL_RCC_OscConfig+0x4a8>)
 8006152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006158:	f7fb fab6 	bl	80016c8 <HAL_GetTick>
 800615c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006160:	f7fb fab2 	bl	80016c8 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b64      	cmp	r3, #100	@ 0x64
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e1a2      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006172:	4b12      	ldr	r3, [pc, #72]	@ (80061bc <HAL_RCC_OscConfig+0x4a8>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f0      	beq.n	8006160 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d106      	bne.n	8006194 <HAL_RCC_OscConfig+0x480>
 8006186:	4b0c      	ldr	r3, [pc, #48]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 8006188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800618a:	4a0b      	ldr	r2, [pc, #44]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	6713      	str	r3, [r2, #112]	@ 0x70
 8006192:	e032      	b.n	80061fa <HAL_RCC_OscConfig+0x4e6>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d111      	bne.n	80061c0 <HAL_RCC_OscConfig+0x4ac>
 800619c:	4b06      	ldr	r3, [pc, #24]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 800619e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a0:	4a05      	ldr	r2, [pc, #20]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80061a8:	4b03      	ldr	r3, [pc, #12]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 80061aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ac:	4a02      	ldr	r2, [pc, #8]	@ (80061b8 <HAL_RCC_OscConfig+0x4a4>)
 80061ae:	f023 0304 	bic.w	r3, r3, #4
 80061b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80061b4:	e021      	b.n	80061fa <HAL_RCC_OscConfig+0x4e6>
 80061b6:	bf00      	nop
 80061b8:	58024400 	.word	0x58024400
 80061bc:	58024800 	.word	0x58024800
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b05      	cmp	r3, #5
 80061c6:	d10c      	bne.n	80061e2 <HAL_RCC_OscConfig+0x4ce>
 80061c8:	4b83      	ldr	r3, [pc, #524]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80061ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061cc:	4a82      	ldr	r2, [pc, #520]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80061ce:	f043 0304 	orr.w	r3, r3, #4
 80061d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80061d4:	4b80      	ldr	r3, [pc, #512]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80061d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d8:	4a7f      	ldr	r2, [pc, #508]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80061da:	f043 0301 	orr.w	r3, r3, #1
 80061de:	6713      	str	r3, [r2, #112]	@ 0x70
 80061e0:	e00b      	b.n	80061fa <HAL_RCC_OscConfig+0x4e6>
 80061e2:	4b7d      	ldr	r3, [pc, #500]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80061e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e6:	4a7c      	ldr	r2, [pc, #496]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80061e8:	f023 0301 	bic.w	r3, r3, #1
 80061ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ee:	4b7a      	ldr	r3, [pc, #488]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f2:	4a79      	ldr	r2, [pc, #484]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80061f4:	f023 0304 	bic.w	r3, r3, #4
 80061f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d015      	beq.n	800622e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006202:	f7fb fa61 	bl	80016c8 <HAL_GetTick>
 8006206:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006208:	e00a      	b.n	8006220 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800620a:	f7fb fa5d 	bl	80016c8 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006218:	4293      	cmp	r3, r2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e14b      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006220:	4b6d      	ldr	r3, [pc, #436]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0ee      	beq.n	800620a <HAL_RCC_OscConfig+0x4f6>
 800622c:	e014      	b.n	8006258 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622e:	f7fb fa4b 	bl	80016c8 <HAL_GetTick>
 8006232:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006234:	e00a      	b.n	800624c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006236:	f7fb fa47 	bl	80016c8 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006244:	4293      	cmp	r3, r2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e135      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800624c:	4b62      	ldr	r3, [pc, #392]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1ee      	bne.n	8006236 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 812a 	beq.w	80064b6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006262:	4b5d      	ldr	r3, [pc, #372]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800626a:	2b18      	cmp	r3, #24
 800626c:	f000 80ba 	beq.w	80063e4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006274:	2b02      	cmp	r3, #2
 8006276:	f040 8095 	bne.w	80063a4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800627a:	4b57      	ldr	r3, [pc, #348]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a56      	ldr	r2, [pc, #344]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006280:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006286:	f7fb fa1f 	bl	80016c8 <HAL_GetTick>
 800628a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800628c:	e008      	b.n	80062a0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800628e:	f7fb fa1b 	bl	80016c8 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	2b02      	cmp	r3, #2
 800629a:	d901      	bls.n	80062a0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e10b      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062a0:	4b4d      	ldr	r3, [pc, #308]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1f0      	bne.n	800628e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062ac:	4b4a      	ldr	r3, [pc, #296]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80062ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062b0:	4b4a      	ldr	r3, [pc, #296]	@ (80063dc <HAL_RCC_OscConfig+0x6c8>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80062bc:	0112      	lsls	r2, r2, #4
 80062be:	430a      	orrs	r2, r1
 80062c0:	4945      	ldr	r1, [pc, #276]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	628b      	str	r3, [r1, #40]	@ 0x28
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ca:	3b01      	subs	r3, #1
 80062cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d4:	3b01      	subs	r3, #1
 80062d6:	025b      	lsls	r3, r3, #9
 80062d8:	b29b      	uxth	r3, r3
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e0:	3b01      	subs	r3, #1
 80062e2:	041b      	lsls	r3, r3, #16
 80062e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ee:	3b01      	subs	r3, #1
 80062f0:	061b      	lsls	r3, r3, #24
 80062f2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80062f6:	4938      	ldr	r1, [pc, #224]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80062fc:	4b36      	ldr	r3, [pc, #216]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	4a35      	ldr	r2, [pc, #212]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006308:	4b33      	ldr	r3, [pc, #204]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 800630a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800630c:	4b34      	ldr	r3, [pc, #208]	@ (80063e0 <HAL_RCC_OscConfig+0x6cc>)
 800630e:	4013      	ands	r3, r2
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006314:	00d2      	lsls	r2, r2, #3
 8006316:	4930      	ldr	r1, [pc, #192]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006318:	4313      	orrs	r3, r2
 800631a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800631c:	4b2e      	ldr	r3, [pc, #184]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 800631e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006320:	f023 020c 	bic.w	r2, r3, #12
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006328:	492b      	ldr	r1, [pc, #172]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 800632a:	4313      	orrs	r3, r2
 800632c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800632e:	4b2a      	ldr	r3, [pc, #168]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006332:	f023 0202 	bic.w	r2, r3, #2
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633a:	4927      	ldr	r1, [pc, #156]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 800633c:	4313      	orrs	r3, r2
 800633e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006340:	4b25      	ldr	r3, [pc, #148]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	4a24      	ldr	r2, [pc, #144]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800634a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800634c:	4b22      	ldr	r3, [pc, #136]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	4a21      	ldr	r2, [pc, #132]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006358:	4b1f      	ldr	r3, [pc, #124]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	4a1e      	ldr	r2, [pc, #120]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 800635e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006364:	4b1c      	ldr	r3, [pc, #112]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	4a1b      	ldr	r2, [pc, #108]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 800636a:	f043 0301 	orr.w	r3, r3, #1
 800636e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006370:	4b19      	ldr	r3, [pc, #100]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a18      	ldr	r2, [pc, #96]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006376:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800637a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637c:	f7fb f9a4 	bl	80016c8 <HAL_GetTick>
 8006380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006384:	f7fb f9a0 	bl	80016c8 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e090      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006396:	4b10      	ldr	r3, [pc, #64]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0f0      	beq.n	8006384 <HAL_RCC_OscConfig+0x670>
 80063a2:	e088      	b.n	80064b6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a4:	4b0c      	ldr	r3, [pc, #48]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a0b      	ldr	r2, [pc, #44]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80063aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b0:	f7fb f98a 	bl	80016c8 <HAL_GetTick>
 80063b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063b8:	f7fb f986 	bl	80016c8 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e076      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063ca:	4b03      	ldr	r3, [pc, #12]	@ (80063d8 <HAL_RCC_OscConfig+0x6c4>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x6a4>
 80063d6:	e06e      	b.n	80064b6 <HAL_RCC_OscConfig+0x7a2>
 80063d8:	58024400 	.word	0x58024400
 80063dc:	fffffc0c 	.word	0xfffffc0c
 80063e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80063e4:	4b36      	ldr	r3, [pc, #216]	@ (80064c0 <HAL_RCC_OscConfig+0x7ac>)
 80063e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80063ea:	4b35      	ldr	r3, [pc, #212]	@ (80064c0 <HAL_RCC_OscConfig+0x7ac>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d031      	beq.n	800645c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f003 0203 	and.w	r2, r3, #3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006402:	429a      	cmp	r2, r3
 8006404:	d12a      	bne.n	800645c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	091b      	lsrs	r3, r3, #4
 800640a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006412:	429a      	cmp	r2, r3
 8006414:	d122      	bne.n	800645c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006420:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006422:	429a      	cmp	r2, r3
 8006424:	d11a      	bne.n	800645c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	0a5b      	lsrs	r3, r3, #9
 800642a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006432:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006434:	429a      	cmp	r2, r3
 8006436:	d111      	bne.n	800645c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	0c1b      	lsrs	r3, r3, #16
 800643c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006444:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006446:	429a      	cmp	r2, r3
 8006448:	d108      	bne.n	800645c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	0e1b      	lsrs	r3, r3, #24
 800644e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006456:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006458:	429a      	cmp	r2, r3
 800645a:	d001      	beq.n	8006460 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e02b      	b.n	80064b8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006460:	4b17      	ldr	r3, [pc, #92]	@ (80064c0 <HAL_RCC_OscConfig+0x7ac>)
 8006462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006464:	08db      	lsrs	r3, r3, #3
 8006466:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800646a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	429a      	cmp	r2, r3
 8006474:	d01f      	beq.n	80064b6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006476:	4b12      	ldr	r3, [pc, #72]	@ (80064c0 <HAL_RCC_OscConfig+0x7ac>)
 8006478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647a:	4a11      	ldr	r2, [pc, #68]	@ (80064c0 <HAL_RCC_OscConfig+0x7ac>)
 800647c:	f023 0301 	bic.w	r3, r3, #1
 8006480:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006482:	f7fb f921 	bl	80016c8 <HAL_GetTick>
 8006486:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006488:	bf00      	nop
 800648a:	f7fb f91d 	bl	80016c8 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	4293      	cmp	r3, r2
 8006494:	d0f9      	beq.n	800648a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006496:	4b0a      	ldr	r3, [pc, #40]	@ (80064c0 <HAL_RCC_OscConfig+0x7ac>)
 8006498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800649a:	4b0a      	ldr	r3, [pc, #40]	@ (80064c4 <HAL_RCC_OscConfig+0x7b0>)
 800649c:	4013      	ands	r3, r2
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80064a2:	00d2      	lsls	r2, r2, #3
 80064a4:	4906      	ldr	r1, [pc, #24]	@ (80064c0 <HAL_RCC_OscConfig+0x7ac>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80064aa:	4b05      	ldr	r3, [pc, #20]	@ (80064c0 <HAL_RCC_OscConfig+0x7ac>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ae:	4a04      	ldr	r2, [pc, #16]	@ (80064c0 <HAL_RCC_OscConfig+0x7ac>)
 80064b0:	f043 0301 	orr.w	r3, r3, #1
 80064b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3730      	adds	r7, #48	@ 0x30
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	58024400 	.word	0x58024400
 80064c4:	ffff0007 	.word	0xffff0007

080064c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e19c      	b.n	8006816 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064dc:	4b8a      	ldr	r3, [pc, #552]	@ (8006708 <HAL_RCC_ClockConfig+0x240>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d910      	bls.n	800650c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ea:	4b87      	ldr	r3, [pc, #540]	@ (8006708 <HAL_RCC_ClockConfig+0x240>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f023 020f 	bic.w	r2, r3, #15
 80064f2:	4985      	ldr	r1, [pc, #532]	@ (8006708 <HAL_RCC_ClockConfig+0x240>)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064fa:	4b83      	ldr	r3, [pc, #524]	@ (8006708 <HAL_RCC_ClockConfig+0x240>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d001      	beq.n	800650c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e184      	b.n	8006816 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d010      	beq.n	800653a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	4b7b      	ldr	r3, [pc, #492]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006524:	429a      	cmp	r2, r3
 8006526:	d908      	bls.n	800653a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006528:	4b78      	ldr	r3, [pc, #480]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	4975      	ldr	r1, [pc, #468]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 8006536:	4313      	orrs	r3, r2
 8006538:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d010      	beq.n	8006568 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	695a      	ldr	r2, [r3, #20]
 800654a:	4b70      	ldr	r3, [pc, #448]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006552:	429a      	cmp	r2, r3
 8006554:	d908      	bls.n	8006568 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006556:	4b6d      	ldr	r3, [pc, #436]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	496a      	ldr	r1, [pc, #424]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 8006564:	4313      	orrs	r3, r2
 8006566:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	2b00      	cmp	r3, #0
 8006572:	d010      	beq.n	8006596 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	699a      	ldr	r2, [r3, #24]
 8006578:	4b64      	ldr	r3, [pc, #400]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006580:	429a      	cmp	r2, r3
 8006582:	d908      	bls.n	8006596 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006584:	4b61      	ldr	r3, [pc, #388]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	495e      	ldr	r1, [pc, #376]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 8006592:	4313      	orrs	r3, r2
 8006594:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d010      	beq.n	80065c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69da      	ldr	r2, [r3, #28]
 80065a6:	4b59      	ldr	r3, [pc, #356]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d908      	bls.n	80065c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80065b2:	4b56      	ldr	r3, [pc, #344]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	4953      	ldr	r1, [pc, #332]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d010      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	4b4d      	ldr	r3, [pc, #308]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	f003 030f 	and.w	r3, r3, #15
 80065dc:	429a      	cmp	r2, r3
 80065de:	d908      	bls.n	80065f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065e0:	4b4a      	ldr	r3, [pc, #296]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	f023 020f 	bic.w	r2, r3, #15
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	4947      	ldr	r1, [pc, #284]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d055      	beq.n	80066aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80065fe:	4b43      	ldr	r3, [pc, #268]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	4940      	ldr	r1, [pc, #256]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 800660c:	4313      	orrs	r3, r2
 800660e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b02      	cmp	r3, #2
 8006616:	d107      	bne.n	8006628 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006618:	4b3c      	ldr	r3, [pc, #240]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d121      	bne.n	8006668 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e0f6      	b.n	8006816 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d107      	bne.n	8006640 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006630:	4b36      	ldr	r3, [pc, #216]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d115      	bne.n	8006668 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e0ea      	b.n	8006816 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d107      	bne.n	8006658 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006648:	4b30      	ldr	r3, [pc, #192]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006650:	2b00      	cmp	r3, #0
 8006652:	d109      	bne.n	8006668 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0de      	b.n	8006816 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006658:	4b2c      	ldr	r3, [pc, #176]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e0d6      	b.n	8006816 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006668:	4b28      	ldr	r3, [pc, #160]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f023 0207 	bic.w	r2, r3, #7
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	4925      	ldr	r1, [pc, #148]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 8006676:	4313      	orrs	r3, r2
 8006678:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800667a:	f7fb f825 	bl	80016c8 <HAL_GetTick>
 800667e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006680:	e00a      	b.n	8006698 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006682:	f7fb f821 	bl	80016c8 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006690:	4293      	cmp	r3, r2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e0be      	b.n	8006816 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006698:	4b1c      	ldr	r3, [pc, #112]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d1eb      	bne.n	8006682 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d010      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	4b14      	ldr	r3, [pc, #80]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d208      	bcs.n	80066d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066c6:	4b11      	ldr	r3, [pc, #68]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f023 020f 	bic.w	r2, r3, #15
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	490e      	ldr	r1, [pc, #56]	@ (800670c <HAL_RCC_ClockConfig+0x244>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006708 <HAL_RCC_ClockConfig+0x240>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d214      	bcs.n	8006710 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e6:	4b08      	ldr	r3, [pc, #32]	@ (8006708 <HAL_RCC_ClockConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f023 020f 	bic.w	r2, r3, #15
 80066ee:	4906      	ldr	r1, [pc, #24]	@ (8006708 <HAL_RCC_ClockConfig+0x240>)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f6:	4b04      	ldr	r3, [pc, #16]	@ (8006708 <HAL_RCC_ClockConfig+0x240>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d005      	beq.n	8006710 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e086      	b.n	8006816 <HAL_RCC_ClockConfig+0x34e>
 8006708:	52002000 	.word	0x52002000
 800670c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d010      	beq.n	800673e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	4b3f      	ldr	r3, [pc, #252]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006728:	429a      	cmp	r2, r3
 800672a:	d208      	bcs.n	800673e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800672c:	4b3c      	ldr	r3, [pc, #240]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	4939      	ldr	r1, [pc, #228]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 800673a:	4313      	orrs	r3, r2
 800673c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d010      	beq.n	800676c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	695a      	ldr	r2, [r3, #20]
 800674e:	4b34      	ldr	r3, [pc, #208]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006756:	429a      	cmp	r2, r3
 8006758:	d208      	bcs.n	800676c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800675a:	4b31      	ldr	r3, [pc, #196]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	492e      	ldr	r1, [pc, #184]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 8006768:	4313      	orrs	r3, r2
 800676a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b00      	cmp	r3, #0
 8006776:	d010      	beq.n	800679a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699a      	ldr	r2, [r3, #24]
 800677c:	4b28      	ldr	r3, [pc, #160]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006784:	429a      	cmp	r2, r3
 8006786:	d208      	bcs.n	800679a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006788:	4b25      	ldr	r3, [pc, #148]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	4922      	ldr	r1, [pc, #136]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 8006796:	4313      	orrs	r3, r2
 8006798:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d010      	beq.n	80067c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69da      	ldr	r2, [r3, #28]
 80067aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d208      	bcs.n	80067c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80067b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	4917      	ldr	r1, [pc, #92]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80067c8:	f000 f834 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 80067cc:	4602      	mov	r2, r0
 80067ce:	4b14      	ldr	r3, [pc, #80]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	0a1b      	lsrs	r3, r3, #8
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	4912      	ldr	r1, [pc, #72]	@ (8006824 <HAL_RCC_ClockConfig+0x35c>)
 80067da:	5ccb      	ldrb	r3, [r1, r3]
 80067dc:	f003 031f 	and.w	r3, r3, #31
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
 80067e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80067e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006820 <HAL_RCC_ClockConfig+0x358>)
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	4a0d      	ldr	r2, [pc, #52]	@ (8006824 <HAL_RCC_ClockConfig+0x35c>)
 80067f0:	5cd3      	ldrb	r3, [r2, r3]
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	fa22 f303 	lsr.w	r3, r2, r3
 80067fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006828 <HAL_RCC_ClockConfig+0x360>)
 80067fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006800:	4a0a      	ldr	r2, [pc, #40]	@ (800682c <HAL_RCC_ClockConfig+0x364>)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006806:	4b0a      	ldr	r3, [pc, #40]	@ (8006830 <HAL_RCC_ClockConfig+0x368>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f7fa ff12 	bl	8001634 <HAL_InitTick>
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	58024400 	.word	0x58024400
 8006824:	0800bbd4 	.word	0x0800bbd4
 8006828:	24000004 	.word	0x24000004
 800682c:	24000000 	.word	0x24000000
 8006830:	24000008 	.word	0x24000008

08006834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006834:	b480      	push	{r7}
 8006836:	b089      	sub	sp, #36	@ 0x24
 8006838:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800683a:	4bb3      	ldr	r3, [pc, #716]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006842:	2b18      	cmp	r3, #24
 8006844:	f200 8155 	bhi.w	8006af2 <HAL_RCC_GetSysClockFreq+0x2be>
 8006848:	a201      	add	r2, pc, #4	@ (adr r2, 8006850 <HAL_RCC_GetSysClockFreq+0x1c>)
 800684a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684e:	bf00      	nop
 8006850:	080068b5 	.word	0x080068b5
 8006854:	08006af3 	.word	0x08006af3
 8006858:	08006af3 	.word	0x08006af3
 800685c:	08006af3 	.word	0x08006af3
 8006860:	08006af3 	.word	0x08006af3
 8006864:	08006af3 	.word	0x08006af3
 8006868:	08006af3 	.word	0x08006af3
 800686c:	08006af3 	.word	0x08006af3
 8006870:	080068db 	.word	0x080068db
 8006874:	08006af3 	.word	0x08006af3
 8006878:	08006af3 	.word	0x08006af3
 800687c:	08006af3 	.word	0x08006af3
 8006880:	08006af3 	.word	0x08006af3
 8006884:	08006af3 	.word	0x08006af3
 8006888:	08006af3 	.word	0x08006af3
 800688c:	08006af3 	.word	0x08006af3
 8006890:	080068e1 	.word	0x080068e1
 8006894:	08006af3 	.word	0x08006af3
 8006898:	08006af3 	.word	0x08006af3
 800689c:	08006af3 	.word	0x08006af3
 80068a0:	08006af3 	.word	0x08006af3
 80068a4:	08006af3 	.word	0x08006af3
 80068a8:	08006af3 	.word	0x08006af3
 80068ac:	08006af3 	.word	0x08006af3
 80068b0:	080068e7 	.word	0x080068e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068b4:	4b94      	ldr	r3, [pc, #592]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0320 	and.w	r3, r3, #32
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d009      	beq.n	80068d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068c0:	4b91      	ldr	r3, [pc, #580]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	08db      	lsrs	r3, r3, #3
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	4a90      	ldr	r2, [pc, #576]	@ (8006b0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068cc:	fa22 f303 	lsr.w	r3, r2, r3
 80068d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80068d2:	e111      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80068d4:	4b8d      	ldr	r3, [pc, #564]	@ (8006b0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068d6:	61bb      	str	r3, [r7, #24]
      break;
 80068d8:	e10e      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80068da:	4b8d      	ldr	r3, [pc, #564]	@ (8006b10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068dc:	61bb      	str	r3, [r7, #24]
      break;
 80068de:	e10b      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80068e0:	4b8c      	ldr	r3, [pc, #560]	@ (8006b14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80068e2:	61bb      	str	r3, [r7, #24]
      break;
 80068e4:	e108      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068e6:	4b88      	ldr	r3, [pc, #544]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80068f0:	4b85      	ldr	r3, [pc, #532]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f4:	091b      	lsrs	r3, r3, #4
 80068f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80068fc:	4b82      	ldr	r3, [pc, #520]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006906:	4b80      	ldr	r3, [pc, #512]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800690a:	08db      	lsrs	r3, r3, #3
 800690c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	fb02 f303 	mul.w	r3, r2, r3
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80e1 	beq.w	8006aec <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b02      	cmp	r3, #2
 800692e:	f000 8083 	beq.w	8006a38 <HAL_RCC_GetSysClockFreq+0x204>
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b02      	cmp	r3, #2
 8006936:	f200 80a1 	bhi.w	8006a7c <HAL_RCC_GetSysClockFreq+0x248>
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <HAL_RCC_GetSysClockFreq+0x114>
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d056      	beq.n	80069f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006946:	e099      	b.n	8006a7c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006948:	4b6f      	ldr	r3, [pc, #444]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	d02d      	beq.n	80069b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006954:	4b6c      	ldr	r3, [pc, #432]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	08db      	lsrs	r3, r3, #3
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	4a6b      	ldr	r2, [pc, #428]	@ (8006b0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006960:	fa22 f303 	lsr.w	r3, r2, r3
 8006964:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	ee07 3a90 	vmov	s15, r3
 800696c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	ee07 3a90 	vmov	s15, r3
 8006976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697e:	4b62      	ldr	r3, [pc, #392]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006992:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800699a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80069ae:	e087      	b.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006b1c <HAL_RCC_GetSysClockFreq+0x2e8>
 80069be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c2:	4b51      	ldr	r3, [pc, #324]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069f2:	e065      	b.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006b20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a06:	4b40      	ldr	r3, [pc, #256]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a16:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a1a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a36:	e043      	b.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006b24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a5e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a7a:	e021      	b.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a86:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006b20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aa2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006b18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006abe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006ac0:	4b11      	ldr	r3, [pc, #68]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac4:	0a5b      	lsrs	r3, r3, #9
 8006ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aca:	3301      	adds	r3, #1
 8006acc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	ee07 3a90 	vmov	s15, r3
 8006ad4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ae4:	ee17 3a90 	vmov	r3, s15
 8006ae8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006aea:	e005      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	61bb      	str	r3, [r7, #24]
      break;
 8006af0:	e002      	b.n	8006af8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006af2:	4b07      	ldr	r3, [pc, #28]	@ (8006b10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006af4:	61bb      	str	r3, [r7, #24]
      break;
 8006af6:	bf00      	nop
  }

  return sysclockfreq;
 8006af8:	69bb      	ldr	r3, [r7, #24]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3724      	adds	r7, #36	@ 0x24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	58024400 	.word	0x58024400
 8006b0c:	03d09000 	.word	0x03d09000
 8006b10:	003d0900 	.word	0x003d0900
 8006b14:	007a1200 	.word	0x007a1200
 8006b18:	46000000 	.word	0x46000000
 8006b1c:	4c742400 	.word	0x4c742400
 8006b20:	4a742400 	.word	0x4a742400
 8006b24:	4af42400 	.word	0x4af42400

08006b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b2e:	f7ff fe81 	bl	8006834 <HAL_RCC_GetSysClockFreq>
 8006b32:	4602      	mov	r2, r0
 8006b34:	4b10      	ldr	r3, [pc, #64]	@ (8006b78 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	0a1b      	lsrs	r3, r3, #8
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	490f      	ldr	r1, [pc, #60]	@ (8006b7c <HAL_RCC_GetHCLKFreq+0x54>)
 8006b40:	5ccb      	ldrb	r3, [r1, r3]
 8006b42:	f003 031f 	and.w	r3, r3, #31
 8006b46:	fa22 f303 	lsr.w	r3, r2, r3
 8006b4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b78 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	4a09      	ldr	r2, [pc, #36]	@ (8006b7c <HAL_RCC_GetHCLKFreq+0x54>)
 8006b56:	5cd3      	ldrb	r3, [r2, r3]
 8006b58:	f003 031f 	and.w	r3, r3, #31
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b62:	4a07      	ldr	r2, [pc, #28]	@ (8006b80 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b66:	4a07      	ldr	r2, [pc, #28]	@ (8006b84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b6c:	4b04      	ldr	r3, [pc, #16]	@ (8006b80 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	58024400 	.word	0x58024400
 8006b7c:	0800bbd4 	.word	0x0800bbd4
 8006b80:	24000004 	.word	0x24000004
 8006b84:	24000000 	.word	0x24000000

08006b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006b8c:	f7ff ffcc 	bl	8006b28 <HAL_RCC_GetHCLKFreq>
 8006b90:	4602      	mov	r2, r0
 8006b92:	4b06      	ldr	r3, [pc, #24]	@ (8006bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	4904      	ldr	r1, [pc, #16]	@ (8006bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ba0:	f003 031f 	and.w	r3, r3, #31
 8006ba4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	0800bbd4 	.word	0x0800bbd4

08006bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006bb8:	f7ff ffb6 	bl	8006b28 <HAL_RCC_GetHCLKFreq>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	4b06      	ldr	r3, [pc, #24]	@ (8006bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	0a1b      	lsrs	r3, r3, #8
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	4904      	ldr	r1, [pc, #16]	@ (8006bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bca:	5ccb      	ldrb	r3, [r1, r3]
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	58024400 	.word	0x58024400
 8006bdc:	0800bbd4 	.word	0x0800bbd4

08006be0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be4:	b0c6      	sub	sp, #280	@ 0x118
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bec:	2300      	movs	r3, #0
 8006bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006c04:	2500      	movs	r5, #0
 8006c06:	ea54 0305 	orrs.w	r3, r4, r5
 8006c0a:	d049      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c16:	d02f      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006c18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c1c:	d828      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c22:	d01a      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006c24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c28:	d822      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c32:	d007      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c34:	e01c      	b.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c36:	4bab      	ldr	r3, [pc, #684]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3a:	4aaa      	ldr	r2, [pc, #680]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c42:	e01a      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c48:	3308      	adds	r3, #8
 8006c4a:	2102      	movs	r1, #2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f002 fa49 	bl	80090e4 <RCCEx_PLL2_Config>
 8006c52:	4603      	mov	r3, r0
 8006c54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c58:	e00f      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5e:	3328      	adds	r3, #40	@ 0x28
 8006c60:	2102      	movs	r1, #2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f002 faf0 	bl	8009248 <RCCEx_PLL3_Config>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c6e:	e004      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c76:	e000      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10a      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c82:	4b98      	ldr	r3, [pc, #608]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c90:	4a94      	ldr	r2, [pc, #592]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c92:	430b      	orrs	r3, r1
 8006c94:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c96:	e003      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006cac:	f04f 0900 	mov.w	r9, #0
 8006cb0:	ea58 0309 	orrs.w	r3, r8, r9
 8006cb4:	d047      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d82a      	bhi.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc6:	bf00      	nop
 8006cc8:	08006cdd 	.word	0x08006cdd
 8006ccc:	08006ceb 	.word	0x08006ceb
 8006cd0:	08006d01 	.word	0x08006d01
 8006cd4:	08006d1f 	.word	0x08006d1f
 8006cd8:	08006d1f 	.word	0x08006d1f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cdc:	4b81      	ldr	r3, [pc, #516]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce0:	4a80      	ldr	r2, [pc, #512]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ce8:	e01a      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cee:	3308      	adds	r3, #8
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f002 f9f6 	bl	80090e4 <RCCEx_PLL2_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cfe:	e00f      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d04:	3328      	adds	r3, #40	@ 0x28
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f002 fa9d 	bl	8009248 <RCCEx_PLL3_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d14:	e004      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d1c:	e000      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d28:	4b6e      	ldr	r3, [pc, #440]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d2c:	f023 0107 	bic.w	r1, r3, #7
 8006d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d36:	4a6b      	ldr	r2, [pc, #428]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d3c:	e003      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006d52:	f04f 0b00 	mov.w	fp, #0
 8006d56:	ea5a 030b 	orrs.w	r3, sl, fp
 8006d5a:	d05b      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d64:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006d68:	d03b      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006d6a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006d6e:	d834      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006d70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d74:	d037      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006d76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d7a:	d82e      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006d7c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d80:	d033      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006d82:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d86:	d828      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006d88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d8c:	d01a      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006d8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d92:	d822      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006d98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d9c:	d007      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006d9e:	e01c      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006da0:	4b50      	ldr	r3, [pc, #320]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da4:	4a4f      	ldr	r2, [pc, #316]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006daa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dac:	e01e      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db2:	3308      	adds	r3, #8
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f002 f994 	bl	80090e4 <RCCEx_PLL2_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006dc2:	e013      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc8:	3328      	adds	r3, #40	@ 0x28
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f002 fa3b 	bl	8009248 <RCCEx_PLL3_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dd8:	e008      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006de0:	e004      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006de2:	bf00      	nop
 8006de4:	e002      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006de6:	bf00      	nop
 8006de8:	e000      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10b      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006df4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e04:	4a37      	ldr	r2, [pc, #220]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e06:	430b      	orrs	r3, r1
 8006e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e0a:	e003      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006e20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006e24:	2300      	movs	r3, #0
 8006e26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006e2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4313      	orrs	r3, r2
 8006e32:	d05d      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e3c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006e40:	d03b      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006e42:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006e46:	d834      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006e48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e4c:	d037      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006e4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e52:	d82e      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006e54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e58:	d033      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006e5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e5e:	d828      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006e60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e64:	d01a      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006e66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e6a:	d822      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e74:	d007      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006e76:	e01c      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e78:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	4a19      	ldr	r2, [pc, #100]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e84:	e01e      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f002 f928 	bl	80090e4 <RCCEx_PLL2_Config>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006e9a:	e013      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea0:	3328      	adds	r3, #40	@ 0x28
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f002 f9cf 	bl	8009248 <RCCEx_PLL3_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006eb8:	e004      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006eba:	bf00      	nop
 8006ebc:	e002      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006ebe:	bf00      	nop
 8006ec0:	e000      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10d      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ecc:	4b05      	ldr	r3, [pc, #20]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006edc:	4a01      	ldr	r2, [pc, #4]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ee2:	e005      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006ee4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006efc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006f00:	2300      	movs	r3, #0
 8006f02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f06:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	d03a      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f16:	2b30      	cmp	r3, #48	@ 0x30
 8006f18:	d01f      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006f1a:	2b30      	cmp	r3, #48	@ 0x30
 8006f1c:	d819      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d00c      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d815      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d019      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006f2a:	2b10      	cmp	r3, #16
 8006f2c:	d111      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f2e:	4baa      	ldr	r3, [pc, #680]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f32:	4aa9      	ldr	r2, [pc, #676]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006f3a:	e011      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f40:	3308      	adds	r3, #8
 8006f42:	2102      	movs	r1, #2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f002 f8cd 	bl	80090e4 <RCCEx_PLL2_Config>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006f50:	e006      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f58:	e002      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006f5a:	bf00      	nop
 8006f5c:	e000      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006f68:	4b9b      	ldr	r3, [pc, #620]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f6c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f76:	4a98      	ldr	r2, [pc, #608]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f7c:	e003      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006f92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f96:	2300      	movs	r3, #0
 8006f98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f9c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	d051      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fb0:	d035      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006fb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fb6:	d82e      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006fb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fbc:	d031      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006fbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fc2:	d828      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc8:	d01a      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fce:	d822      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fd8:	d007      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006fda:	e01c      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe0:	4a7d      	ldr	r2, [pc, #500]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006fe8:	e01c      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fee:	3308      	adds	r3, #8
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f002 f876 	bl	80090e4 <RCCEx_PLL2_Config>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ffe:	e011      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007004:	3328      	adds	r3, #40	@ 0x28
 8007006:	2100      	movs	r1, #0
 8007008:	4618      	mov	r0, r3
 800700a:	f002 f91d 	bl	8009248 <RCCEx_PLL3_Config>
 800700e:	4603      	mov	r3, r0
 8007010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007014:	e006      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800701c:	e002      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800701e:	bf00      	nop
 8007020:	e000      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8007022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007024:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800702c:	4b6a      	ldr	r3, [pc, #424]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800702e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007030:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800703a:	4a67      	ldr	r2, [pc, #412]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800703c:	430b      	orrs	r3, r1
 800703e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007040:	e003      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007042:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007046:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800704a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007056:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800705a:	2300      	movs	r3, #0
 800705c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007060:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007064:	460b      	mov	r3, r1
 8007066:	4313      	orrs	r3, r2
 8007068:	d053      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800706a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007074:	d033      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8007076:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800707a:	d82c      	bhi.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800707c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007080:	d02f      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8007082:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007086:	d826      	bhi.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007088:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800708c:	d02b      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800708e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007092:	d820      	bhi.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007098:	d012      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800709a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800709e:	d81a      	bhi.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d022      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80070a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a8:	d115      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ae:	3308      	adds	r3, #8
 80070b0:	2101      	movs	r1, #1
 80070b2:	4618      	mov	r0, r3
 80070b4:	f002 f816 	bl	80090e4 <RCCEx_PLL2_Config>
 80070b8:	4603      	mov	r3, r0
 80070ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070be:	e015      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c4:	3328      	adds	r3, #40	@ 0x28
 80070c6:	2101      	movs	r1, #1
 80070c8:	4618      	mov	r0, r3
 80070ca:	f002 f8bd 	bl	8009248 <RCCEx_PLL3_Config>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070d4:	e00a      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070dc:	e006      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80070de:	bf00      	nop
 80070e0:	e004      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80070e2:	bf00      	nop
 80070e4:	e002      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80070e6:	bf00      	nop
 80070e8:	e000      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80070ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80070f4:	4b38      	ldr	r3, [pc, #224]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80070fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007102:	4a35      	ldr	r2, [pc, #212]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007104:	430b      	orrs	r3, r1
 8007106:	6513      	str	r3, [r2, #80]	@ 0x50
 8007108:	e003      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800710e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800711e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007122:	2300      	movs	r3, #0
 8007124:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007128:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800712c:	460b      	mov	r3, r1
 800712e:	4313      	orrs	r3, r2
 8007130:	d058      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007136:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800713a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800713e:	d033      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007140:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007144:	d82c      	bhi.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714a:	d02f      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800714c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007150:	d826      	bhi.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007152:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007156:	d02b      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007158:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800715c:	d820      	bhi.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800715e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007162:	d012      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007164:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007168:	d81a      	bhi.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d022      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800716e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007172:	d115      	bne.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007178:	3308      	adds	r3, #8
 800717a:	2101      	movs	r1, #1
 800717c:	4618      	mov	r0, r3
 800717e:	f001 ffb1 	bl	80090e4 <RCCEx_PLL2_Config>
 8007182:	4603      	mov	r3, r0
 8007184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007188:	e015      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718e:	3328      	adds	r3, #40	@ 0x28
 8007190:	2101      	movs	r1, #1
 8007192:	4618      	mov	r0, r3
 8007194:	f002 f858 	bl	8009248 <RCCEx_PLL3_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800719e:	e00a      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071a6:	e006      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80071a8:	bf00      	nop
 80071aa:	e004      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80071ac:	bf00      	nop
 80071ae:	e002      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80071b0:	bf00      	nop
 80071b2:	e000      	b.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80071b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10e      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80071be:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80071c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80071ce:	4a02      	ldr	r2, [pc, #8]	@ (80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80071d0:	430b      	orrs	r3, r1
 80071d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80071d4:	e006      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80071d6:	bf00      	nop
 80071d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80071f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071f4:	2300      	movs	r3, #0
 80071f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80071fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80071fe:	460b      	mov	r3, r1
 8007200:	4313      	orrs	r3, r2
 8007202:	d037      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800720a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800720e:	d00e      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007210:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007214:	d816      	bhi.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007216:	2b00      	cmp	r3, #0
 8007218:	d018      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800721a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800721e:	d111      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007220:	4bc4      	ldr	r3, [pc, #784]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007224:	4ac3      	ldr	r2, [pc, #780]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800722a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800722c:	e00f      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800722e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007232:	3308      	adds	r3, #8
 8007234:	2101      	movs	r1, #1
 8007236:	4618      	mov	r0, r3
 8007238:	f001 ff54 	bl	80090e4 <RCCEx_PLL2_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007242:	e004      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800724a:	e000      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800724c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800724e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10a      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007256:	4bb7      	ldr	r3, [pc, #732]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800725a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800725e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007264:	4ab3      	ldr	r2, [pc, #716]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007266:	430b      	orrs	r3, r1
 8007268:	6513      	str	r3, [r2, #80]	@ 0x50
 800726a:	e003      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007270:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007280:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007284:	2300      	movs	r3, #0
 8007286:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800728a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800728e:	460b      	mov	r3, r1
 8007290:	4313      	orrs	r3, r2
 8007292:	d039      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800729a:	2b03      	cmp	r3, #3
 800729c:	d81c      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800729e:	a201      	add	r2, pc, #4	@ (adr r2, 80072a4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	080072e1 	.word	0x080072e1
 80072a8:	080072b5 	.word	0x080072b5
 80072ac:	080072c3 	.word	0x080072c3
 80072b0:	080072e1 	.word	0x080072e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072b4:	4b9f      	ldr	r3, [pc, #636]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b8:	4a9e      	ldr	r2, [pc, #632]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072c0:	e00f      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c6:	3308      	adds	r3, #8
 80072c8:	2102      	movs	r1, #2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f001 ff0a 	bl	80090e4 <RCCEx_PLL2_Config>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072d6:	e004      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072de:	e000      	b.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80072e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10a      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80072ea:	4b92      	ldr	r3, [pc, #584]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072ee:	f023 0103 	bic.w	r1, r3, #3
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072f8:	4a8e      	ldr	r2, [pc, #568]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072fa:	430b      	orrs	r3, r1
 80072fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072fe:	e003      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007300:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007304:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007314:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007318:	2300      	movs	r3, #0
 800731a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800731e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007322:	460b      	mov	r3, r1
 8007324:	4313      	orrs	r3, r2
 8007326:	f000 8099 	beq.w	800745c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800732a:	4b83      	ldr	r3, [pc, #524]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a82      	ldr	r2, [pc, #520]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007334:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007336:	f7fa f9c7 	bl	80016c8 <HAL_GetTick>
 800733a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800733e:	e00b      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007340:	f7fa f9c2 	bl	80016c8 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b64      	cmp	r3, #100	@ 0x64
 800734e:	d903      	bls.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007356:	e005      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007358:	4b77      	ldr	r3, [pc, #476]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0ed      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007368:	2b00      	cmp	r3, #0
 800736a:	d173      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800736c:	4b71      	ldr	r3, [pc, #452]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800736e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007374:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007378:	4053      	eors	r3, r2
 800737a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800737e:	2b00      	cmp	r3, #0
 8007380:	d015      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007382:	4b6c      	ldr	r3, [pc, #432]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800738a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800738e:	4b69      	ldr	r3, [pc, #420]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007392:	4a68      	ldr	r2, [pc, #416]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007398:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800739a:	4b66      	ldr	r3, [pc, #408]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800739c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739e:	4a65      	ldr	r2, [pc, #404]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073a4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073a6:	4a63      	ldr	r2, [pc, #396]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ba:	d118      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073bc:	f7fa f984 	bl	80016c8 <HAL_GetTick>
 80073c0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073c4:	e00d      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c6:	f7fa f97f 	bl	80016c8 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80073d0:	1ad2      	subs	r2, r2, r3
 80073d2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d903      	bls.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80073e0:	e005      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073e2:	4b54      	ldr	r3, [pc, #336]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80073e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0eb      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80073ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d129      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007406:	d10e      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007408:	4b4a      	ldr	r3, [pc, #296]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007414:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007418:	091a      	lsrs	r2, r3, #4
 800741a:	4b48      	ldr	r3, [pc, #288]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800741c:	4013      	ands	r3, r2
 800741e:	4a45      	ldr	r2, [pc, #276]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007420:	430b      	orrs	r3, r1
 8007422:	6113      	str	r3, [r2, #16]
 8007424:	e005      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007426:	4b43      	ldr	r3, [pc, #268]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	4a42      	ldr	r2, [pc, #264]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800742c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007430:	6113      	str	r3, [r2, #16]
 8007432:	4b40      	ldr	r3, [pc, #256]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007434:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800743e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007442:	4a3c      	ldr	r2, [pc, #240]	@ (8007534 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007444:	430b      	orrs	r3, r1
 8007446:	6713      	str	r3, [r2, #112]	@ 0x70
 8007448:	e008      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800744a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800744e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8007452:	e003      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007458:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800745c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007464:	f002 0301 	and.w	r3, r2, #1
 8007468:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800746c:	2300      	movs	r3, #0
 800746e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007472:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007476:	460b      	mov	r3, r1
 8007478:	4313      	orrs	r3, r2
 800747a:	f000 808f 	beq.w	800759c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007482:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007484:	2b28      	cmp	r3, #40	@ 0x28
 8007486:	d871      	bhi.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007488:	a201      	add	r2, pc, #4	@ (adr r2, 8007490 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	08007575 	.word	0x08007575
 8007494:	0800756d 	.word	0x0800756d
 8007498:	0800756d 	.word	0x0800756d
 800749c:	0800756d 	.word	0x0800756d
 80074a0:	0800756d 	.word	0x0800756d
 80074a4:	0800756d 	.word	0x0800756d
 80074a8:	0800756d 	.word	0x0800756d
 80074ac:	0800756d 	.word	0x0800756d
 80074b0:	08007541 	.word	0x08007541
 80074b4:	0800756d 	.word	0x0800756d
 80074b8:	0800756d 	.word	0x0800756d
 80074bc:	0800756d 	.word	0x0800756d
 80074c0:	0800756d 	.word	0x0800756d
 80074c4:	0800756d 	.word	0x0800756d
 80074c8:	0800756d 	.word	0x0800756d
 80074cc:	0800756d 	.word	0x0800756d
 80074d0:	08007557 	.word	0x08007557
 80074d4:	0800756d 	.word	0x0800756d
 80074d8:	0800756d 	.word	0x0800756d
 80074dc:	0800756d 	.word	0x0800756d
 80074e0:	0800756d 	.word	0x0800756d
 80074e4:	0800756d 	.word	0x0800756d
 80074e8:	0800756d 	.word	0x0800756d
 80074ec:	0800756d 	.word	0x0800756d
 80074f0:	08007575 	.word	0x08007575
 80074f4:	0800756d 	.word	0x0800756d
 80074f8:	0800756d 	.word	0x0800756d
 80074fc:	0800756d 	.word	0x0800756d
 8007500:	0800756d 	.word	0x0800756d
 8007504:	0800756d 	.word	0x0800756d
 8007508:	0800756d 	.word	0x0800756d
 800750c:	0800756d 	.word	0x0800756d
 8007510:	08007575 	.word	0x08007575
 8007514:	0800756d 	.word	0x0800756d
 8007518:	0800756d 	.word	0x0800756d
 800751c:	0800756d 	.word	0x0800756d
 8007520:	0800756d 	.word	0x0800756d
 8007524:	0800756d 	.word	0x0800756d
 8007528:	0800756d 	.word	0x0800756d
 800752c:	0800756d 	.word	0x0800756d
 8007530:	08007575 	.word	0x08007575
 8007534:	58024400 	.word	0x58024400
 8007538:	58024800 	.word	0x58024800
 800753c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007544:	3308      	adds	r3, #8
 8007546:	2101      	movs	r1, #1
 8007548:	4618      	mov	r0, r3
 800754a:	f001 fdcb 	bl	80090e4 <RCCEx_PLL2_Config>
 800754e:	4603      	mov	r3, r0
 8007550:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007554:	e00f      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755a:	3328      	adds	r3, #40	@ 0x28
 800755c:	2101      	movs	r1, #1
 800755e:	4618      	mov	r0, r3
 8007560:	f001 fe72 	bl	8009248 <RCCEx_PLL3_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800756a:	e004      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007572:	e000      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007576:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10a      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800757e:	4bbf      	ldr	r3, [pc, #764]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007582:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800758a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800758c:	4abb      	ldr	r2, [pc, #748]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800758e:	430b      	orrs	r3, r1
 8007590:	6553      	str	r3, [r2, #84]	@ 0x54
 8007592:	e003      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007594:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007598:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f002 0302 	and.w	r3, r2, #2
 80075a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075ac:	2300      	movs	r3, #0
 80075ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4313      	orrs	r3, r2
 80075ba:	d041      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80075bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075c2:	2b05      	cmp	r3, #5
 80075c4:	d824      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80075c6:	a201      	add	r2, pc, #4	@ (adr r2, 80075cc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	08007619 	.word	0x08007619
 80075d0:	080075e5 	.word	0x080075e5
 80075d4:	080075fb 	.word	0x080075fb
 80075d8:	08007619 	.word	0x08007619
 80075dc:	08007619 	.word	0x08007619
 80075e0:	08007619 	.word	0x08007619
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e8:	3308      	adds	r3, #8
 80075ea:	2101      	movs	r1, #1
 80075ec:	4618      	mov	r0, r3
 80075ee:	f001 fd79 	bl	80090e4 <RCCEx_PLL2_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80075f8:	e00f      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fe:	3328      	adds	r3, #40	@ 0x28
 8007600:	2101      	movs	r1, #1
 8007602:	4618      	mov	r0, r3
 8007604:	f001 fe20 	bl	8009248 <RCCEx_PLL3_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800760e:	e004      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007616:	e000      	b.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800761a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007622:	4b96      	ldr	r3, [pc, #600]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007626:	f023 0107 	bic.w	r1, r3, #7
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007630:	4a92      	ldr	r2, [pc, #584]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007632:	430b      	orrs	r3, r1
 8007634:	6553      	str	r3, [r2, #84]	@ 0x54
 8007636:	e003      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800763c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	f002 0304 	and.w	r3, r2, #4
 800764c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007650:	2300      	movs	r3, #0
 8007652:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007656:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800765a:	460b      	mov	r3, r1
 800765c:	4313      	orrs	r3, r2
 800765e:	d044      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007668:	2b05      	cmp	r3, #5
 800766a:	d825      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800766c:	a201      	add	r2, pc, #4	@ (adr r2, 8007674 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800766e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007672:	bf00      	nop
 8007674:	080076c1 	.word	0x080076c1
 8007678:	0800768d 	.word	0x0800768d
 800767c:	080076a3 	.word	0x080076a3
 8007680:	080076c1 	.word	0x080076c1
 8007684:	080076c1 	.word	0x080076c1
 8007688:	080076c1 	.word	0x080076c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007690:	3308      	adds	r3, #8
 8007692:	2101      	movs	r1, #1
 8007694:	4618      	mov	r0, r3
 8007696:	f001 fd25 	bl	80090e4 <RCCEx_PLL2_Config>
 800769a:	4603      	mov	r3, r0
 800769c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076a0:	e00f      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a6:	3328      	adds	r3, #40	@ 0x28
 80076a8:	2101      	movs	r1, #1
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 fdcc 	bl	8009248 <RCCEx_PLL3_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076b6:	e004      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076be:	e000      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80076c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10b      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076ca:	4b6c      	ldr	r3, [pc, #432]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ce:	f023 0107 	bic.w	r1, r3, #7
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076da:	4a68      	ldr	r2, [pc, #416]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076dc:	430b      	orrs	r3, r1
 80076de:	6593      	str	r3, [r2, #88]	@ 0x58
 80076e0:	e003      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f002 0320 	and.w	r3, r2, #32
 80076f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076fa:	2300      	movs	r3, #0
 80076fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007700:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007704:	460b      	mov	r3, r1
 8007706:	4313      	orrs	r3, r2
 8007708:	d055      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800770a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007712:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007716:	d033      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800771c:	d82c      	bhi.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800771e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007722:	d02f      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007728:	d826      	bhi.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800772a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800772e:	d02b      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007730:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007734:	d820      	bhi.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800773a:	d012      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800773c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007740:	d81a      	bhi.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d022      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800774a:	d115      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800774c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007750:	3308      	adds	r3, #8
 8007752:	2100      	movs	r1, #0
 8007754:	4618      	mov	r0, r3
 8007756:	f001 fcc5 	bl	80090e4 <RCCEx_PLL2_Config>
 800775a:	4603      	mov	r3, r0
 800775c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007760:	e015      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007766:	3328      	adds	r3, #40	@ 0x28
 8007768:	2102      	movs	r1, #2
 800776a:	4618      	mov	r0, r3
 800776c:	f001 fd6c 	bl	8009248 <RCCEx_PLL3_Config>
 8007770:	4603      	mov	r3, r0
 8007772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007776:	e00a      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800777e:	e006      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007780:	bf00      	nop
 8007782:	e004      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007784:	bf00      	nop
 8007786:	e002      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007788:	bf00      	nop
 800778a:	e000      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800778c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800778e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10b      	bne.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007796:	4b39      	ldr	r3, [pc, #228]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800779a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800779e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077a6:	4a35      	ldr	r2, [pc, #212]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80077a8:	430b      	orrs	r3, r1
 80077aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80077ac:	e003      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80077c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077c6:	2300      	movs	r3, #0
 80077c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077cc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80077d0:	460b      	mov	r3, r1
 80077d2:	4313      	orrs	r3, r2
 80077d4:	d058      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80077d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80077e2:	d033      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80077e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80077e8:	d82c      	bhi.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80077ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ee:	d02f      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80077f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077f4:	d826      	bhi.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80077f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077fa:	d02b      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80077fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007800:	d820      	bhi.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007802:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007806:	d012      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800780c:	d81a      	bhi.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d022      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007816:	d115      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781c:	3308      	adds	r3, #8
 800781e:	2100      	movs	r1, #0
 8007820:	4618      	mov	r0, r3
 8007822:	f001 fc5f 	bl	80090e4 <RCCEx_PLL2_Config>
 8007826:	4603      	mov	r3, r0
 8007828:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800782c:	e015      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800782e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007832:	3328      	adds	r3, #40	@ 0x28
 8007834:	2102      	movs	r1, #2
 8007836:	4618      	mov	r0, r3
 8007838:	f001 fd06 	bl	8009248 <RCCEx_PLL3_Config>
 800783c:	4603      	mov	r3, r0
 800783e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007842:	e00a      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800784a:	e006      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800784c:	bf00      	nop
 800784e:	e004      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007850:	bf00      	nop
 8007852:	e002      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007854:	bf00      	nop
 8007856:	e000      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800785a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10e      	bne.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007862:	4b06      	ldr	r3, [pc, #24]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007866:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800786a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007872:	4a02      	ldr	r2, [pc, #8]	@ (800787c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007874:	430b      	orrs	r3, r1
 8007876:	6593      	str	r3, [r2, #88]	@ 0x58
 8007878:	e006      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800787a:	bf00      	nop
 800787c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007880:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007884:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007894:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007898:	2300      	movs	r3, #0
 800789a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800789e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80078a2:	460b      	mov	r3, r1
 80078a4:	4313      	orrs	r3, r2
 80078a6:	d055      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80078a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80078b4:	d033      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80078b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80078ba:	d82c      	bhi.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80078bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078c0:	d02f      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80078c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078c6:	d826      	bhi.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80078c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80078cc:	d02b      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80078ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80078d2:	d820      	bhi.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80078d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078d8:	d012      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80078da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078de:	d81a      	bhi.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d022      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80078e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e8:	d115      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ee:	3308      	adds	r3, #8
 80078f0:	2100      	movs	r1, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 fbf6 	bl	80090e4 <RCCEx_PLL2_Config>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80078fe:	e015      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007904:	3328      	adds	r3, #40	@ 0x28
 8007906:	2102      	movs	r1, #2
 8007908:	4618      	mov	r0, r3
 800790a:	f001 fc9d 	bl	8009248 <RCCEx_PLL3_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007914:	e00a      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800791c:	e006      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800791e:	bf00      	nop
 8007920:	e004      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007922:	bf00      	nop
 8007924:	e002      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007926:	bf00      	nop
 8007928:	e000      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800792a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800792c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10b      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007934:	4ba0      	ldr	r3, [pc, #640]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007938:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800793c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007940:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007944:	4a9c      	ldr	r2, [pc, #624]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007946:	430b      	orrs	r3, r1
 8007948:	6593      	str	r3, [r2, #88]	@ 0x58
 800794a:	e003      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007950:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	f002 0308 	and.w	r3, r2, #8
 8007960:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007964:	2300      	movs	r3, #0
 8007966:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800796a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800796e:	460b      	mov	r3, r1
 8007970:	4313      	orrs	r3, r2
 8007972:	d01e      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800797c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007980:	d10c      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007986:	3328      	adds	r3, #40	@ 0x28
 8007988:	2102      	movs	r1, #2
 800798a:	4618      	mov	r0, r3
 800798c:	f001 fc5c 	bl	8009248 <RCCEx_PLL3_Config>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800799c:	4b86      	ldr	r3, [pc, #536]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800799e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ac:	4a82      	ldr	r2, [pc, #520]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079ae:	430b      	orrs	r3, r1
 80079b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f002 0310 	and.w	r3, r2, #16
 80079be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80079c2:	2300      	movs	r3, #0
 80079c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079c8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80079cc:	460b      	mov	r3, r1
 80079ce:	4313      	orrs	r3, r2
 80079d0:	d01e      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80079d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079de:	d10c      	bne.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e4:	3328      	adds	r3, #40	@ 0x28
 80079e6:	2102      	movs	r1, #2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 fc2d 	bl	8009248 <RCCEx_PLL3_Config>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079fa:	4b6f      	ldr	r3, [pc, #444]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a0a:	4a6b      	ldr	r2, [pc, #428]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007a1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a1e:	2300      	movs	r3, #0
 8007a20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a22:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007a26:	460b      	mov	r3, r1
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	d03e      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a38:	d022      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007a3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a3e:	d81b      	bhi.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a48:	d00b      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007a4a:	e015      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a50:	3308      	adds	r3, #8
 8007a52:	2100      	movs	r1, #0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f001 fb45 	bl	80090e4 <RCCEx_PLL2_Config>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a60:	e00f      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a66:	3328      	adds	r3, #40	@ 0x28
 8007a68:	2102      	movs	r1, #2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f001 fbec 	bl	8009248 <RCCEx_PLL3_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a76:	e004      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007a7e:	e000      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10b      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a8e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a9a:	4a47      	ldr	r2, [pc, #284]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a9c:	430b      	orrs	r3, r1
 8007a9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007aa0:	e003      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007aa6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007ab6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ab8:	2300      	movs	r3, #0
 8007aba:	677b      	str	r3, [r7, #116]	@ 0x74
 8007abc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	d03b      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ace:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ad2:	d01f      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007ad4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ad8:	d818      	bhi.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8007ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ade:	d003      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007ae0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ae4:	d007      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007ae6:	e011      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae8:	4b33      	ldr	r3, [pc, #204]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aec:	4a32      	ldr	r2, [pc, #200]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007af4:	e00f      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afa:	3328      	adds	r3, #40	@ 0x28
 8007afc:	2101      	movs	r1, #1
 8007afe:	4618      	mov	r0, r3
 8007b00:	f001 fba2 	bl	8009248 <RCCEx_PLL3_Config>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b0a:	e004      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b12:	e000      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10b      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b1e:	4b26      	ldr	r3, [pc, #152]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b22:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b2e:	4a22      	ldr	r2, [pc, #136]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b30:	430b      	orrs	r3, r1
 8007b32:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b34:	e003      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b50:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007b54:	460b      	mov	r3, r1
 8007b56:	4313      	orrs	r3, r2
 8007b58:	d034      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b68:	d007      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007b6a:	e011      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b6c:	4b12      	ldr	r3, [pc, #72]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b70:	4a11      	ldr	r2, [pc, #68]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b78:	e00e      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7e:	3308      	adds	r3, #8
 8007b80:	2102      	movs	r1, #2
 8007b82:	4618      	mov	r0, r3
 8007b84:	f001 faae 	bl	80090e4 <RCCEx_PLL2_Config>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b8e:	e003      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10d      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ba0:	4b05      	ldr	r3, [pc, #20]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ba4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bae:	4a02      	ldr	r2, [pc, #8]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007bb4:	e006      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007bb6:	bf00      	nop
 8007bb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007bd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	667b      	str	r3, [r7, #100]	@ 0x64
 8007bd6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	d00c      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be4:	3328      	adds	r3, #40	@ 0x28
 8007be6:	2102      	movs	r1, #2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f001 fb2d 	bl	8009248 <RCCEx_PLL3_Config>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007c06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c08:	2300      	movs	r3, #0
 8007c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c0c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007c10:	460b      	mov	r3, r1
 8007c12:	4313      	orrs	r3, r2
 8007c14:	d036      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c20:	d018      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007c22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c26:	d811      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c2c:	d014      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c32:	d80b      	bhi.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d011      	beq.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007c38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c3c:	d106      	bne.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c3e:	4bb7      	ldr	r3, [pc, #732]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c42:	4ab6      	ldr	r2, [pc, #728]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007c4a:	e008      	b.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007c52:	e004      	b.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007c54:	bf00      	nop
 8007c56:	e002      	b.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007c58:	bf00      	nop
 8007c5a:	e000      	b.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10a      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c66:	4bad      	ldr	r3, [pc, #692]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c74:	4aa9      	ldr	r2, [pc, #676]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c76:	430b      	orrs	r3, r1
 8007c78:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c7a:	e003      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007c90:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c92:	2300      	movs	r3, #0
 8007c94:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c96:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	d009      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ca0:	4b9e      	ldr	r3, [pc, #632]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cae:	4a9b      	ldr	r2, [pc, #620]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cc6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	d009      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cd0:	4b92      	ldr	r3, [pc, #584]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cde:	4a8f      	ldr	r2, [pc, #572]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ce0:	430b      	orrs	r3, r1
 8007ce2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cf6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	d00e      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d00:	4b86      	ldr	r3, [pc, #536]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	4a85      	ldr	r2, [pc, #532]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d0a:	6113      	str	r3, [r2, #16]
 8007d0c:	4b83      	ldr	r3, [pc, #524]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d0e:	6919      	ldr	r1, [r3, #16]
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d18:	4a80      	ldr	r2, [pc, #512]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d1a:	430b      	orrs	r3, r1
 8007d1c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d30:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007d34:	460b      	mov	r3, r1
 8007d36:	4313      	orrs	r3, r2
 8007d38:	d009      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d3a:	4b78      	ldr	r3, [pc, #480]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d3e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d48:	4a74      	ldr	r2, [pc, #464]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d56:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d60:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007d64:	460b      	mov	r3, r1
 8007d66:	4313      	orrs	r3, r2
 8007d68:	d00a      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d6a:	4b6c      	ldr	r3, [pc, #432]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d6e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d7a:	4a68      	ldr	r2, [pc, #416]	@ (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007d7c:	430b      	orrs	r3, r1
 8007d7e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	2100      	movs	r1, #0
 8007d8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d92:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007d96:	460b      	mov	r3, r1
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	d011      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da0:	3308      	adds	r3, #8
 8007da2:	2100      	movs	r1, #0
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 f99d 	bl	80090e4 <RCCEx_PLL2_Config>
 8007daa:	4603      	mov	r3, r0
 8007dac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007db0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	2100      	movs	r1, #0
 8007dca:	6239      	str	r1, [r7, #32]
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dd2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	d011      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007de0:	3308      	adds	r3, #8
 8007de2:	2101      	movs	r1, #1
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 f97d 	bl	80090e4 <RCCEx_PLL2_Config>
 8007dea:	4603      	mov	r3, r0
 8007dec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007df0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007dfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e08:	2100      	movs	r1, #0
 8007e0a:	61b9      	str	r1, [r7, #24]
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	61fb      	str	r3, [r7, #28]
 8007e12:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007e16:	460b      	mov	r3, r1
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	d011      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e20:	3308      	adds	r3, #8
 8007e22:	2102      	movs	r1, #2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 f95d 	bl	80090e4 <RCCEx_PLL2_Config>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007e30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	2100      	movs	r1, #0
 8007e4a:	6139      	str	r1, [r7, #16]
 8007e4c:	f003 0308 	and.w	r3, r3, #8
 8007e50:	617b      	str	r3, [r7, #20]
 8007e52:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007e56:	460b      	mov	r3, r1
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	d011      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e60:	3328      	adds	r3, #40	@ 0x28
 8007e62:	2100      	movs	r1, #0
 8007e64:	4618      	mov	r0, r3
 8007e66:	f001 f9ef 	bl	8009248 <RCCEx_PLL3_Config>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007e70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007e7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e88:	2100      	movs	r1, #0
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e96:	460b      	mov	r3, r1
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	d011      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea0:	3328      	adds	r3, #40	@ 0x28
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f001 f9cf 	bl	8009248 <RCCEx_PLL3_Config>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007eb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ebc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	2100      	movs	r1, #0
 8007eca:	6039      	str	r1, [r7, #0]
 8007ecc:	f003 0320 	and.w	r3, r3, #32
 8007ed0:	607b      	str	r3, [r7, #4]
 8007ed2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	d011      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee0:	3328      	adds	r3, #40	@ 0x28
 8007ee2:	2102      	movs	r1, #2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f001 f9af 	bl	8009248 <RCCEx_PLL3_Config>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007ef0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007efc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007f00:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e000      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007f14:	46bd      	mov	sp, r7
 8007f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f1a:	bf00      	nop
 8007f1c:	58024400 	.word	0x58024400

08007f20 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b090      	sub	sp, #64	@ 0x40
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f2e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007f32:	430b      	orrs	r3, r1
 8007f34:	f040 8094 	bne.w	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007f38:	4b9b      	ldr	r3, [pc, #620]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	2b04      	cmp	r3, #4
 8007f46:	f200 8087 	bhi.w	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f65 	.word	0x08007f65
 8007f54:	08007f8d 	.word	0x08007f8d
 8007f58:	08007fb5 	.word	0x08007fb5
 8007f5c:	08008051 	.word	0x08008051
 8007f60:	08007fdd 	.word	0x08007fdd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f64:	4b90      	ldr	r3, [pc, #576]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f70:	d108      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 ff62 	bl	8008e40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f80:	f000 bc93 	b.w	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f84:	2300      	movs	r3, #0
 8007f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f88:	f000 bc8f 	b.w	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f8c:	4b86      	ldr	r3, [pc, #536]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f98:	d108      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f9a:	f107 0318 	add.w	r3, r7, #24
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fca6 	bl	80088f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fa8:	f000 bc7f 	b.w	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fb0:	f000 bc7b 	b.w	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fb4:	4b7c      	ldr	r3, [pc, #496]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fc0:	d108      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fc2:	f107 030c 	add.w	r3, r7, #12
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fde6 	bl	8008b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fd0:	f000 bc6b 	b.w	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd8:	f000 bc67 	b.w	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fdc:	4b72      	ldr	r3, [pc, #456]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fe4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fe6:	4b70      	ldr	r3, [pc, #448]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d10c      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d109      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	08db      	lsrs	r3, r3, #3
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	4a6a      	ldr	r2, [pc, #424]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008004:	fa22 f303 	lsr.w	r3, r2, r3
 8008008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800800a:	e01f      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800800c:	4b66      	ldr	r3, [pc, #408]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008018:	d106      	bne.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800801a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800801c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008020:	d102      	bne.n	8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008022:	4b63      	ldr	r3, [pc, #396]	@ (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008024:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008026:	e011      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008028:	4b5f      	ldr	r3, [pc, #380]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008034:	d106      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008038:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800803c:	d102      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800803e:	4b5d      	ldr	r3, [pc, #372]	@ (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008040:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008042:	e003      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008048:	f000 bc2f 	b.w	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800804c:	f000 bc2d 	b.w	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008050:	4b59      	ldr	r3, [pc, #356]	@ (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008054:	f000 bc29 	b.w	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008058:	2300      	movs	r3, #0
 800805a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800805c:	f000 bc25 	b.w	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008064:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008068:	430b      	orrs	r3, r1
 800806a:	f040 80a7 	bne.w	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800806e:	4b4e      	ldr	r3, [pc, #312]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008072:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008076:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800807e:	d054      	beq.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008082:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008086:	f200 808b 	bhi.w	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800808a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008090:	f000 8083 	beq.w	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800809a:	f200 8081 	bhi.w	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080a4:	d02f      	beq.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080ac:	d878      	bhi.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d004      	beq.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080ba:	d012      	beq.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80080bc:	e070      	b.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080be:	4b3a      	ldr	r3, [pc, #232]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080ca:	d107      	bne.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 feb5 	bl	8008e40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080da:	e3e6      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e0:	e3e3      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080e2:	4b31      	ldr	r3, [pc, #196]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080ee:	d107      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080f0:	f107 0318 	add.w	r3, r7, #24
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fbfb 	bl	80088f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080fe:	e3d4      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008104:	e3d1      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008106:	4b28      	ldr	r3, [pc, #160]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800810e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008112:	d107      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008114:	f107 030c 	add.w	r3, r7, #12
 8008118:	4618      	mov	r0, r3
 800811a:	f000 fd3d 	bl	8008b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008122:	e3c2      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008128:	e3bf      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800812a:	4b1f      	ldr	r3, [pc, #124]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800812c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800812e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008132:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008134:	4b1c      	ldr	r3, [pc, #112]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b04      	cmp	r3, #4
 800813e:	d10c      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8008140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008142:	2b00      	cmp	r3, #0
 8008144:	d109      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008146:	4b18      	ldr	r3, [pc, #96]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	08db      	lsrs	r3, r3, #3
 800814c:	f003 0303 	and.w	r3, r3, #3
 8008150:	4a16      	ldr	r2, [pc, #88]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8008152:	fa22 f303 	lsr.w	r3, r2, r3
 8008156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008158:	e01e      	b.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800815a:	4b13      	ldr	r3, [pc, #76]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008166:	d106      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800816e:	d102      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008170:	4b0f      	ldr	r3, [pc, #60]	@ (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008174:	e010      	b.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008176:	4b0c      	ldr	r3, [pc, #48]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800817e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008182:	d106      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800818a:	d102      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800818c:	4b09      	ldr	r3, [pc, #36]	@ (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800818e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008190:	e002      	b.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008196:	e388      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008198:	e387      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800819a:	4b07      	ldr	r3, [pc, #28]	@ (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800819c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800819e:	e384      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081a4:	e381      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80081a6:	bf00      	nop
 80081a8:	58024400 	.word	0x58024400
 80081ac:	03d09000 	.word	0x03d09000
 80081b0:	003d0900 	.word	0x003d0900
 80081b4:	007a1200 	.word	0x007a1200
 80081b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80081bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80081c4:	430b      	orrs	r3, r1
 80081c6:	f040 809c 	bne.w	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80081ca:	4b9e      	ldr	r3, [pc, #632]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081ce:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80081d2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80081d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081da:	d054      	beq.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80081dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80081e2:	f200 808b 	bhi.w	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80081e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081ec:	f000 8083 	beq.w	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80081f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081f6:	f200 8081 	bhi.w	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008200:	d02f      	beq.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008204:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008208:	d878      	bhi.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800820a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008216:	d012      	beq.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008218:	e070      	b.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800821a:	4b8a      	ldr	r3, [pc, #552]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008222:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008226:	d107      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fe07 	bl	8008e40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008236:	e338      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008238:	2300      	movs	r3, #0
 800823a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800823c:	e335      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800823e:	4b81      	ldr	r3, [pc, #516]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008246:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800824a:	d107      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800824c:	f107 0318 	add.w	r3, r7, #24
 8008250:	4618      	mov	r0, r3
 8008252:	f000 fb4d 	bl	80088f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800825a:	e326      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800825c:	2300      	movs	r3, #0
 800825e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008260:	e323      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008262:	4b78      	ldr	r3, [pc, #480]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800826a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800826e:	d107      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008270:	f107 030c 	add.w	r3, r7, #12
 8008274:	4618      	mov	r0, r3
 8008276:	f000 fc8f 	bl	8008b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800827e:	e314      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008284:	e311      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008286:	4b6f      	ldr	r3, [pc, #444]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800828a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800828e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008290:	4b6c      	ldr	r3, [pc, #432]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b04      	cmp	r3, #4
 800829a:	d10c      	bne.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800829c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082a2:	4b68      	ldr	r3, [pc, #416]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	08db      	lsrs	r3, r3, #3
 80082a8:	f003 0303 	and.w	r3, r3, #3
 80082ac:	4a66      	ldr	r2, [pc, #408]	@ (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80082ae:	fa22 f303 	lsr.w	r3, r2, r3
 80082b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082b4:	e01e      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082b6:	4b63      	ldr	r3, [pc, #396]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082c2:	d106      	bne.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80082c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082ca:	d102      	bne.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80082cc:	4b5f      	ldr	r3, [pc, #380]	@ (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80082ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082d0:	e010      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082d2:	4b5c      	ldr	r3, [pc, #368]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082de:	d106      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80082e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082e6:	d102      	bne.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80082e8:	4b59      	ldr	r3, [pc, #356]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082ec:	e002      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80082f2:	e2da      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80082f4:	e2d9      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80082f6:	4b57      	ldr	r3, [pc, #348]	@ (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80082f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082fa:	e2d6      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008300:	e2d3      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008302:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008306:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800830a:	430b      	orrs	r3, r1
 800830c:	f040 80a7 	bne.w	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008310:	4b4c      	ldr	r3, [pc, #304]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008314:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008318:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008320:	d055      	beq.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008324:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008328:	f200 8096 	bhi.w	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800832c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008332:	f000 8084 	beq.w	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008338:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800833c:	f200 808c 	bhi.w	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008346:	d030      	beq.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800834e:	f200 8083 	bhi.w	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008354:	2b00      	cmp	r3, #0
 8008356:	d004      	beq.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800835e:	d012      	beq.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8008360:	e07a      	b.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008362:	4b38      	ldr	r3, [pc, #224]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800836a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800836e:	d107      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008370:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008374:	4618      	mov	r0, r3
 8008376:	f000 fd63 	bl	8008e40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800837e:	e294      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008384:	e291      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008386:	4b2f      	ldr	r3, [pc, #188]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800838e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008392:	d107      	bne.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008394:	f107 0318 	add.w	r3, r7, #24
 8008398:	4618      	mov	r0, r3
 800839a:	f000 faa9 	bl	80088f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083a2:	e282      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a8:	e27f      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083aa:	4b26      	ldr	r3, [pc, #152]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083b6:	d107      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083b8:	f107 030c 	add.w	r3, r7, #12
 80083bc:	4618      	mov	r0, r3
 80083be:	f000 fbeb 	bl	8008b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c6:	e270      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083cc:	e26d      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80083d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80083d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083d8:	4b1a      	ldr	r3, [pc, #104]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d10c      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80083e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d109      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083ea:	4b16      	ldr	r3, [pc, #88]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	08db      	lsrs	r3, r3, #3
 80083f0:	f003 0303 	and.w	r3, r3, #3
 80083f4:	4a14      	ldr	r2, [pc, #80]	@ (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80083f6:	fa22 f303 	lsr.w	r3, r2, r3
 80083fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083fc:	e01e      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083fe:	4b11      	ldr	r3, [pc, #68]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800840a:	d106      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800840c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800840e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008412:	d102      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008414:	4b0d      	ldr	r3, [pc, #52]	@ (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008418:	e010      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800841a:	4b0a      	ldr	r3, [pc, #40]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008422:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008426:	d106      	bne.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800842a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800842e:	d102      	bne.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008430:	4b07      	ldr	r3, [pc, #28]	@ (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008434:	e002      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008436:	2300      	movs	r3, #0
 8008438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800843a:	e236      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800843c:	e235      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800843e:	4b05      	ldr	r3, [pc, #20]	@ (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008442:	e232      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008444:	58024400 	.word	0x58024400
 8008448:	03d09000 	.word	0x03d09000
 800844c:	003d0900 	.word	0x003d0900
 8008450:	007a1200 	.word	0x007a1200
 8008454:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800845c:	e225      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800845e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008462:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008466:	430b      	orrs	r3, r1
 8008468:	f040 8085 	bne.w	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800846c:	4b9c      	ldr	r3, [pc, #624]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800846e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008470:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008474:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800847c:	d06b      	beq.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800847e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008480:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008484:	d874      	bhi.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008488:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800848c:	d056      	beq.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800848e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008490:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008494:	d86c      	bhi.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008498:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800849c:	d03b      	beq.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800849e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80084a4:	d864      	bhi.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80084a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084ac:	d021      	beq.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80084ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084b4:	d85c      	bhi.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80084b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d004      	beq.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80084bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084c2:	d004      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80084c4:	e054      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80084c6:	f7fe fb5f 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 80084ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084cc:	e1ed      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084ce:	4b84      	ldr	r3, [pc, #528]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084da:	d107      	bne.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084dc:	f107 0318 	add.w	r3, r7, #24
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fa05 	bl	80088f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084ea:	e1de      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f0:	e1db      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084f2:	4b7b      	ldr	r3, [pc, #492]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084fe:	d107      	bne.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008500:	f107 030c 	add.w	r3, r7, #12
 8008504:	4618      	mov	r0, r3
 8008506:	f000 fb47 	bl	8008b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800850e:	e1cc      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008514:	e1c9      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008516:	4b72      	ldr	r3, [pc, #456]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0304 	and.w	r3, r3, #4
 800851e:	2b04      	cmp	r3, #4
 8008520:	d109      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008522:	4b6f      	ldr	r3, [pc, #444]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	08db      	lsrs	r3, r3, #3
 8008528:	f003 0303 	and.w	r3, r3, #3
 800852c:	4a6d      	ldr	r2, [pc, #436]	@ (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800852e:	fa22 f303 	lsr.w	r3, r2, r3
 8008532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008534:	e1b9      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853a:	e1b6      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800853c:	4b68      	ldr	r3, [pc, #416]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008548:	d102      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800854a:	4b67      	ldr	r3, [pc, #412]	@ (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800854c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800854e:	e1ac      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008554:	e1a9      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008556:	4b62      	ldr	r3, [pc, #392]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800855e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008562:	d102      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008564:	4b61      	ldr	r3, [pc, #388]	@ (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008568:	e19f      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800856e:	e19c      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008574:	e199      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800857a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800857e:	430b      	orrs	r3, r1
 8008580:	d173      	bne.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008582:	4b57      	ldr	r3, [pc, #348]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008586:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800858a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008592:	d02f      	beq.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8008594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800859a:	d863      	bhi.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800859c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d004      	beq.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80085a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085a8:	d012      	beq.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80085aa:	e05b      	b.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085ac:	4b4c      	ldr	r3, [pc, #304]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085b8:	d107      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ba:	f107 0318 	add.w	r3, r7, #24
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 f996 	bl	80088f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c8:	e16f      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ce:	e16c      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085d0:	4b43      	ldr	r3, [pc, #268]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085dc:	d107      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085de:	f107 030c 	add.w	r3, r7, #12
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fad8 	bl	8008b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ec:	e15d      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f2:	e15a      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085f4:	4b3a      	ldr	r3, [pc, #232]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80085f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085fe:	4b38      	ldr	r3, [pc, #224]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0304 	and.w	r3, r3, #4
 8008606:	2b04      	cmp	r3, #4
 8008608:	d10c      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800860a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860c:	2b00      	cmp	r3, #0
 800860e:	d109      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008610:	4b33      	ldr	r3, [pc, #204]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	08db      	lsrs	r3, r3, #3
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	4a32      	ldr	r2, [pc, #200]	@ (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800861c:	fa22 f303 	lsr.w	r3, r2, r3
 8008620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008622:	e01e      	b.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008624:	4b2e      	ldr	r3, [pc, #184]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800862c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008630:	d106      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008634:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008638:	d102      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800863a:	4b2b      	ldr	r3, [pc, #172]	@ (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800863c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800863e:	e010      	b.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008640:	4b27      	ldr	r3, [pc, #156]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800864c:	d106      	bne.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800864e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008654:	d102      	bne.n	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008656:	4b25      	ldr	r3, [pc, #148]	@ (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800865a:	e002      	b.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008660:	e123      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008662:	e122      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008664:	2300      	movs	r3, #0
 8008666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008668:	e11f      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800866a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800866e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008672:	430b      	orrs	r3, r1
 8008674:	d13c      	bne.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008676:	4b1a      	ldr	r3, [pc, #104]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800867a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800867e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800868c:	d012      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800868e:	e023      	b.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008690:	4b13      	ldr	r3, [pc, #76]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008698:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800869c:	d107      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800869e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fbcc 	bl	8008e40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ac:	e0fd      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b2:	e0fa      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086b4:	4b0a      	ldr	r3, [pc, #40]	@ (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086c0:	d107      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086c2:	f107 0318 	add.w	r3, r7, #24
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 f912 	bl	80088f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d0:	e0eb      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d6:	e0e8      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086dc:	e0e5      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086de:	bf00      	nop
 80086e0:	58024400 	.word	0x58024400
 80086e4:	03d09000 	.word	0x03d09000
 80086e8:	003d0900 	.word	0x003d0900
 80086ec:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80086f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086f4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80086f8:	430b      	orrs	r3, r1
 80086fa:	f040 8085 	bne.w	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80086fe:	4b6d      	ldr	r3, [pc, #436]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008702:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008706:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800870e:	d06b      	beq.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008712:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008716:	d874      	bhi.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800871e:	d056      	beq.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008726:	d86c      	bhi.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800872e:	d03b      	beq.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008732:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008736:	d864      	bhi.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800873e:	d021      	beq.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008746:	d85c      	bhi.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874a:	2b00      	cmp	r3, #0
 800874c:	d004      	beq.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800874e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008754:	d004      	beq.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008756:	e054      	b.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008758:	f000 f8b4 	bl	80088c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800875c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800875e:	e0a4      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008760:	4b54      	ldr	r3, [pc, #336]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008768:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800876c:	d107      	bne.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800876e:	f107 0318 	add.w	r3, r7, #24
 8008772:	4618      	mov	r0, r3
 8008774:	f000 f8bc 	bl	80088f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800877c:	e095      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800877e:	2300      	movs	r3, #0
 8008780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008782:	e092      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008784:	4b4b      	ldr	r3, [pc, #300]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800878c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008790:	d107      	bne.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008792:	f107 030c 	add.w	r3, r7, #12
 8008796:	4618      	mov	r0, r3
 8008798:	f000 f9fe 	bl	8008b98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a0:	e083      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a6:	e080      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087a8:	4b42      	ldr	r3, [pc, #264]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0304 	and.w	r3, r3, #4
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d109      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087b4:	4b3f      	ldr	r3, [pc, #252]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	08db      	lsrs	r3, r3, #3
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	4a3e      	ldr	r2, [pc, #248]	@ (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80087c0:	fa22 f303 	lsr.w	r3, r2, r3
 80087c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c6:	e070      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087cc:	e06d      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80087ce:	4b39      	ldr	r3, [pc, #228]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087da:	d102      	bne.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80087dc:	4b37      	ldr	r3, [pc, #220]	@ (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80087de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e0:	e063      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e6:	e060      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087e8:	4b32      	ldr	r3, [pc, #200]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087f4:	d102      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80087f6:	4b32      	ldr	r3, [pc, #200]	@ (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80087f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087fa:	e056      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008800:	e053      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008806:	e050      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800880c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008810:	430b      	orrs	r3, r1
 8008812:	d148      	bne.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008814:	4b27      	ldr	r3, [pc, #156]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008818:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800881c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800881e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008824:	d02a      	beq.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800882c:	d838      	bhi.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800882e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800883a:	d00d      	beq.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800883c:	e030      	b.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800883e:	4b1d      	ldr	r3, [pc, #116]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800884a:	d102      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800884c:	4b1c      	ldr	r3, [pc, #112]	@ (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008850:	e02b      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008856:	e028      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008858:	4b16      	ldr	r3, [pc, #88]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008860:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008864:	d107      	bne.n	8008876 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fae8 	bl	8008e40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008874:	e019      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008876:	2300      	movs	r3, #0
 8008878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800887a:	e016      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800887c:	4b0d      	ldr	r3, [pc, #52]	@ (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008884:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008888:	d107      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800888a:	f107 0318 	add.w	r3, r7, #24
 800888e:	4618      	mov	r0, r3
 8008890:	f000 f82e 	bl	80088f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008898:	e007      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800889e:	e004      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80088a0:	2300      	movs	r3, #0
 80088a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088a4:	e001      	b.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80088aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3740      	adds	r7, #64	@ 0x40
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	58024400 	.word	0x58024400
 80088b8:	03d09000 	.word	0x03d09000
 80088bc:	003d0900 	.word	0x003d0900
 80088c0:	007a1200 	.word	0x007a1200

080088c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80088c8:	f7fe f92e 	bl	8006b28 <HAL_RCC_GetHCLKFreq>
 80088cc:	4602      	mov	r2, r0
 80088ce:	4b06      	ldr	r3, [pc, #24]	@ (80088e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	091b      	lsrs	r3, r3, #4
 80088d4:	f003 0307 	and.w	r3, r3, #7
 80088d8:	4904      	ldr	r1, [pc, #16]	@ (80088ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80088da:	5ccb      	ldrb	r3, [r1, r3]
 80088dc:	f003 031f 	and.w	r3, r3, #31
 80088e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	58024400 	.word	0x58024400
 80088ec:	0800bbd4 	.word	0x0800bbd4

080088f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b089      	sub	sp, #36	@ 0x24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088f8:	4ba1      	ldr	r3, [pc, #644]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008902:	4b9f      	ldr	r3, [pc, #636]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008906:	0b1b      	lsrs	r3, r3, #12
 8008908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800890c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800890e:	4b9c      	ldr	r3, [pc, #624]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008912:	091b      	lsrs	r3, r3, #4
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800891a:	4b99      	ldr	r3, [pc, #612]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800891c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800891e:	08db      	lsrs	r3, r3, #3
 8008920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	fb02 f303 	mul.w	r3, r2, r3
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008932:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 8111 	beq.w	8008b60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	2b02      	cmp	r3, #2
 8008942:	f000 8083 	beq.w	8008a4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2b02      	cmp	r3, #2
 800894a:	f200 80a1 	bhi.w	8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d056      	beq.n	8008a08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800895a:	e099      	b.n	8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800895c:	4b88      	ldr	r3, [pc, #544]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0320 	and.w	r3, r3, #32
 8008964:	2b00      	cmp	r3, #0
 8008966:	d02d      	beq.n	80089c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008968:	4b85      	ldr	r3, [pc, #532]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	08db      	lsrs	r3, r3, #3
 800896e:	f003 0303 	and.w	r3, r3, #3
 8008972:	4a84      	ldr	r2, [pc, #528]	@ (8008b84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008974:	fa22 f303 	lsr.w	r3, r2, r3
 8008978:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	ee07 3a90 	vmov	s15, r3
 8008980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008992:	4b7b      	ldr	r3, [pc, #492]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089c2:	e087      	b.n	8008ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	ee07 3a90 	vmov	s15, r3
 80089ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008b8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80089d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d6:	4b6a      	ldr	r3, [pc, #424]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089de:	ee07 3a90 	vmov	s15, r3
 80089e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a06:	e065      	b.n	8008ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	ee07 3a90 	vmov	s15, r3
 8008a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a1a:	4b59      	ldr	r3, [pc, #356]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a22:	ee07 3a90 	vmov	s15, r3
 8008a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a4a:	e043      	b.n	8008ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5e:	4b48      	ldr	r3, [pc, #288]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a8e:	e021      	b.n	8008ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aa2:	4b37      	ldr	r3, [pc, #220]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ab6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008b88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ad2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad8:	0a5b      	lsrs	r3, r3, #9
 8008ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008aea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8008af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008afa:	ee17 2a90 	vmov	r2, s15
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b02:	4b1f      	ldr	r3, [pc, #124]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b06:	0c1b      	lsrs	r3, r3, #16
 8008b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b0c:	ee07 3a90 	vmov	s15, r3
 8008b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b28:	ee17 2a90 	vmov	r2, s15
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b30:	4b13      	ldr	r3, [pc, #76]	@ (8008b80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b34:	0e1b      	lsrs	r3, r3, #24
 8008b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b56:	ee17 2a90 	vmov	r2, s15
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b5e:	e008      	b.n	8008b72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	609a      	str	r2, [r3, #8]
}
 8008b72:	bf00      	nop
 8008b74:	3724      	adds	r7, #36	@ 0x24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	58024400 	.word	0x58024400
 8008b84:	03d09000 	.word	0x03d09000
 8008b88:	46000000 	.word	0x46000000
 8008b8c:	4c742400 	.word	0x4c742400
 8008b90:	4a742400 	.word	0x4a742400
 8008b94:	4af42400 	.word	0x4af42400

08008b98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b089      	sub	sp, #36	@ 0x24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ba0:	4ba1      	ldr	r3, [pc, #644]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba4:	f003 0303 	and.w	r3, r3, #3
 8008ba8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008baa:	4b9f      	ldr	r3, [pc, #636]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bae:	0d1b      	lsrs	r3, r3, #20
 8008bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008bb6:	4b9c      	ldr	r3, [pc, #624]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bba:	0a1b      	lsrs	r3, r3, #8
 8008bbc:	f003 0301 	and.w	r3, r3, #1
 8008bc0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008bc2:	4b99      	ldr	r3, [pc, #612]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bc6:	08db      	lsrs	r3, r3, #3
 8008bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	fb02 f303 	mul.w	r3, r2, r3
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 8111 	beq.w	8008e08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	f000 8083 	beq.w	8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	f200 80a1 	bhi.w	8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d056      	beq.n	8008cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c02:	e099      	b.n	8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c04:	4b88      	ldr	r3, [pc, #544]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0320 	and.w	r3, r3, #32
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d02d      	beq.n	8008c6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c10:	4b85      	ldr	r3, [pc, #532]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	08db      	lsrs	r3, r3, #3
 8008c16:	f003 0303 	and.w	r3, r3, #3
 8008c1a:	4a84      	ldr	r2, [pc, #528]	@ (8008e2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c20:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	ee07 3a90 	vmov	s15, r3
 8008c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	ee07 3a90 	vmov	s15, r3
 8008c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c6a:	e087      	b.n	8008d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	ee07 3a90 	vmov	s15, r3
 8008c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cae:	e065      	b.n	8008d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	ee07 3a90 	vmov	s15, r3
 8008cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc2:	4b59      	ldr	r3, [pc, #356]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cf2:	e043      	b.n	8008d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cfe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d06:	4b48      	ldr	r3, [pc, #288]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d0e:	ee07 3a90 	vmov	s15, r3
 8008d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d36:	e021      	b.n	8008d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	ee07 3a90 	vmov	s15, r3
 8008d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d4a:	4b37      	ldr	r3, [pc, #220]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d52:	ee07 3a90 	vmov	s15, r3
 8008d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d80:	0a5b      	lsrs	r3, r3, #9
 8008d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008da2:	ee17 2a90 	vmov	r2, s15
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008daa:	4b1f      	ldr	r3, [pc, #124]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dae:	0c1b      	lsrs	r3, r3, #16
 8008db0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008db4:	ee07 3a90 	vmov	s15, r3
 8008db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dd0:	ee17 2a90 	vmov	r2, s15
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008dd8:	4b13      	ldr	r3, [pc, #76]	@ (8008e28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ddc:	0e1b      	lsrs	r3, r3, #24
 8008dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008df2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dfe:	ee17 2a90 	vmov	r2, s15
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e06:	e008      	b.n	8008e1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	609a      	str	r2, [r3, #8]
}
 8008e1a:	bf00      	nop
 8008e1c:	3724      	adds	r7, #36	@ 0x24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	58024400 	.word	0x58024400
 8008e2c:	03d09000 	.word	0x03d09000
 8008e30:	46000000 	.word	0x46000000
 8008e34:	4c742400 	.word	0x4c742400
 8008e38:	4a742400 	.word	0x4a742400
 8008e3c:	4af42400 	.word	0x4af42400

08008e40 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b089      	sub	sp, #36	@ 0x24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e48:	4ba0      	ldr	r3, [pc, #640]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4c:	f003 0303 	and.w	r3, r3, #3
 8008e50:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008e52:	4b9e      	ldr	r3, [pc, #632]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e56:	091b      	lsrs	r3, r3, #4
 8008e58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e5c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008e5e:	4b9b      	ldr	r3, [pc, #620]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e68:	4b98      	ldr	r3, [pc, #608]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e6c:	08db      	lsrs	r3, r3, #3
 8008e6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	fb02 f303 	mul.w	r3, r2, r3
 8008e78:	ee07 3a90 	vmov	s15, r3
 8008e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e80:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 8111 	beq.w	80090ae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	f000 8083 	beq.w	8008f9a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	f200 80a1 	bhi.w	8008fde <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d056      	beq.n	8008f56 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008ea8:	e099      	b.n	8008fde <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008eaa:	4b88      	ldr	r3, [pc, #544]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0320 	and.w	r3, r3, #32
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d02d      	beq.n	8008f12 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eb6:	4b85      	ldr	r3, [pc, #532]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	08db      	lsrs	r3, r3, #3
 8008ebc:	f003 0303 	and.w	r3, r3, #3
 8008ec0:	4a83      	ldr	r2, [pc, #524]	@ (80090d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	ee07 3a90 	vmov	s15, r3
 8008ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	ee07 3a90 	vmov	s15, r3
 8008ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee0:	4b7a      	ldr	r3, [pc, #488]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee8:	ee07 3a90 	vmov	s15, r3
 8008eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ef4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80090d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008efc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f0c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f10:	e087      	b.n	8009022 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	ee07 3a90 	vmov	s15, r3
 8008f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80090d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f24:	4b69      	ldr	r3, [pc, #420]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f2c:	ee07 3a90 	vmov	s15, r3
 8008f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f34:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f38:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80090d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f54:	e065      	b.n	8009022 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	ee07 3a90 	vmov	s15, r3
 8008f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f60:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80090dc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f68:	4b58      	ldr	r3, [pc, #352]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f70:	ee07 3a90 	vmov	s15, r3
 8008f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f7c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80090d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f98:	e043      	b.n	8009022 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	ee07 3a90 	vmov	s15, r3
 8008fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80090e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fac:	4b47      	ldr	r3, [pc, #284]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb4:	ee07 3a90 	vmov	s15, r3
 8008fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fc0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80090d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fdc:	e021      	b.n	8009022 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	ee07 3a90 	vmov	s15, r3
 8008fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80090d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ff0:	4b36      	ldr	r3, [pc, #216]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff8:	ee07 3a90 	vmov	s15, r3
 8008ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009000:	ed97 6a03 	vldr	s12, [r7, #12]
 8009004:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80090d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800900c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009010:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009020:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009022:	4b2a      	ldr	r3, [pc, #168]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009026:	0a5b      	lsrs	r3, r3, #9
 8009028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800902c:	ee07 3a90 	vmov	s15, r3
 8009030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009034:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800903c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009048:	ee17 2a90 	vmov	r2, s15
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009050:	4b1e      	ldr	r3, [pc, #120]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009054:	0c1b      	lsrs	r3, r3, #16
 8009056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009062:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009066:	ee37 7a87 	vadd.f32	s14, s15, s14
 800906a:	edd7 6a07 	vldr	s13, [r7, #28]
 800906e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009076:	ee17 2a90 	vmov	r2, s15
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800907e:	4b13      	ldr	r3, [pc, #76]	@ (80090cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009082:	0e1b      	lsrs	r3, r3, #24
 8009084:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009088:	ee07 3a90 	vmov	s15, r3
 800908c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009090:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009094:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009098:	edd7 6a07 	vldr	s13, [r7, #28]
 800909c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090a4:	ee17 2a90 	vmov	r2, s15
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80090ac:	e008      	b.n	80090c0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	609a      	str	r2, [r3, #8]
}
 80090c0:	bf00      	nop
 80090c2:	3724      	adds	r7, #36	@ 0x24
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	58024400 	.word	0x58024400
 80090d0:	03d09000 	.word	0x03d09000
 80090d4:	46000000 	.word	0x46000000
 80090d8:	4c742400 	.word	0x4c742400
 80090dc:	4a742400 	.word	0x4a742400
 80090e0:	4af42400 	.word	0x4af42400

080090e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80090f2:	4b53      	ldr	r3, [pc, #332]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80090f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d101      	bne.n	8009102 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e099      	b.n	8009236 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009102:	4b4f      	ldr	r3, [pc, #316]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a4e      	ldr	r2, [pc, #312]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 8009108:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800910c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800910e:	f7f8 fadb 	bl	80016c8 <HAL_GetTick>
 8009112:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009114:	e008      	b.n	8009128 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009116:	f7f8 fad7 	bl	80016c8 <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	2b02      	cmp	r3, #2
 8009122:	d901      	bls.n	8009128 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e086      	b.n	8009236 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009128:	4b45      	ldr	r3, [pc, #276]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1f0      	bne.n	8009116 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009134:	4b42      	ldr	r3, [pc, #264]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 8009136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009138:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	031b      	lsls	r3, r3, #12
 8009142:	493f      	ldr	r1, [pc, #252]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 8009144:	4313      	orrs	r3, r2
 8009146:	628b      	str	r3, [r1, #40]	@ 0x28
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	3b01      	subs	r3, #1
 800914e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	3b01      	subs	r3, #1
 8009158:	025b      	lsls	r3, r3, #9
 800915a:	b29b      	uxth	r3, r3
 800915c:	431a      	orrs	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	3b01      	subs	r3, #1
 8009164:	041b      	lsls	r3, r3, #16
 8009166:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800916a:	431a      	orrs	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	3b01      	subs	r3, #1
 8009172:	061b      	lsls	r3, r3, #24
 8009174:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009178:	4931      	ldr	r1, [pc, #196]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 800917a:	4313      	orrs	r3, r2
 800917c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800917e:	4b30      	ldr	r3, [pc, #192]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 8009180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009182:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	695b      	ldr	r3, [r3, #20]
 800918a:	492d      	ldr	r1, [pc, #180]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 800918c:	4313      	orrs	r3, r2
 800918e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009190:	4b2b      	ldr	r3, [pc, #172]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 8009192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009194:	f023 0220 	bic.w	r2, r3, #32
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	4928      	ldr	r1, [pc, #160]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80091a2:	4b27      	ldr	r3, [pc, #156]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80091a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a6:	4a26      	ldr	r2, [pc, #152]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80091a8:	f023 0310 	bic.w	r3, r3, #16
 80091ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80091ae:	4b24      	ldr	r3, [pc, #144]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80091b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091b2:	4b24      	ldr	r3, [pc, #144]	@ (8009244 <RCCEx_PLL2_Config+0x160>)
 80091b4:	4013      	ands	r3, r2
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	69d2      	ldr	r2, [r2, #28]
 80091ba:	00d2      	lsls	r2, r2, #3
 80091bc:	4920      	ldr	r1, [pc, #128]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80091c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80091c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80091c8:	f043 0310 	orr.w	r3, r3, #16
 80091cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d106      	bne.n	80091e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80091d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80091d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d8:	4a19      	ldr	r2, [pc, #100]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80091da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091e0:	e00f      	b.n	8009202 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d106      	bne.n	80091f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80091e8:	4b15      	ldr	r3, [pc, #84]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80091ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ec:	4a14      	ldr	r2, [pc, #80]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80091ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80091f4:	e005      	b.n	8009202 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80091f6:	4b12      	ldr	r3, [pc, #72]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80091f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fa:	4a11      	ldr	r2, [pc, #68]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 80091fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009200:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009202:	4b0f      	ldr	r3, [pc, #60]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a0e      	ldr	r2, [pc, #56]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 8009208:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800920c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800920e:	f7f8 fa5b 	bl	80016c8 <HAL_GetTick>
 8009212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009214:	e008      	b.n	8009228 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009216:	f7f8 fa57 	bl	80016c8 <HAL_GetTick>
 800921a:	4602      	mov	r2, r0
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	2b02      	cmp	r3, #2
 8009222:	d901      	bls.n	8009228 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009224:	2303      	movs	r3, #3
 8009226:	e006      	b.n	8009236 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009228:	4b05      	ldr	r3, [pc, #20]	@ (8009240 <RCCEx_PLL2_Config+0x15c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d0f0      	beq.n	8009216 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009234:	7bfb      	ldrb	r3, [r7, #15]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	58024400 	.word	0x58024400
 8009244:	ffff0007 	.word	0xffff0007

08009248 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009256:	4b53      	ldr	r3, [pc, #332]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 8009258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	2b03      	cmp	r3, #3
 8009260:	d101      	bne.n	8009266 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e099      	b.n	800939a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009266:	4b4f      	ldr	r3, [pc, #316]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a4e      	ldr	r2, [pc, #312]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 800926c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009272:	f7f8 fa29 	bl	80016c8 <HAL_GetTick>
 8009276:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009278:	e008      	b.n	800928c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800927a:	f7f8 fa25 	bl	80016c8 <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	2b02      	cmp	r3, #2
 8009286:	d901      	bls.n	800928c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e086      	b.n	800939a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800928c:	4b45      	ldr	r3, [pc, #276]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1f0      	bne.n	800927a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009298:	4b42      	ldr	r3, [pc, #264]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 800929a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	051b      	lsls	r3, r3, #20
 80092a6:	493f      	ldr	r1, [pc, #252]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	025b      	lsls	r3, r3, #9
 80092be:	b29b      	uxth	r3, r3
 80092c0:	431a      	orrs	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	041b      	lsls	r3, r3, #16
 80092ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	061b      	lsls	r3, r3, #24
 80092d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80092dc:	4931      	ldr	r1, [pc, #196]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 80092de:	4313      	orrs	r3, r2
 80092e0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80092e2:	4b30      	ldr	r3, [pc, #192]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 80092e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	492d      	ldr	r1, [pc, #180]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 80092f0:	4313      	orrs	r3, r2
 80092f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80092f4:	4b2b      	ldr	r3, [pc, #172]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 80092f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	4928      	ldr	r1, [pc, #160]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 8009302:	4313      	orrs	r3, r2
 8009304:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009306:	4b27      	ldr	r3, [pc, #156]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 8009308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930a:	4a26      	ldr	r2, [pc, #152]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 800930c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009310:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009312:	4b24      	ldr	r3, [pc, #144]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 8009314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009316:	4b24      	ldr	r3, [pc, #144]	@ (80093a8 <RCCEx_PLL3_Config+0x160>)
 8009318:	4013      	ands	r3, r2
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	69d2      	ldr	r2, [r2, #28]
 800931e:	00d2      	lsls	r2, r2, #3
 8009320:	4920      	ldr	r1, [pc, #128]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 8009322:	4313      	orrs	r3, r2
 8009324:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009326:	4b1f      	ldr	r3, [pc, #124]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 8009328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932a:	4a1e      	ldr	r2, [pc, #120]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 800932c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009330:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d106      	bne.n	8009346 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009338:	4b1a      	ldr	r3, [pc, #104]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 800933a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800933c:	4a19      	ldr	r2, [pc, #100]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 800933e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009342:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009344:	e00f      	b.n	8009366 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d106      	bne.n	800935a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800934c:	4b15      	ldr	r3, [pc, #84]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 800934e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009350:	4a14      	ldr	r2, [pc, #80]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 8009352:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009356:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009358:	e005      	b.n	8009366 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800935a:	4b12      	ldr	r3, [pc, #72]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 800935c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935e:	4a11      	ldr	r2, [pc, #68]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 8009360:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009364:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009366:	4b0f      	ldr	r3, [pc, #60]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a0e      	ldr	r2, [pc, #56]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 800936c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009372:	f7f8 f9a9 	bl	80016c8 <HAL_GetTick>
 8009376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009378:	e008      	b.n	800938c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800937a:	f7f8 f9a5 	bl	80016c8 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	2b02      	cmp	r3, #2
 8009386:	d901      	bls.n	800938c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e006      	b.n	800939a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800938c:	4b05      	ldr	r3, [pc, #20]	@ (80093a4 <RCCEx_PLL3_Config+0x15c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d0f0      	beq.n	800937a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	58024400 	.word	0x58024400
 80093a8:	ffff0007 	.word	0xffff0007

080093ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e10f      	b.n	80095de <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a87      	ldr	r2, [pc, #540]	@ (80095e8 <HAL_SPI_Init+0x23c>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00f      	beq.n	80093ee <HAL_SPI_Init+0x42>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a86      	ldr	r2, [pc, #536]	@ (80095ec <HAL_SPI_Init+0x240>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d00a      	beq.n	80093ee <HAL_SPI_Init+0x42>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a84      	ldr	r2, [pc, #528]	@ (80095f0 <HAL_SPI_Init+0x244>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d005      	beq.n	80093ee <HAL_SPI_Init+0x42>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	2b0f      	cmp	r3, #15
 80093e8:	d901      	bls.n	80093ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e0f7      	b.n	80095de <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fd08 	bl	8009e04 <SPI_GetPacketSize>
 80093f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a7b      	ldr	r2, [pc, #492]	@ (80095e8 <HAL_SPI_Init+0x23c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00c      	beq.n	800941a <HAL_SPI_Init+0x6e>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a79      	ldr	r2, [pc, #484]	@ (80095ec <HAL_SPI_Init+0x240>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d007      	beq.n	800941a <HAL_SPI_Init+0x6e>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a78      	ldr	r2, [pc, #480]	@ (80095f0 <HAL_SPI_Init+0x244>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d002      	beq.n	800941a <HAL_SPI_Init+0x6e>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b08      	cmp	r3, #8
 8009418:	d811      	bhi.n	800943e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800941e:	4a72      	ldr	r2, [pc, #456]	@ (80095e8 <HAL_SPI_Init+0x23c>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d009      	beq.n	8009438 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a70      	ldr	r2, [pc, #448]	@ (80095ec <HAL_SPI_Init+0x240>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d004      	beq.n	8009438 <HAL_SPI_Init+0x8c>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a6f      	ldr	r2, [pc, #444]	@ (80095f0 <HAL_SPI_Init+0x244>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d104      	bne.n	8009442 <HAL_SPI_Init+0x96>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2b10      	cmp	r3, #16
 800943c:	d901      	bls.n	8009442 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e0cd      	b.n	80095de <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b00      	cmp	r3, #0
 800944c:	d106      	bne.n	800945c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7f7 fe88 	bl	800116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2202      	movs	r2, #2
 8009460:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 0201 	bic.w	r2, r2, #1
 8009472:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800947e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009488:	d119      	bne.n	80094be <HAL_SPI_Init+0x112>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009492:	d103      	bne.n	800949c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009498:	2b00      	cmp	r3, #0
 800949a:	d008      	beq.n	80094ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10c      	bne.n	80094be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80094a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094ac:	d107      	bne.n	80094be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80094bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00f      	beq.n	80094ea <HAL_SPI_Init+0x13e>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	2b06      	cmp	r3, #6
 80094d0:	d90b      	bls.n	80094ea <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	430a      	orrs	r2, r1
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	e007      	b.n	80094fa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80094f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	69da      	ldr	r2, [r3, #28]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009502:	431a      	orrs	r2, r3
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	431a      	orrs	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800950c:	ea42 0103 	orr.w	r1, r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	430a      	orrs	r2, r1
 800951a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009524:	431a      	orrs	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952a:	431a      	orrs	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	699b      	ldr	r3, [r3, #24]
 8009530:	431a      	orrs	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	431a      	orrs	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	695b      	ldr	r3, [r3, #20]
 800953c:	431a      	orrs	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	431a      	orrs	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800954e:	431a      	orrs	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	431a      	orrs	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800955a:	ea42 0103 	orr.w	r1, r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d113      	bne.n	800959a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009584:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009598:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f022 0201 	bic.w	r2, r2, #1
 80095a8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	40013000 	.word	0x40013000
 80095ec:	40003800 	.word	0x40003800
 80095f0:	40003c00 	.word	0x40003c00

080095f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b08e      	sub	sp, #56	@ 0x38
 80095f8:	af02      	add	r7, sp, #8
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3320      	adds	r3, #32
 8009608:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	3330      	adds	r3, #48	@ 0x30
 8009610:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009616:	095b      	lsrs	r3, r3, #5
 8009618:	b29b      	uxth	r3, r3
 800961a:	3301      	adds	r3, #1
 800961c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800961e:	f7f8 f853 	bl	80016c8 <HAL_GetTick>
 8009622:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8009624:	887b      	ldrh	r3, [r7, #2]
 8009626:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8009628:	887b      	ldrh	r3, [r7, #2]
 800962a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	d001      	beq.n	800963c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8009638:	2302      	movs	r3, #2
 800963a:	e310      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d005      	beq.n	800964e <HAL_SPI_TransmitReceive+0x5a>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <HAL_SPI_TransmitReceive+0x5a>
 8009648:	887b      	ldrh	r3, [r7, #2]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e305      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009658:	2b01      	cmp	r3, #1
 800965a:	d101      	bne.n	8009660 <HAL_SPI_TransmitReceive+0x6c>
 800965c:	2302      	movs	r3, #2
 800965e:	e2fe      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x66a>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2205      	movs	r2, #5
 800966c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	887a      	ldrh	r2, [r7, #2]
 8009682:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	887a      	ldrh	r2, [r7, #2]
 800968a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	887a      	ldrh	r2, [r7, #2]
 8009698:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	887a      	ldrh	r2, [r7, #2]
 80096a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80096be:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a70      	ldr	r2, [pc, #448]	@ (8009888 <HAL_SPI_TransmitReceive+0x294>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d009      	beq.n	80096de <HAL_SPI_TransmitReceive+0xea>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a6f      	ldr	r2, [pc, #444]	@ (800988c <HAL_SPI_TransmitReceive+0x298>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d004      	beq.n	80096de <HAL_SPI_TransmitReceive+0xea>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a6d      	ldr	r2, [pc, #436]	@ (8009890 <HAL_SPI_TransmitReceive+0x29c>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d102      	bne.n	80096e4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80096de:	2310      	movs	r3, #16
 80096e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096e2:	e001      	b.n	80096e8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80096e4:	2308      	movs	r3, #8
 80096e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	4b69      	ldr	r3, [pc, #420]	@ (8009894 <HAL_SPI_TransmitReceive+0x2a0>)
 80096f0:	4013      	ands	r3, r2
 80096f2:	8879      	ldrh	r1, [r7, #2]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	6812      	ldr	r2, [r2, #0]
 80096f8:	430b      	orrs	r3, r1
 80096fa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f042 0201 	orr.w	r2, r2, #1
 800970a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009714:	d107      	bne.n	8009726 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009724:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	2b0f      	cmp	r3, #15
 800972c:	f240 80a2 	bls.w	8009874 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8009730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009732:	089b      	lsrs	r3, r3, #2
 8009734:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009736:	e094      	b.n	8009862 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	f003 0302 	and.w	r3, r3, #2
 8009742:	2b02      	cmp	r3, #2
 8009744:	d120      	bne.n	8009788 <HAL_SPI_TransmitReceive+0x194>
 8009746:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009748:	2b00      	cmp	r3, #0
 800974a:	d01d      	beq.n	8009788 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800974c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800974e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009752:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009754:	429a      	cmp	r2, r3
 8009756:	d217      	bcs.n	8009788 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6812      	ldr	r2, [r2, #0]
 8009762:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009768:	1d1a      	adds	r2, r3, #4
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009774:	b29b      	uxth	r3, r3
 8009776:	3b01      	subs	r3, #1
 8009778:	b29a      	uxth	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009786:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009790:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009792:	2b00      	cmp	r3, #0
 8009794:	d065      	beq.n	8009862 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	695b      	ldr	r3, [r3, #20]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d118      	bne.n	80097d6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80097ae:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097b4:	1d1a      	adds	r2, r3, #4
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	3b01      	subs	r3, #1
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80097d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80097d4:	e045      	b.n	8009862 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80097d6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80097d8:	8bfb      	ldrh	r3, [r7, #30]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d21d      	bcs.n	800981a <HAL_SPI_TransmitReceive+0x226>
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d018      	beq.n	800981a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80097f2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097f8:	1d1a      	adds	r2, r3, #4
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	b29a      	uxth	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009816:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009818:	e023      	b.n	8009862 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800981a:	f7f7 ff55 	bl	80016c8 <HAL_GetTick>
 800981e:	4602      	mov	r2, r0
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009826:	429a      	cmp	r2, r3
 8009828:	d803      	bhi.n	8009832 <HAL_SPI_TransmitReceive+0x23e>
 800982a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009830:	d102      	bne.n	8009838 <HAL_SPI_TransmitReceive+0x244>
 8009832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009834:	2b00      	cmp	r3, #0
 8009836:	d114      	bne.n	8009862 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 fa15 	bl	8009c68 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009844:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e1fd      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009862:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009864:	2b00      	cmp	r3, #0
 8009866:	f47f af67 	bne.w	8009738 <HAL_SPI_TransmitReceive+0x144>
 800986a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800986c:	2b00      	cmp	r3, #0
 800986e:	f47f af63 	bne.w	8009738 <HAL_SPI_TransmitReceive+0x144>
 8009872:	e1ce      	b.n	8009c12 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	2b07      	cmp	r3, #7
 800987a:	f240 81c2 	bls.w	8009c02 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800987e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009880:	085b      	lsrs	r3, r3, #1
 8009882:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009884:	e0c9      	b.n	8009a1a <HAL_SPI_TransmitReceive+0x426>
 8009886:	bf00      	nop
 8009888:	40013000 	.word	0x40013000
 800988c:	40003800 	.word	0x40003800
 8009890:	40003c00 	.word	0x40003c00
 8009894:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	f003 0302 	and.w	r3, r3, #2
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d11f      	bne.n	80098e6 <HAL_SPI_TransmitReceive+0x2f2>
 80098a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d01c      	beq.n	80098e6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80098ac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80098ae:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80098b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d216      	bcs.n	80098e6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098bc:	881a      	ldrh	r2, [r3, #0]
 80098be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098c6:	1c9a      	adds	r2, r3, #2
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3b01      	subs	r3, #1
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80098e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80098ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 8092 	beq.w	8009a1a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b01      	cmp	r3, #1
 8009902:	d118      	bne.n	8009936 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009908:	6a3a      	ldr	r2, [r7, #32]
 800990a:	8812      	ldrh	r2, [r2, #0]
 800990c:	b292      	uxth	r2, r2
 800990e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009914:	1c9a      	adds	r2, r3, #2
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009920:	b29b      	uxth	r3, r3
 8009922:	3b01      	subs	r3, #1
 8009924:	b29a      	uxth	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009932:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009934:	e071      	b.n	8009a1a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009936:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009938:	8bfb      	ldrh	r3, [r7, #30]
 800993a:	429a      	cmp	r2, r3
 800993c:	d228      	bcs.n	8009990 <HAL_SPI_TransmitReceive+0x39c>
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d023      	beq.n	8009990 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800994c:	6a3a      	ldr	r2, [r7, #32]
 800994e:	8812      	ldrh	r2, [r2, #0]
 8009950:	b292      	uxth	r2, r2
 8009952:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009958:	1c9a      	adds	r2, r3, #2
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009962:	6a3a      	ldr	r2, [r7, #32]
 8009964:	8812      	ldrh	r2, [r2, #0]
 8009966:	b292      	uxth	r2, r2
 8009968:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800996e:	1c9a      	adds	r2, r3, #2
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800997a:	b29b      	uxth	r3, r3
 800997c:	3b02      	subs	r3, #2
 800997e:	b29a      	uxth	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800998c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800998e:	e044      	b.n	8009a1a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009990:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009992:	2b01      	cmp	r3, #1
 8009994:	d11d      	bne.n	80099d2 <HAL_SPI_TransmitReceive+0x3de>
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d018      	beq.n	80099d2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099a4:	6a3a      	ldr	r2, [r7, #32]
 80099a6:	8812      	ldrh	r2, [r2, #0]
 80099a8:	b292      	uxth	r2, r2
 80099aa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099b0:	1c9a      	adds	r2, r3, #2
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80099bc:	b29b      	uxth	r3, r3
 80099be:	3b01      	subs	r3, #1
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80099ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 80099d0:	e023      	b.n	8009a1a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099d2:	f7f7 fe79 	bl	80016c8 <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099de:	429a      	cmp	r2, r3
 80099e0:	d803      	bhi.n	80099ea <HAL_SPI_TransmitReceive+0x3f6>
 80099e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e8:	d102      	bne.n	80099f0 <HAL_SPI_TransmitReceive+0x3fc>
 80099ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d114      	bne.n	8009a1a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 f939 	bl	8009c68 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e121      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009a1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f47f af3b 	bne.w	8009898 <HAL_SPI_TransmitReceive+0x2a4>
 8009a22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f47f af37 	bne.w	8009898 <HAL_SPI_TransmitReceive+0x2a4>
 8009a2a:	e0f2      	b.n	8009c12 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	f003 0302 	and.w	r3, r3, #2
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d121      	bne.n	8009a7e <HAL_SPI_TransmitReceive+0x48a>
 8009a3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d01e      	beq.n	8009a7e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8009a40:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009a42:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8009a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a46:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d218      	bcs.n	8009a7e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3320      	adds	r3, #32
 8009a56:	7812      	ldrb	r2, [r2, #0]
 8009a58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a7c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8009a86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 80ba 	beq.w	8009c02 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	695b      	ldr	r3, [r3, #20]
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d11b      	bne.n	8009ad4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009aa8:	7812      	ldrb	r2, [r2, #0]
 8009aaa:	b2d2      	uxtb	r2, r2
 8009aac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ab2:	1c5a      	adds	r2, r3, #1
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ad0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009ad2:	e096      	b.n	8009c02 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009ad4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009ad6:	8bfb      	ldrh	r3, [r7, #30]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d24a      	bcs.n	8009b72 <HAL_SPI_TransmitReceive+0x57e>
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d045      	beq.n	8009b72 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009af2:	7812      	ldrb	r2, [r2, #0]
 8009af4:	b2d2      	uxtb	r2, r2
 8009af6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b0e:	7812      	ldrb	r2, [r2, #0]
 8009b10:	b2d2      	uxtb	r2, r2
 8009b12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b18:	1c5a      	adds	r2, r3, #1
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b2a:	7812      	ldrb	r2, [r2, #0]
 8009b2c:	b2d2      	uxtb	r2, r2
 8009b2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b34:	1c5a      	adds	r2, r3, #1
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b46:	7812      	ldrb	r2, [r2, #0]
 8009b48:	b2d2      	uxtb	r2, r2
 8009b4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	3b04      	subs	r3, #4
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b6e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009b70:	e047      	b.n	8009c02 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8009b72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d820      	bhi.n	8009bba <HAL_SPI_TransmitReceive+0x5c6>
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d01b      	beq.n	8009bba <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b8e:	7812      	ldrb	r2, [r2, #0]
 8009b90:	b2d2      	uxtb	r2, r2
 8009b92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b98:	1c5a      	adds	r2, r3, #1
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bb6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009bb8:	e023      	b.n	8009c02 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bba:	f7f7 fd85 	bl	80016c8 <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d803      	bhi.n	8009bd2 <HAL_SPI_TransmitReceive+0x5de>
 8009bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd0:	d102      	bne.n	8009bd8 <HAL_SPI_TransmitReceive+0x5e4>
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d114      	bne.n	8009c02 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 f845 	bl	8009c68 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009be4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e02d      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009c02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f47f af11 	bne.w	8009a2c <HAL_SPI_TransmitReceive+0x438>
 8009c0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f47f af0d 	bne.w	8009a2c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2108      	movs	r1, #8
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 f8c3 	bl	8009da8 <SPI_WaitOnFlagUntilTimeout>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d007      	beq.n	8009c38 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c2e:	f043 0220 	orr.w	r2, r3, #32
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f815 	bl	8009c68 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e000      	b.n	8009c5e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
  }
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3730      	adds	r7, #48	@ 0x30
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop

08009c68 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	699a      	ldr	r2, [r3, #24]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0208 	orr.w	r2, r2, #8
 8009c86:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	699a      	ldr	r2, [r3, #24]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0210 	orr.w	r2, r2, #16
 8009c96:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f022 0201 	bic.w	r2, r2, #1
 8009ca6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6919      	ldr	r1, [r3, #16]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8009da4 <SPI_CloseTransfer+0x13c>)
 8009cb4:	400b      	ands	r3, r1
 8009cb6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	689a      	ldr	r2, [r3, #8]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009cc6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b04      	cmp	r3, #4
 8009cd2:	d014      	beq.n	8009cfe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f003 0320 	and.w	r3, r3, #32
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00f      	beq.n	8009cfe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ce4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	699a      	ldr	r2, [r3, #24]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f042 0220 	orr.w	r2, r2, #32
 8009cfc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d014      	beq.n	8009d34 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00f      	beq.n	8009d34 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d1a:	f043 0204 	orr.w	r2, r3, #4
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	699a      	ldr	r2, [r3, #24]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d32:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00f      	beq.n	8009d5e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d44:	f043 0201 	orr.w	r2, r3, #1
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	699a      	ldr	r2, [r3, #24]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d5c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00f      	beq.n	8009d88 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d6e:	f043 0208 	orr.w	r2, r3, #8
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	699a      	ldr	r2, [r3, #24]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d86:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009d98:	bf00      	nop
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	fffffc90 	.word	0xfffffc90

08009da8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	603b      	str	r3, [r7, #0]
 8009db4:	4613      	mov	r3, r2
 8009db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009db8:	e010      	b.n	8009ddc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dba:	f7f7 fc85 	bl	80016c8 <HAL_GetTick>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	683a      	ldr	r2, [r7, #0]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d803      	bhi.n	8009dd2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd0:	d102      	bne.n	8009dd8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e00f      	b.n	8009dfc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	695a      	ldr	r2, [r3, #20]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	4013      	ands	r3, r2
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	bf0c      	ite	eq
 8009dec:	2301      	moveq	r3, #1
 8009dee:	2300      	movne	r3, #0
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	461a      	mov	r2, r3
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d0df      	beq.n	8009dba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e10:	095b      	lsrs	r3, r3, #5
 8009e12:	3301      	adds	r3, #1
 8009e14:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	3307      	adds	r3, #7
 8009e22:	08db      	lsrs	r3, r3, #3
 8009e24:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	fb02 f303 	mul.w	r3, r2, r3
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e049      	b.n	8009ee0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d106      	bne.n	8009e66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7f7 fa11 	bl	8001288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3304      	adds	r3, #4
 8009e76:	4619      	mov	r1, r3
 8009e78:	4610      	mov	r0, r2
 8009e7a:	f000 f92d 	bl	800a0d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d101      	bne.n	8009f04 <HAL_TIM_ConfigClockSource+0x1c>
 8009f00:	2302      	movs	r3, #2
 8009f02:	e0dc      	b.n	800a0be <HAL_TIM_ConfigClockSource+0x1d6>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f1c:	68ba      	ldr	r2, [r7, #8]
 8009f1e:	4b6a      	ldr	r3, [pc, #424]	@ (800a0c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a64      	ldr	r2, [pc, #400]	@ (800a0cc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	f000 80a9 	beq.w	800a092 <HAL_TIM_ConfigClockSource+0x1aa>
 8009f40:	4a62      	ldr	r2, [pc, #392]	@ (800a0cc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	f200 80ae 	bhi.w	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f48:	4a61      	ldr	r2, [pc, #388]	@ (800a0d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	f000 80a1 	beq.w	800a092 <HAL_TIM_ConfigClockSource+0x1aa>
 8009f50:	4a5f      	ldr	r2, [pc, #380]	@ (800a0d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	f200 80a6 	bhi.w	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f58:	4a5e      	ldr	r2, [pc, #376]	@ (800a0d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	f000 8099 	beq.w	800a092 <HAL_TIM_ConfigClockSource+0x1aa>
 8009f60:	4a5c      	ldr	r2, [pc, #368]	@ (800a0d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	f200 809e 	bhi.w	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009f6c:	f000 8091 	beq.w	800a092 <HAL_TIM_ConfigClockSource+0x1aa>
 8009f70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009f74:	f200 8096 	bhi.w	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f7c:	f000 8089 	beq.w	800a092 <HAL_TIM_ConfigClockSource+0x1aa>
 8009f80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f84:	f200 808e 	bhi.w	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f8c:	d03e      	beq.n	800a00c <HAL_TIM_ConfigClockSource+0x124>
 8009f8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f92:	f200 8087 	bhi.w	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f9a:	f000 8086 	beq.w	800a0aa <HAL_TIM_ConfigClockSource+0x1c2>
 8009f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fa2:	d87f      	bhi.n	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fa4:	2b70      	cmp	r3, #112	@ 0x70
 8009fa6:	d01a      	beq.n	8009fde <HAL_TIM_ConfigClockSource+0xf6>
 8009fa8:	2b70      	cmp	r3, #112	@ 0x70
 8009faa:	d87b      	bhi.n	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fac:	2b60      	cmp	r3, #96	@ 0x60
 8009fae:	d050      	beq.n	800a052 <HAL_TIM_ConfigClockSource+0x16a>
 8009fb0:	2b60      	cmp	r3, #96	@ 0x60
 8009fb2:	d877      	bhi.n	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fb4:	2b50      	cmp	r3, #80	@ 0x50
 8009fb6:	d03c      	beq.n	800a032 <HAL_TIM_ConfigClockSource+0x14a>
 8009fb8:	2b50      	cmp	r3, #80	@ 0x50
 8009fba:	d873      	bhi.n	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fbc:	2b40      	cmp	r3, #64	@ 0x40
 8009fbe:	d058      	beq.n	800a072 <HAL_TIM_ConfigClockSource+0x18a>
 8009fc0:	2b40      	cmp	r3, #64	@ 0x40
 8009fc2:	d86f      	bhi.n	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fc4:	2b30      	cmp	r3, #48	@ 0x30
 8009fc6:	d064      	beq.n	800a092 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fc8:	2b30      	cmp	r3, #48	@ 0x30
 8009fca:	d86b      	bhi.n	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fcc:	2b20      	cmp	r3, #32
 8009fce:	d060      	beq.n	800a092 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fd0:	2b20      	cmp	r3, #32
 8009fd2:	d867      	bhi.n	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d05c      	beq.n	800a092 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fd8:	2b10      	cmp	r3, #16
 8009fda:	d05a      	beq.n	800a092 <HAL_TIM_ConfigClockSource+0x1aa>
 8009fdc:	e062      	b.n	800a0a4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009fee:	f000 f99d 	bl	800a32c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a000:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	609a      	str	r2, [r3, #8]
      break;
 800a00a:	e04f      	b.n	800a0ac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a01c:	f000 f986 	bl	800a32c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	689a      	ldr	r2, [r3, #8]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a02e:	609a      	str	r2, [r3, #8]
      break;
 800a030:	e03c      	b.n	800a0ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a03e:	461a      	mov	r2, r3
 800a040:	f000 f8f6 	bl	800a230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2150      	movs	r1, #80	@ 0x50
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 f950 	bl	800a2f0 <TIM_ITRx_SetConfig>
      break;
 800a050:	e02c      	b.n	800a0ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a05e:	461a      	mov	r2, r3
 800a060:	f000 f915 	bl	800a28e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2160      	movs	r1, #96	@ 0x60
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 f940 	bl	800a2f0 <TIM_ITRx_SetConfig>
      break;
 800a070:	e01c      	b.n	800a0ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a07e:	461a      	mov	r2, r3
 800a080:	f000 f8d6 	bl	800a230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2140      	movs	r1, #64	@ 0x40
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 f930 	bl	800a2f0 <TIM_ITRx_SetConfig>
      break;
 800a090:	e00c      	b.n	800a0ac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4619      	mov	r1, r3
 800a09c:	4610      	mov	r0, r2
 800a09e:	f000 f927 	bl	800a2f0 <TIM_ITRx_SetConfig>
      break;
 800a0a2:	e003      	b.n	800a0ac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a0a8:	e000      	b.n	800a0ac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a0aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	ffceff88 	.word	0xffceff88
 800a0cc:	00100040 	.word	0x00100040
 800a0d0:	00100030 	.word	0x00100030
 800a0d4:	00100020 	.word	0x00100020

0800a0d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a47      	ldr	r2, [pc, #284]	@ (800a208 <TIM_Base_SetConfig+0x130>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d013      	beq.n	800a118 <TIM_Base_SetConfig+0x40>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0f6:	d00f      	beq.n	800a118 <TIM_Base_SetConfig+0x40>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a44      	ldr	r2, [pc, #272]	@ (800a20c <TIM_Base_SetConfig+0x134>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d00b      	beq.n	800a118 <TIM_Base_SetConfig+0x40>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a43      	ldr	r2, [pc, #268]	@ (800a210 <TIM_Base_SetConfig+0x138>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d007      	beq.n	800a118 <TIM_Base_SetConfig+0x40>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a42      	ldr	r2, [pc, #264]	@ (800a214 <TIM_Base_SetConfig+0x13c>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d003      	beq.n	800a118 <TIM_Base_SetConfig+0x40>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a41      	ldr	r2, [pc, #260]	@ (800a218 <TIM_Base_SetConfig+0x140>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d108      	bne.n	800a12a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a11e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	4313      	orrs	r3, r2
 800a128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a36      	ldr	r2, [pc, #216]	@ (800a208 <TIM_Base_SetConfig+0x130>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d027      	beq.n	800a182 <TIM_Base_SetConfig+0xaa>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a138:	d023      	beq.n	800a182 <TIM_Base_SetConfig+0xaa>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a33      	ldr	r2, [pc, #204]	@ (800a20c <TIM_Base_SetConfig+0x134>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d01f      	beq.n	800a182 <TIM_Base_SetConfig+0xaa>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a32      	ldr	r2, [pc, #200]	@ (800a210 <TIM_Base_SetConfig+0x138>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d01b      	beq.n	800a182 <TIM_Base_SetConfig+0xaa>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a31      	ldr	r2, [pc, #196]	@ (800a214 <TIM_Base_SetConfig+0x13c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d017      	beq.n	800a182 <TIM_Base_SetConfig+0xaa>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a30      	ldr	r2, [pc, #192]	@ (800a218 <TIM_Base_SetConfig+0x140>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d013      	beq.n	800a182 <TIM_Base_SetConfig+0xaa>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a2f      	ldr	r2, [pc, #188]	@ (800a21c <TIM_Base_SetConfig+0x144>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d00f      	beq.n	800a182 <TIM_Base_SetConfig+0xaa>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a2e      	ldr	r2, [pc, #184]	@ (800a220 <TIM_Base_SetConfig+0x148>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d00b      	beq.n	800a182 <TIM_Base_SetConfig+0xaa>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a2d      	ldr	r2, [pc, #180]	@ (800a224 <TIM_Base_SetConfig+0x14c>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d007      	beq.n	800a182 <TIM_Base_SetConfig+0xaa>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a2c      	ldr	r2, [pc, #176]	@ (800a228 <TIM_Base_SetConfig+0x150>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d003      	beq.n	800a182 <TIM_Base_SetConfig+0xaa>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a2b      	ldr	r2, [pc, #172]	@ (800a22c <TIM_Base_SetConfig+0x154>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d108      	bne.n	800a194 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	4313      	orrs	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	689a      	ldr	r2, [r3, #8]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a14      	ldr	r2, [pc, #80]	@ (800a208 <TIM_Base_SetConfig+0x130>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d00f      	beq.n	800a1da <TIM_Base_SetConfig+0x102>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a16      	ldr	r2, [pc, #88]	@ (800a218 <TIM_Base_SetConfig+0x140>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d00b      	beq.n	800a1da <TIM_Base_SetConfig+0x102>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a15      	ldr	r2, [pc, #84]	@ (800a21c <TIM_Base_SetConfig+0x144>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d007      	beq.n	800a1da <TIM_Base_SetConfig+0x102>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a14      	ldr	r2, [pc, #80]	@ (800a220 <TIM_Base_SetConfig+0x148>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d003      	beq.n	800a1da <TIM_Base_SetConfig+0x102>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a13      	ldr	r2, [pc, #76]	@ (800a224 <TIM_Base_SetConfig+0x14c>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d103      	bne.n	800a1e2 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	691a      	ldr	r2, [r3, #16]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f043 0204 	orr.w	r2, r3, #4
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	601a      	str	r2, [r3, #0]
}
 800a1fa:	bf00      	nop
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	40010000 	.word	0x40010000
 800a20c:	40000400 	.word	0x40000400
 800a210:	40000800 	.word	0x40000800
 800a214:	40000c00 	.word	0x40000c00
 800a218:	40010400 	.word	0x40010400
 800a21c:	40014000 	.word	0x40014000
 800a220:	40014400 	.word	0x40014400
 800a224:	40014800 	.word	0x40014800
 800a228:	4000e000 	.word	0x4000e000
 800a22c:	4000e400 	.word	0x4000e400

0800a230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6a1b      	ldr	r3, [r3, #32]
 800a240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	f023 0201 	bic.w	r2, r3, #1
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a25a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	4313      	orrs	r3, r2
 800a264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f023 030a 	bic.w	r3, r3, #10
 800a26c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	4313      	orrs	r3, r2
 800a274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	621a      	str	r2, [r3, #32]
}
 800a282:	bf00      	nop
 800a284:	371c      	adds	r7, #28
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a28e:	b480      	push	{r7}
 800a290:	b087      	sub	sp, #28
 800a292:	af00      	add	r7, sp, #0
 800a294:	60f8      	str	r0, [r7, #12]
 800a296:	60b9      	str	r1, [r7, #8]
 800a298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6a1b      	ldr	r3, [r3, #32]
 800a2a4:	f023 0210 	bic.w	r2, r3, #16
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a2b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	031b      	lsls	r3, r3, #12
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a2ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	011b      	lsls	r3, r3, #4
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	621a      	str	r2, [r3, #32]
}
 800a2e2:	bf00      	nop
 800a2e4:	371c      	adds	r7, #28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
	...

0800a2f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	4b09      	ldr	r3, [pc, #36]	@ (800a328 <TIM_ITRx_SetConfig+0x38>)
 800a304:	4013      	ands	r3, r2
 800a306:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	f043 0307 	orr.w	r3, r3, #7
 800a312:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	609a      	str	r2, [r3, #8]
}
 800a31a:	bf00      	nop
 800a31c:	3714      	adds	r7, #20
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	ffcfff8f 	.word	0xffcfff8f

0800a32c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	021a      	lsls	r2, r3, #8
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	431a      	orrs	r2, r3
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	4313      	orrs	r3, r2
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	4313      	orrs	r3, r2
 800a358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	609a      	str	r2, [r3, #8]
}
 800a360:	bf00      	nop
 800a362:	371c      	adds	r7, #28
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d101      	bne.n	800a384 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a380:	2302      	movs	r3, #2
 800a382:	e077      	b.n	800a474 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2202      	movs	r2, #2
 800a390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a35      	ldr	r2, [pc, #212]	@ (800a480 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d004      	beq.n	800a3b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a34      	ldr	r2, [pc, #208]	@ (800a484 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d108      	bne.n	800a3ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a3be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a25      	ldr	r2, [pc, #148]	@ (800a480 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d02c      	beq.n	800a448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3f6:	d027      	beq.n	800a448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a22      	ldr	r2, [pc, #136]	@ (800a488 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d022      	beq.n	800a448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a21      	ldr	r2, [pc, #132]	@ (800a48c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d01d      	beq.n	800a448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a1f      	ldr	r2, [pc, #124]	@ (800a490 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d018      	beq.n	800a448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a1a      	ldr	r2, [pc, #104]	@ (800a484 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d013      	beq.n	800a448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a1b      	ldr	r2, [pc, #108]	@ (800a494 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d00e      	beq.n	800a448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a1a      	ldr	r2, [pc, #104]	@ (800a498 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d009      	beq.n	800a448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a18      	ldr	r2, [pc, #96]	@ (800a49c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d004      	beq.n	800a448 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a17      	ldr	r2, [pc, #92]	@ (800a4a0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d10c      	bne.n	800a462 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a44e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	4313      	orrs	r3, r2
 800a458:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	40010000 	.word	0x40010000
 800a484:	40010400 	.word	0x40010400
 800a488:	40000400 	.word	0x40000400
 800a48c:	40000800 	.word	0x40000800
 800a490:	40000c00 	.word	0x40000c00
 800a494:	40001800 	.word	0x40001800
 800a498:	40014000 	.word	0x40014000
 800a49c:	4000e000 	.word	0x4000e000
 800a4a0:	4000e400 	.word	0x4000e400

0800a4a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e042      	b.n	800a53c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d106      	bne.n	800a4ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f7f6 feff 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2224      	movs	r2, #36	@ 0x24
 800a4d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f022 0201 	bic.w	r2, r2, #1
 800a4e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 ff22 	bl	800b338 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f8b3 	bl	800a660 <UART_SetConfig>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d101      	bne.n	800a504 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e01b      	b.n	800a53c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a512:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	689a      	ldr	r2, [r3, #8]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a522:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f042 0201 	orr.w	r2, r2, #1
 800a532:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 ffa1 	bl	800b47c <UART_CheckIdleState>
 800a53a:	4603      	mov	r3, r0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b08a      	sub	sp, #40	@ 0x28
 800a548:	af02      	add	r7, sp, #8
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	603b      	str	r3, [r7, #0]
 800a550:	4613      	mov	r3, r2
 800a552:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a55a:	2b20      	cmp	r3, #32
 800a55c:	d17b      	bne.n	800a656 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d002      	beq.n	800a56a <HAL_UART_Transmit+0x26>
 800a564:	88fb      	ldrh	r3, [r7, #6]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e074      	b.n	800a658 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2221      	movs	r2, #33	@ 0x21
 800a57a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a57e:	f7f7 f8a3 	bl	80016c8 <HAL_GetTick>
 800a582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	88fa      	ldrh	r2, [r7, #6]
 800a588:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	88fa      	ldrh	r2, [r7, #6]
 800a590:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a59c:	d108      	bne.n	800a5b0 <HAL_UART_Transmit+0x6c>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d104      	bne.n	800a5b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	61bb      	str	r3, [r7, #24]
 800a5ae:	e003      	b.n	800a5b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a5b8:	e030      	b.n	800a61c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2180      	movs	r1, #128	@ 0x80
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f001 f803 	bl	800b5d0 <UART_WaitOnFlagUntilTimeout>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2220      	movs	r2, #32
 800a5d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e03d      	b.n	800a658 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10b      	bne.n	800a5fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	881b      	ldrh	r3, [r3, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	3302      	adds	r3, #2
 800a5f6:	61bb      	str	r3, [r7, #24]
 800a5f8:	e007      	b.n	800a60a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	781a      	ldrb	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	3301      	adds	r3, #1
 800a608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a610:	b29b      	uxth	r3, r3
 800a612:	3b01      	subs	r3, #1
 800a614:	b29a      	uxth	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a622:	b29b      	uxth	r3, r3
 800a624:	2b00      	cmp	r3, #0
 800a626:	d1c8      	bne.n	800a5ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	2200      	movs	r2, #0
 800a630:	2140      	movs	r1, #64	@ 0x40
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 ffcc 	bl	800b5d0 <UART_WaitOnFlagUntilTimeout>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d005      	beq.n	800a64a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2220      	movs	r2, #32
 800a642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e006      	b.n	800a658 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2220      	movs	r2, #32
 800a64e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a652:	2300      	movs	r3, #0
 800a654:	e000      	b.n	800a658 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a656:	2302      	movs	r3, #2
  }
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3720      	adds	r7, #32
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a664:	b092      	sub	sp, #72	@ 0x48
 800a666:	af00      	add	r7, sp, #0
 800a668:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	689a      	ldr	r2, [r3, #8]
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	431a      	orrs	r2, r3
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	695b      	ldr	r3, [r3, #20]
 800a67e:	431a      	orrs	r2, r3
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	4313      	orrs	r3, r2
 800a686:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	4bbe      	ldr	r3, [pc, #760]	@ (800a988 <UART_SetConfig+0x328>)
 800a690:	4013      	ands	r3, r2
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	6812      	ldr	r2, [r2, #0]
 800a696:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a698:	430b      	orrs	r3, r1
 800a69a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	68da      	ldr	r2, [r3, #12]
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4ab3      	ldr	r2, [pc, #716]	@ (800a98c <UART_SetConfig+0x32c>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d004      	beq.n	800a6cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	689a      	ldr	r2, [r3, #8]
 800a6d2:	4baf      	ldr	r3, [pc, #700]	@ (800a990 <UART_SetConfig+0x330>)
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	697a      	ldr	r2, [r7, #20]
 800a6d8:	6812      	ldr	r2, [r2, #0]
 800a6da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6dc:	430b      	orrs	r3, r1
 800a6de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e6:	f023 010f 	bic.w	r1, r3, #15
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4aa6      	ldr	r2, [pc, #664]	@ (800a994 <UART_SetConfig+0x334>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d177      	bne.n	800a7f0 <UART_SetConfig+0x190>
 800a700:	4ba5      	ldr	r3, [pc, #660]	@ (800a998 <UART_SetConfig+0x338>)
 800a702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a704:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a708:	2b28      	cmp	r3, #40	@ 0x28
 800a70a:	d86d      	bhi.n	800a7e8 <UART_SetConfig+0x188>
 800a70c:	a201      	add	r2, pc, #4	@ (adr r2, 800a714 <UART_SetConfig+0xb4>)
 800a70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a712:	bf00      	nop
 800a714:	0800a7b9 	.word	0x0800a7b9
 800a718:	0800a7e9 	.word	0x0800a7e9
 800a71c:	0800a7e9 	.word	0x0800a7e9
 800a720:	0800a7e9 	.word	0x0800a7e9
 800a724:	0800a7e9 	.word	0x0800a7e9
 800a728:	0800a7e9 	.word	0x0800a7e9
 800a72c:	0800a7e9 	.word	0x0800a7e9
 800a730:	0800a7e9 	.word	0x0800a7e9
 800a734:	0800a7c1 	.word	0x0800a7c1
 800a738:	0800a7e9 	.word	0x0800a7e9
 800a73c:	0800a7e9 	.word	0x0800a7e9
 800a740:	0800a7e9 	.word	0x0800a7e9
 800a744:	0800a7e9 	.word	0x0800a7e9
 800a748:	0800a7e9 	.word	0x0800a7e9
 800a74c:	0800a7e9 	.word	0x0800a7e9
 800a750:	0800a7e9 	.word	0x0800a7e9
 800a754:	0800a7c9 	.word	0x0800a7c9
 800a758:	0800a7e9 	.word	0x0800a7e9
 800a75c:	0800a7e9 	.word	0x0800a7e9
 800a760:	0800a7e9 	.word	0x0800a7e9
 800a764:	0800a7e9 	.word	0x0800a7e9
 800a768:	0800a7e9 	.word	0x0800a7e9
 800a76c:	0800a7e9 	.word	0x0800a7e9
 800a770:	0800a7e9 	.word	0x0800a7e9
 800a774:	0800a7d1 	.word	0x0800a7d1
 800a778:	0800a7e9 	.word	0x0800a7e9
 800a77c:	0800a7e9 	.word	0x0800a7e9
 800a780:	0800a7e9 	.word	0x0800a7e9
 800a784:	0800a7e9 	.word	0x0800a7e9
 800a788:	0800a7e9 	.word	0x0800a7e9
 800a78c:	0800a7e9 	.word	0x0800a7e9
 800a790:	0800a7e9 	.word	0x0800a7e9
 800a794:	0800a7d9 	.word	0x0800a7d9
 800a798:	0800a7e9 	.word	0x0800a7e9
 800a79c:	0800a7e9 	.word	0x0800a7e9
 800a7a0:	0800a7e9 	.word	0x0800a7e9
 800a7a4:	0800a7e9 	.word	0x0800a7e9
 800a7a8:	0800a7e9 	.word	0x0800a7e9
 800a7ac:	0800a7e9 	.word	0x0800a7e9
 800a7b0:	0800a7e9 	.word	0x0800a7e9
 800a7b4:	0800a7e1 	.word	0x0800a7e1
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7be:	e326      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a7c0:	2304      	movs	r3, #4
 800a7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7c6:	e322      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a7c8:	2308      	movs	r3, #8
 800a7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ce:	e31e      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a7d0:	2310      	movs	r3, #16
 800a7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d6:	e31a      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a7d8:	2320      	movs	r3, #32
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7de:	e316      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a7e0:	2340      	movs	r3, #64	@ 0x40
 800a7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e6:	e312      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a7e8:	2380      	movs	r3, #128	@ 0x80
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ee:	e30e      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a69      	ldr	r2, [pc, #420]	@ (800a99c <UART_SetConfig+0x33c>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d130      	bne.n	800a85c <UART_SetConfig+0x1fc>
 800a7fa:	4b67      	ldr	r3, [pc, #412]	@ (800a998 <UART_SetConfig+0x338>)
 800a7fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7fe:	f003 0307 	and.w	r3, r3, #7
 800a802:	2b05      	cmp	r3, #5
 800a804:	d826      	bhi.n	800a854 <UART_SetConfig+0x1f4>
 800a806:	a201      	add	r2, pc, #4	@ (adr r2, 800a80c <UART_SetConfig+0x1ac>)
 800a808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80c:	0800a825 	.word	0x0800a825
 800a810:	0800a82d 	.word	0x0800a82d
 800a814:	0800a835 	.word	0x0800a835
 800a818:	0800a83d 	.word	0x0800a83d
 800a81c:	0800a845 	.word	0x0800a845
 800a820:	0800a84d 	.word	0x0800a84d
 800a824:	2300      	movs	r3, #0
 800a826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82a:	e2f0      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a82c:	2304      	movs	r3, #4
 800a82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a832:	e2ec      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a834:	2308      	movs	r3, #8
 800a836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83a:	e2e8      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a83c:	2310      	movs	r3, #16
 800a83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a842:	e2e4      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a844:	2320      	movs	r3, #32
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84a:	e2e0      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a84c:	2340      	movs	r3, #64	@ 0x40
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a852:	e2dc      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a854:	2380      	movs	r3, #128	@ 0x80
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85a:	e2d8      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a4f      	ldr	r2, [pc, #316]	@ (800a9a0 <UART_SetConfig+0x340>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d130      	bne.n	800a8c8 <UART_SetConfig+0x268>
 800a866:	4b4c      	ldr	r3, [pc, #304]	@ (800a998 <UART_SetConfig+0x338>)
 800a868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a86a:	f003 0307 	and.w	r3, r3, #7
 800a86e:	2b05      	cmp	r3, #5
 800a870:	d826      	bhi.n	800a8c0 <UART_SetConfig+0x260>
 800a872:	a201      	add	r2, pc, #4	@ (adr r2, 800a878 <UART_SetConfig+0x218>)
 800a874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a878:	0800a891 	.word	0x0800a891
 800a87c:	0800a899 	.word	0x0800a899
 800a880:	0800a8a1 	.word	0x0800a8a1
 800a884:	0800a8a9 	.word	0x0800a8a9
 800a888:	0800a8b1 	.word	0x0800a8b1
 800a88c:	0800a8b9 	.word	0x0800a8b9
 800a890:	2300      	movs	r3, #0
 800a892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a896:	e2ba      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a898:	2304      	movs	r3, #4
 800a89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89e:	e2b6      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a8a0:	2308      	movs	r3, #8
 800a8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a6:	e2b2      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a8a8:	2310      	movs	r3, #16
 800a8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ae:	e2ae      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a8b0:	2320      	movs	r3, #32
 800a8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8b6:	e2aa      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a8b8:	2340      	movs	r3, #64	@ 0x40
 800a8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8be:	e2a6      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a8c0:	2380      	movs	r3, #128	@ 0x80
 800a8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c6:	e2a2      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a35      	ldr	r2, [pc, #212]	@ (800a9a4 <UART_SetConfig+0x344>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d130      	bne.n	800a934 <UART_SetConfig+0x2d4>
 800a8d2:	4b31      	ldr	r3, [pc, #196]	@ (800a998 <UART_SetConfig+0x338>)
 800a8d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8d6:	f003 0307 	and.w	r3, r3, #7
 800a8da:	2b05      	cmp	r3, #5
 800a8dc:	d826      	bhi.n	800a92c <UART_SetConfig+0x2cc>
 800a8de:	a201      	add	r2, pc, #4	@ (adr r2, 800a8e4 <UART_SetConfig+0x284>)
 800a8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e4:	0800a8fd 	.word	0x0800a8fd
 800a8e8:	0800a905 	.word	0x0800a905
 800a8ec:	0800a90d 	.word	0x0800a90d
 800a8f0:	0800a915 	.word	0x0800a915
 800a8f4:	0800a91d 	.word	0x0800a91d
 800a8f8:	0800a925 	.word	0x0800a925
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a902:	e284      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a904:	2304      	movs	r3, #4
 800a906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90a:	e280      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a90c:	2308      	movs	r3, #8
 800a90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a912:	e27c      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a914:	2310      	movs	r3, #16
 800a916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91a:	e278      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a91c:	2320      	movs	r3, #32
 800a91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a922:	e274      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a924:	2340      	movs	r3, #64	@ 0x40
 800a926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92a:	e270      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a92c:	2380      	movs	r3, #128	@ 0x80
 800a92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a932:	e26c      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a1b      	ldr	r2, [pc, #108]	@ (800a9a8 <UART_SetConfig+0x348>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d142      	bne.n	800a9c4 <UART_SetConfig+0x364>
 800a93e:	4b16      	ldr	r3, [pc, #88]	@ (800a998 <UART_SetConfig+0x338>)
 800a940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a942:	f003 0307 	and.w	r3, r3, #7
 800a946:	2b05      	cmp	r3, #5
 800a948:	d838      	bhi.n	800a9bc <UART_SetConfig+0x35c>
 800a94a:	a201      	add	r2, pc, #4	@ (adr r2, 800a950 <UART_SetConfig+0x2f0>)
 800a94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a950:	0800a969 	.word	0x0800a969
 800a954:	0800a971 	.word	0x0800a971
 800a958:	0800a979 	.word	0x0800a979
 800a95c:	0800a981 	.word	0x0800a981
 800a960:	0800a9ad 	.word	0x0800a9ad
 800a964:	0800a9b5 	.word	0x0800a9b5
 800a968:	2300      	movs	r3, #0
 800a96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96e:	e24e      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a970:	2304      	movs	r3, #4
 800a972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a976:	e24a      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a978:	2308      	movs	r3, #8
 800a97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a97e:	e246      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a980:	2310      	movs	r3, #16
 800a982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a986:	e242      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a988:	cfff69f3 	.word	0xcfff69f3
 800a98c:	58000c00 	.word	0x58000c00
 800a990:	11fff4ff 	.word	0x11fff4ff
 800a994:	40011000 	.word	0x40011000
 800a998:	58024400 	.word	0x58024400
 800a99c:	40004400 	.word	0x40004400
 800a9a0:	40004800 	.word	0x40004800
 800a9a4:	40004c00 	.word	0x40004c00
 800a9a8:	40005000 	.word	0x40005000
 800a9ac:	2320      	movs	r3, #32
 800a9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9b2:	e22c      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a9b4:	2340      	movs	r3, #64	@ 0x40
 800a9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ba:	e228      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a9bc:	2380      	movs	r3, #128	@ 0x80
 800a9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9c2:	e224      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4ab1      	ldr	r2, [pc, #708]	@ (800ac90 <UART_SetConfig+0x630>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d176      	bne.n	800aabc <UART_SetConfig+0x45c>
 800a9ce:	4bb1      	ldr	r3, [pc, #708]	@ (800ac94 <UART_SetConfig+0x634>)
 800a9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9d6:	2b28      	cmp	r3, #40	@ 0x28
 800a9d8:	d86c      	bhi.n	800aab4 <UART_SetConfig+0x454>
 800a9da:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e0 <UART_SetConfig+0x380>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800aa85 	.word	0x0800aa85
 800a9e4:	0800aab5 	.word	0x0800aab5
 800a9e8:	0800aab5 	.word	0x0800aab5
 800a9ec:	0800aab5 	.word	0x0800aab5
 800a9f0:	0800aab5 	.word	0x0800aab5
 800a9f4:	0800aab5 	.word	0x0800aab5
 800a9f8:	0800aab5 	.word	0x0800aab5
 800a9fc:	0800aab5 	.word	0x0800aab5
 800aa00:	0800aa8d 	.word	0x0800aa8d
 800aa04:	0800aab5 	.word	0x0800aab5
 800aa08:	0800aab5 	.word	0x0800aab5
 800aa0c:	0800aab5 	.word	0x0800aab5
 800aa10:	0800aab5 	.word	0x0800aab5
 800aa14:	0800aab5 	.word	0x0800aab5
 800aa18:	0800aab5 	.word	0x0800aab5
 800aa1c:	0800aab5 	.word	0x0800aab5
 800aa20:	0800aa95 	.word	0x0800aa95
 800aa24:	0800aab5 	.word	0x0800aab5
 800aa28:	0800aab5 	.word	0x0800aab5
 800aa2c:	0800aab5 	.word	0x0800aab5
 800aa30:	0800aab5 	.word	0x0800aab5
 800aa34:	0800aab5 	.word	0x0800aab5
 800aa38:	0800aab5 	.word	0x0800aab5
 800aa3c:	0800aab5 	.word	0x0800aab5
 800aa40:	0800aa9d 	.word	0x0800aa9d
 800aa44:	0800aab5 	.word	0x0800aab5
 800aa48:	0800aab5 	.word	0x0800aab5
 800aa4c:	0800aab5 	.word	0x0800aab5
 800aa50:	0800aab5 	.word	0x0800aab5
 800aa54:	0800aab5 	.word	0x0800aab5
 800aa58:	0800aab5 	.word	0x0800aab5
 800aa5c:	0800aab5 	.word	0x0800aab5
 800aa60:	0800aaa5 	.word	0x0800aaa5
 800aa64:	0800aab5 	.word	0x0800aab5
 800aa68:	0800aab5 	.word	0x0800aab5
 800aa6c:	0800aab5 	.word	0x0800aab5
 800aa70:	0800aab5 	.word	0x0800aab5
 800aa74:	0800aab5 	.word	0x0800aab5
 800aa78:	0800aab5 	.word	0x0800aab5
 800aa7c:	0800aab5 	.word	0x0800aab5
 800aa80:	0800aaad 	.word	0x0800aaad
 800aa84:	2301      	movs	r3, #1
 800aa86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa8a:	e1c0      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800aa8c:	2304      	movs	r3, #4
 800aa8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa92:	e1bc      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800aa94:	2308      	movs	r3, #8
 800aa96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aa9a:	e1b8      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800aa9c:	2310      	movs	r3, #16
 800aa9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaa2:	e1b4      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800aaa4:	2320      	movs	r3, #32
 800aaa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaaa:	e1b0      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800aaac:	2340      	movs	r3, #64	@ 0x40
 800aaae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab2:	e1ac      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800aab4:	2380      	movs	r3, #128	@ 0x80
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaba:	e1a8      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a75      	ldr	r2, [pc, #468]	@ (800ac98 <UART_SetConfig+0x638>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d130      	bne.n	800ab28 <UART_SetConfig+0x4c8>
 800aac6:	4b73      	ldr	r3, [pc, #460]	@ (800ac94 <UART_SetConfig+0x634>)
 800aac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaca:	f003 0307 	and.w	r3, r3, #7
 800aace:	2b05      	cmp	r3, #5
 800aad0:	d826      	bhi.n	800ab20 <UART_SetConfig+0x4c0>
 800aad2:	a201      	add	r2, pc, #4	@ (adr r2, 800aad8 <UART_SetConfig+0x478>)
 800aad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad8:	0800aaf1 	.word	0x0800aaf1
 800aadc:	0800aaf9 	.word	0x0800aaf9
 800aae0:	0800ab01 	.word	0x0800ab01
 800aae4:	0800ab09 	.word	0x0800ab09
 800aae8:	0800ab11 	.word	0x0800ab11
 800aaec:	0800ab19 	.word	0x0800ab19
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaf6:	e18a      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800aaf8:	2304      	movs	r3, #4
 800aafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aafe:	e186      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab00:	2308      	movs	r3, #8
 800ab02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab06:	e182      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab08:	2310      	movs	r3, #16
 800ab0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab0e:	e17e      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab10:	2320      	movs	r3, #32
 800ab12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab16:	e17a      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab18:	2340      	movs	r3, #64	@ 0x40
 800ab1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab1e:	e176      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab20:	2380      	movs	r3, #128	@ 0x80
 800ab22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab26:	e172      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a5b      	ldr	r2, [pc, #364]	@ (800ac9c <UART_SetConfig+0x63c>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d130      	bne.n	800ab94 <UART_SetConfig+0x534>
 800ab32:	4b58      	ldr	r3, [pc, #352]	@ (800ac94 <UART_SetConfig+0x634>)
 800ab34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab36:	f003 0307 	and.w	r3, r3, #7
 800ab3a:	2b05      	cmp	r3, #5
 800ab3c:	d826      	bhi.n	800ab8c <UART_SetConfig+0x52c>
 800ab3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab44 <UART_SetConfig+0x4e4>)
 800ab40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab44:	0800ab5d 	.word	0x0800ab5d
 800ab48:	0800ab65 	.word	0x0800ab65
 800ab4c:	0800ab6d 	.word	0x0800ab6d
 800ab50:	0800ab75 	.word	0x0800ab75
 800ab54:	0800ab7d 	.word	0x0800ab7d
 800ab58:	0800ab85 	.word	0x0800ab85
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab62:	e154      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab64:	2304      	movs	r3, #4
 800ab66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab6a:	e150      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab6c:	2308      	movs	r3, #8
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab72:	e14c      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab74:	2310      	movs	r3, #16
 800ab76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab7a:	e148      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab7c:	2320      	movs	r3, #32
 800ab7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab82:	e144      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab84:	2340      	movs	r3, #64	@ 0x40
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab8a:	e140      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab8c:	2380      	movs	r3, #128	@ 0x80
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab92:	e13c      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a41      	ldr	r2, [pc, #260]	@ (800aca0 <UART_SetConfig+0x640>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	f040 8082 	bne.w	800aca4 <UART_SetConfig+0x644>
 800aba0:	4b3c      	ldr	r3, [pc, #240]	@ (800ac94 <UART_SetConfig+0x634>)
 800aba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aba4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aba8:	2b28      	cmp	r3, #40	@ 0x28
 800abaa:	d86d      	bhi.n	800ac88 <UART_SetConfig+0x628>
 800abac:	a201      	add	r2, pc, #4	@ (adr r2, 800abb4 <UART_SetConfig+0x554>)
 800abae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb2:	bf00      	nop
 800abb4:	0800ac59 	.word	0x0800ac59
 800abb8:	0800ac89 	.word	0x0800ac89
 800abbc:	0800ac89 	.word	0x0800ac89
 800abc0:	0800ac89 	.word	0x0800ac89
 800abc4:	0800ac89 	.word	0x0800ac89
 800abc8:	0800ac89 	.word	0x0800ac89
 800abcc:	0800ac89 	.word	0x0800ac89
 800abd0:	0800ac89 	.word	0x0800ac89
 800abd4:	0800ac61 	.word	0x0800ac61
 800abd8:	0800ac89 	.word	0x0800ac89
 800abdc:	0800ac89 	.word	0x0800ac89
 800abe0:	0800ac89 	.word	0x0800ac89
 800abe4:	0800ac89 	.word	0x0800ac89
 800abe8:	0800ac89 	.word	0x0800ac89
 800abec:	0800ac89 	.word	0x0800ac89
 800abf0:	0800ac89 	.word	0x0800ac89
 800abf4:	0800ac69 	.word	0x0800ac69
 800abf8:	0800ac89 	.word	0x0800ac89
 800abfc:	0800ac89 	.word	0x0800ac89
 800ac00:	0800ac89 	.word	0x0800ac89
 800ac04:	0800ac89 	.word	0x0800ac89
 800ac08:	0800ac89 	.word	0x0800ac89
 800ac0c:	0800ac89 	.word	0x0800ac89
 800ac10:	0800ac89 	.word	0x0800ac89
 800ac14:	0800ac71 	.word	0x0800ac71
 800ac18:	0800ac89 	.word	0x0800ac89
 800ac1c:	0800ac89 	.word	0x0800ac89
 800ac20:	0800ac89 	.word	0x0800ac89
 800ac24:	0800ac89 	.word	0x0800ac89
 800ac28:	0800ac89 	.word	0x0800ac89
 800ac2c:	0800ac89 	.word	0x0800ac89
 800ac30:	0800ac89 	.word	0x0800ac89
 800ac34:	0800ac79 	.word	0x0800ac79
 800ac38:	0800ac89 	.word	0x0800ac89
 800ac3c:	0800ac89 	.word	0x0800ac89
 800ac40:	0800ac89 	.word	0x0800ac89
 800ac44:	0800ac89 	.word	0x0800ac89
 800ac48:	0800ac89 	.word	0x0800ac89
 800ac4c:	0800ac89 	.word	0x0800ac89
 800ac50:	0800ac89 	.word	0x0800ac89
 800ac54:	0800ac81 	.word	0x0800ac81
 800ac58:	2301      	movs	r3, #1
 800ac5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac5e:	e0d6      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ac60:	2304      	movs	r3, #4
 800ac62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac66:	e0d2      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ac68:	2308      	movs	r3, #8
 800ac6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac6e:	e0ce      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ac70:	2310      	movs	r3, #16
 800ac72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac76:	e0ca      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ac78:	2320      	movs	r3, #32
 800ac7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7e:	e0c6      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ac80:	2340      	movs	r3, #64	@ 0x40
 800ac82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac86:	e0c2      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ac88:	2380      	movs	r3, #128	@ 0x80
 800ac8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8e:	e0be      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ac90:	40011400 	.word	0x40011400
 800ac94:	58024400 	.word	0x58024400
 800ac98:	40007800 	.word	0x40007800
 800ac9c:	40007c00 	.word	0x40007c00
 800aca0:	40011800 	.word	0x40011800
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4aad      	ldr	r2, [pc, #692]	@ (800af60 <UART_SetConfig+0x900>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d176      	bne.n	800ad9c <UART_SetConfig+0x73c>
 800acae:	4bad      	ldr	r3, [pc, #692]	@ (800af64 <UART_SetConfig+0x904>)
 800acb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800acb6:	2b28      	cmp	r3, #40	@ 0x28
 800acb8:	d86c      	bhi.n	800ad94 <UART_SetConfig+0x734>
 800acba:	a201      	add	r2, pc, #4	@ (adr r2, 800acc0 <UART_SetConfig+0x660>)
 800acbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc0:	0800ad65 	.word	0x0800ad65
 800acc4:	0800ad95 	.word	0x0800ad95
 800acc8:	0800ad95 	.word	0x0800ad95
 800accc:	0800ad95 	.word	0x0800ad95
 800acd0:	0800ad95 	.word	0x0800ad95
 800acd4:	0800ad95 	.word	0x0800ad95
 800acd8:	0800ad95 	.word	0x0800ad95
 800acdc:	0800ad95 	.word	0x0800ad95
 800ace0:	0800ad6d 	.word	0x0800ad6d
 800ace4:	0800ad95 	.word	0x0800ad95
 800ace8:	0800ad95 	.word	0x0800ad95
 800acec:	0800ad95 	.word	0x0800ad95
 800acf0:	0800ad95 	.word	0x0800ad95
 800acf4:	0800ad95 	.word	0x0800ad95
 800acf8:	0800ad95 	.word	0x0800ad95
 800acfc:	0800ad95 	.word	0x0800ad95
 800ad00:	0800ad75 	.word	0x0800ad75
 800ad04:	0800ad95 	.word	0x0800ad95
 800ad08:	0800ad95 	.word	0x0800ad95
 800ad0c:	0800ad95 	.word	0x0800ad95
 800ad10:	0800ad95 	.word	0x0800ad95
 800ad14:	0800ad95 	.word	0x0800ad95
 800ad18:	0800ad95 	.word	0x0800ad95
 800ad1c:	0800ad95 	.word	0x0800ad95
 800ad20:	0800ad7d 	.word	0x0800ad7d
 800ad24:	0800ad95 	.word	0x0800ad95
 800ad28:	0800ad95 	.word	0x0800ad95
 800ad2c:	0800ad95 	.word	0x0800ad95
 800ad30:	0800ad95 	.word	0x0800ad95
 800ad34:	0800ad95 	.word	0x0800ad95
 800ad38:	0800ad95 	.word	0x0800ad95
 800ad3c:	0800ad95 	.word	0x0800ad95
 800ad40:	0800ad85 	.word	0x0800ad85
 800ad44:	0800ad95 	.word	0x0800ad95
 800ad48:	0800ad95 	.word	0x0800ad95
 800ad4c:	0800ad95 	.word	0x0800ad95
 800ad50:	0800ad95 	.word	0x0800ad95
 800ad54:	0800ad95 	.word	0x0800ad95
 800ad58:	0800ad95 	.word	0x0800ad95
 800ad5c:	0800ad95 	.word	0x0800ad95
 800ad60:	0800ad8d 	.word	0x0800ad8d
 800ad64:	2301      	movs	r3, #1
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6a:	e050      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ad6c:	2304      	movs	r3, #4
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad72:	e04c      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ad74:	2308      	movs	r3, #8
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7a:	e048      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ad7c:	2310      	movs	r3, #16
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad82:	e044      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ad84:	2320      	movs	r3, #32
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8a:	e040      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ad8c:	2340      	movs	r3, #64	@ 0x40
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad92:	e03c      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ad94:	2380      	movs	r3, #128	@ 0x80
 800ad96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9a:	e038      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a71      	ldr	r2, [pc, #452]	@ (800af68 <UART_SetConfig+0x908>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d130      	bne.n	800ae08 <UART_SetConfig+0x7a8>
 800ada6:	4b6f      	ldr	r3, [pc, #444]	@ (800af64 <UART_SetConfig+0x904>)
 800ada8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adaa:	f003 0307 	and.w	r3, r3, #7
 800adae:	2b05      	cmp	r3, #5
 800adb0:	d826      	bhi.n	800ae00 <UART_SetConfig+0x7a0>
 800adb2:	a201      	add	r2, pc, #4	@ (adr r2, 800adb8 <UART_SetConfig+0x758>)
 800adb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb8:	0800add1 	.word	0x0800add1
 800adbc:	0800add9 	.word	0x0800add9
 800adc0:	0800ade1 	.word	0x0800ade1
 800adc4:	0800ade9 	.word	0x0800ade9
 800adc8:	0800adf1 	.word	0x0800adf1
 800adcc:	0800adf9 	.word	0x0800adf9
 800add0:	2302      	movs	r3, #2
 800add2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800add6:	e01a      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800add8:	2304      	movs	r3, #4
 800adda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adde:	e016      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ade0:	2308      	movs	r3, #8
 800ade2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade6:	e012      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ade8:	2310      	movs	r3, #16
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adee:	e00e      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800adf0:	2320      	movs	r3, #32
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adf6:	e00a      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800adf8:	2340      	movs	r3, #64	@ 0x40
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfe:	e006      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ae00:	2380      	movs	r3, #128	@ 0x80
 800ae02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae06:	e002      	b.n	800ae0e <UART_SetConfig+0x7ae>
 800ae08:	2380      	movs	r3, #128	@ 0x80
 800ae0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a55      	ldr	r2, [pc, #340]	@ (800af68 <UART_SetConfig+0x908>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	f040 80f8 	bne.w	800b00a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae1e:	2b20      	cmp	r3, #32
 800ae20:	dc46      	bgt.n	800aeb0 <UART_SetConfig+0x850>
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	db75      	blt.n	800af12 <UART_SetConfig+0x8b2>
 800ae26:	3b02      	subs	r3, #2
 800ae28:	2b1e      	cmp	r3, #30
 800ae2a:	d872      	bhi.n	800af12 <UART_SetConfig+0x8b2>
 800ae2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae34 <UART_SetConfig+0x7d4>)
 800ae2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae32:	bf00      	nop
 800ae34:	0800aeb7 	.word	0x0800aeb7
 800ae38:	0800af13 	.word	0x0800af13
 800ae3c:	0800aebf 	.word	0x0800aebf
 800ae40:	0800af13 	.word	0x0800af13
 800ae44:	0800af13 	.word	0x0800af13
 800ae48:	0800af13 	.word	0x0800af13
 800ae4c:	0800aecf 	.word	0x0800aecf
 800ae50:	0800af13 	.word	0x0800af13
 800ae54:	0800af13 	.word	0x0800af13
 800ae58:	0800af13 	.word	0x0800af13
 800ae5c:	0800af13 	.word	0x0800af13
 800ae60:	0800af13 	.word	0x0800af13
 800ae64:	0800af13 	.word	0x0800af13
 800ae68:	0800af13 	.word	0x0800af13
 800ae6c:	0800aedf 	.word	0x0800aedf
 800ae70:	0800af13 	.word	0x0800af13
 800ae74:	0800af13 	.word	0x0800af13
 800ae78:	0800af13 	.word	0x0800af13
 800ae7c:	0800af13 	.word	0x0800af13
 800ae80:	0800af13 	.word	0x0800af13
 800ae84:	0800af13 	.word	0x0800af13
 800ae88:	0800af13 	.word	0x0800af13
 800ae8c:	0800af13 	.word	0x0800af13
 800ae90:	0800af13 	.word	0x0800af13
 800ae94:	0800af13 	.word	0x0800af13
 800ae98:	0800af13 	.word	0x0800af13
 800ae9c:	0800af13 	.word	0x0800af13
 800aea0:	0800af13 	.word	0x0800af13
 800aea4:	0800af13 	.word	0x0800af13
 800aea8:	0800af13 	.word	0x0800af13
 800aeac:	0800af05 	.word	0x0800af05
 800aeb0:	2b40      	cmp	r3, #64	@ 0x40
 800aeb2:	d02a      	beq.n	800af0a <UART_SetConfig+0x8aa>
 800aeb4:	e02d      	b.n	800af12 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aeb6:	f7fd fd05 	bl	80088c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800aeba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aebc:	e02f      	b.n	800af1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fd fd14 	bl	80088f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aecc:	e027      	b.n	800af1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aece:	f107 0318 	add.w	r3, r7, #24
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fd fe60 	bl	8008b98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aedc:	e01f      	b.n	800af1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aede:	4b21      	ldr	r3, [pc, #132]	@ (800af64 <UART_SetConfig+0x904>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 0320 	and.w	r3, r3, #32
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d009      	beq.n	800aefe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aeea:	4b1e      	ldr	r3, [pc, #120]	@ (800af64 <UART_SetConfig+0x904>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	08db      	lsrs	r3, r3, #3
 800aef0:	f003 0303 	and.w	r3, r3, #3
 800aef4:	4a1d      	ldr	r2, [pc, #116]	@ (800af6c <UART_SetConfig+0x90c>)
 800aef6:	fa22 f303 	lsr.w	r3, r2, r3
 800aefa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aefc:	e00f      	b.n	800af1e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aefe:	4b1b      	ldr	r3, [pc, #108]	@ (800af6c <UART_SetConfig+0x90c>)
 800af00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af02:	e00c      	b.n	800af1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af04:	4b1a      	ldr	r3, [pc, #104]	@ (800af70 <UART_SetConfig+0x910>)
 800af06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af08:	e009      	b.n	800af1e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af10:	e005      	b.n	800af1e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 81ee 	beq.w	800b302 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af2a:	4a12      	ldr	r2, [pc, #72]	@ (800af74 <UART_SetConfig+0x914>)
 800af2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af30:	461a      	mov	r2, r3
 800af32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af34:	fbb3 f3f2 	udiv	r3, r3, r2
 800af38:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	4613      	mov	r3, r2
 800af40:	005b      	lsls	r3, r3, #1
 800af42:	4413      	add	r3, r2
 800af44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af46:	429a      	cmp	r2, r3
 800af48:	d305      	bcc.n	800af56 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af52:	429a      	cmp	r2, r3
 800af54:	d910      	bls.n	800af78 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af5c:	e1d1      	b.n	800b302 <UART_SetConfig+0xca2>
 800af5e:	bf00      	nop
 800af60:	40011c00 	.word	0x40011c00
 800af64:	58024400 	.word	0x58024400
 800af68:	58000c00 	.word	0x58000c00
 800af6c:	03d09000 	.word	0x03d09000
 800af70:	003d0900 	.word	0x003d0900
 800af74:	0800bbfc 	.word	0x0800bbfc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af7a:	2200      	movs	r2, #0
 800af7c:	60bb      	str	r3, [r7, #8]
 800af7e:	60fa      	str	r2, [r7, #12]
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af84:	4ac0      	ldr	r2, [pc, #768]	@ (800b288 <UART_SetConfig+0xc28>)
 800af86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	2200      	movs	r2, #0
 800af8e:	603b      	str	r3, [r7, #0]
 800af90:	607a      	str	r2, [r7, #4]
 800af92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af9a:	f7f5 f9bf 	bl	800031c <__aeabi_uldivmod>
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	4610      	mov	r0, r2
 800afa4:	4619      	mov	r1, r3
 800afa6:	f04f 0200 	mov.w	r2, #0
 800afaa:	f04f 0300 	mov.w	r3, #0
 800afae:	020b      	lsls	r3, r1, #8
 800afb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800afb4:	0202      	lsls	r2, r0, #8
 800afb6:	6979      	ldr	r1, [r7, #20]
 800afb8:	6849      	ldr	r1, [r1, #4]
 800afba:	0849      	lsrs	r1, r1, #1
 800afbc:	2000      	movs	r0, #0
 800afbe:	460c      	mov	r4, r1
 800afc0:	4605      	mov	r5, r0
 800afc2:	eb12 0804 	adds.w	r8, r2, r4
 800afc6:	eb43 0905 	adc.w	r9, r3, r5
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	469a      	mov	sl, r3
 800afd2:	4693      	mov	fp, r2
 800afd4:	4652      	mov	r2, sl
 800afd6:	465b      	mov	r3, fp
 800afd8:	4640      	mov	r0, r8
 800afda:	4649      	mov	r1, r9
 800afdc:	f7f5 f99e 	bl	800031c <__aeabi_uldivmod>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4613      	mov	r3, r2
 800afe6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800afe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800afee:	d308      	bcc.n	800b002 <UART_SetConfig+0x9a2>
 800aff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aff6:	d204      	bcs.n	800b002 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800affe:	60da      	str	r2, [r3, #12]
 800b000:	e17f      	b.n	800b302 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b008:	e17b      	b.n	800b302 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b012:	f040 80bd 	bne.w	800b190 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b016:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b01a:	2b20      	cmp	r3, #32
 800b01c:	dc48      	bgt.n	800b0b0 <UART_SetConfig+0xa50>
 800b01e:	2b00      	cmp	r3, #0
 800b020:	db7b      	blt.n	800b11a <UART_SetConfig+0xaba>
 800b022:	2b20      	cmp	r3, #32
 800b024:	d879      	bhi.n	800b11a <UART_SetConfig+0xaba>
 800b026:	a201      	add	r2, pc, #4	@ (adr r2, 800b02c <UART_SetConfig+0x9cc>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b0b7 	.word	0x0800b0b7
 800b030:	0800b0bf 	.word	0x0800b0bf
 800b034:	0800b11b 	.word	0x0800b11b
 800b038:	0800b11b 	.word	0x0800b11b
 800b03c:	0800b0c7 	.word	0x0800b0c7
 800b040:	0800b11b 	.word	0x0800b11b
 800b044:	0800b11b 	.word	0x0800b11b
 800b048:	0800b11b 	.word	0x0800b11b
 800b04c:	0800b0d7 	.word	0x0800b0d7
 800b050:	0800b11b 	.word	0x0800b11b
 800b054:	0800b11b 	.word	0x0800b11b
 800b058:	0800b11b 	.word	0x0800b11b
 800b05c:	0800b11b 	.word	0x0800b11b
 800b060:	0800b11b 	.word	0x0800b11b
 800b064:	0800b11b 	.word	0x0800b11b
 800b068:	0800b11b 	.word	0x0800b11b
 800b06c:	0800b0e7 	.word	0x0800b0e7
 800b070:	0800b11b 	.word	0x0800b11b
 800b074:	0800b11b 	.word	0x0800b11b
 800b078:	0800b11b 	.word	0x0800b11b
 800b07c:	0800b11b 	.word	0x0800b11b
 800b080:	0800b11b 	.word	0x0800b11b
 800b084:	0800b11b 	.word	0x0800b11b
 800b088:	0800b11b 	.word	0x0800b11b
 800b08c:	0800b11b 	.word	0x0800b11b
 800b090:	0800b11b 	.word	0x0800b11b
 800b094:	0800b11b 	.word	0x0800b11b
 800b098:	0800b11b 	.word	0x0800b11b
 800b09c:	0800b11b 	.word	0x0800b11b
 800b0a0:	0800b11b 	.word	0x0800b11b
 800b0a4:	0800b11b 	.word	0x0800b11b
 800b0a8:	0800b11b 	.word	0x0800b11b
 800b0ac:	0800b10d 	.word	0x0800b10d
 800b0b0:	2b40      	cmp	r3, #64	@ 0x40
 800b0b2:	d02e      	beq.n	800b112 <UART_SetConfig+0xab2>
 800b0b4:	e031      	b.n	800b11a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0b6:	f7fb fd67 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 800b0ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0bc:	e033      	b.n	800b126 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0be:	f7fb fd79 	bl	8006bb4 <HAL_RCC_GetPCLK2Freq>
 800b0c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0c4:	e02f      	b.n	800b126 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fd fc10 	bl	80088f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0d4:	e027      	b.n	800b126 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0d6:	f107 0318 	add.w	r3, r7, #24
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fd fd5c 	bl	8008b98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e4:	e01f      	b.n	800b126 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0e6:	4b69      	ldr	r3, [pc, #420]	@ (800b28c <UART_SetConfig+0xc2c>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 0320 	and.w	r3, r3, #32
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d009      	beq.n	800b106 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0f2:	4b66      	ldr	r3, [pc, #408]	@ (800b28c <UART_SetConfig+0xc2c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	08db      	lsrs	r3, r3, #3
 800b0f8:	f003 0303 	and.w	r3, r3, #3
 800b0fc:	4a64      	ldr	r2, [pc, #400]	@ (800b290 <UART_SetConfig+0xc30>)
 800b0fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b104:	e00f      	b.n	800b126 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b106:	4b62      	ldr	r3, [pc, #392]	@ (800b290 <UART_SetConfig+0xc30>)
 800b108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b10a:	e00c      	b.n	800b126 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b10c:	4b61      	ldr	r3, [pc, #388]	@ (800b294 <UART_SetConfig+0xc34>)
 800b10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b110:	e009      	b.n	800b126 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b118:	e005      	b.n	800b126 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b11a:	2300      	movs	r3, #0
 800b11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b124:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 80ea 	beq.w	800b302 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b132:	4a55      	ldr	r2, [pc, #340]	@ (800b288 <UART_SetConfig+0xc28>)
 800b134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b138:	461a      	mov	r2, r3
 800b13a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b13c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b140:	005a      	lsls	r2, r3, #1
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	085b      	lsrs	r3, r3, #1
 800b148:	441a      	add	r2, r3
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b152:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b156:	2b0f      	cmp	r3, #15
 800b158:	d916      	bls.n	800b188 <UART_SetConfig+0xb28>
 800b15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b160:	d212      	bcs.n	800b188 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b164:	b29b      	uxth	r3, r3
 800b166:	f023 030f 	bic.w	r3, r3, #15
 800b16a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16e:	085b      	lsrs	r3, r3, #1
 800b170:	b29b      	uxth	r3, r3
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	b29a      	uxth	r2, r3
 800b178:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b17a:	4313      	orrs	r3, r2
 800b17c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b184:	60da      	str	r2, [r3, #12]
 800b186:	e0bc      	b.n	800b302 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b18e:	e0b8      	b.n	800b302 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b190:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b194:	2b20      	cmp	r3, #32
 800b196:	dc4b      	bgt.n	800b230 <UART_SetConfig+0xbd0>
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f2c0 8087 	blt.w	800b2ac <UART_SetConfig+0xc4c>
 800b19e:	2b20      	cmp	r3, #32
 800b1a0:	f200 8084 	bhi.w	800b2ac <UART_SetConfig+0xc4c>
 800b1a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b1ac <UART_SetConfig+0xb4c>)
 800b1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1aa:	bf00      	nop
 800b1ac:	0800b237 	.word	0x0800b237
 800b1b0:	0800b23f 	.word	0x0800b23f
 800b1b4:	0800b2ad 	.word	0x0800b2ad
 800b1b8:	0800b2ad 	.word	0x0800b2ad
 800b1bc:	0800b247 	.word	0x0800b247
 800b1c0:	0800b2ad 	.word	0x0800b2ad
 800b1c4:	0800b2ad 	.word	0x0800b2ad
 800b1c8:	0800b2ad 	.word	0x0800b2ad
 800b1cc:	0800b257 	.word	0x0800b257
 800b1d0:	0800b2ad 	.word	0x0800b2ad
 800b1d4:	0800b2ad 	.word	0x0800b2ad
 800b1d8:	0800b2ad 	.word	0x0800b2ad
 800b1dc:	0800b2ad 	.word	0x0800b2ad
 800b1e0:	0800b2ad 	.word	0x0800b2ad
 800b1e4:	0800b2ad 	.word	0x0800b2ad
 800b1e8:	0800b2ad 	.word	0x0800b2ad
 800b1ec:	0800b267 	.word	0x0800b267
 800b1f0:	0800b2ad 	.word	0x0800b2ad
 800b1f4:	0800b2ad 	.word	0x0800b2ad
 800b1f8:	0800b2ad 	.word	0x0800b2ad
 800b1fc:	0800b2ad 	.word	0x0800b2ad
 800b200:	0800b2ad 	.word	0x0800b2ad
 800b204:	0800b2ad 	.word	0x0800b2ad
 800b208:	0800b2ad 	.word	0x0800b2ad
 800b20c:	0800b2ad 	.word	0x0800b2ad
 800b210:	0800b2ad 	.word	0x0800b2ad
 800b214:	0800b2ad 	.word	0x0800b2ad
 800b218:	0800b2ad 	.word	0x0800b2ad
 800b21c:	0800b2ad 	.word	0x0800b2ad
 800b220:	0800b2ad 	.word	0x0800b2ad
 800b224:	0800b2ad 	.word	0x0800b2ad
 800b228:	0800b2ad 	.word	0x0800b2ad
 800b22c:	0800b29f 	.word	0x0800b29f
 800b230:	2b40      	cmp	r3, #64	@ 0x40
 800b232:	d037      	beq.n	800b2a4 <UART_SetConfig+0xc44>
 800b234:	e03a      	b.n	800b2ac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b236:	f7fb fca7 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 800b23a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b23c:	e03c      	b.n	800b2b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b23e:	f7fb fcb9 	bl	8006bb4 <HAL_RCC_GetPCLK2Freq>
 800b242:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b244:	e038      	b.n	800b2b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7fd fb50 	bl	80088f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b254:	e030      	b.n	800b2b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b256:	f107 0318 	add.w	r3, r7, #24
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fd fc9c 	bl	8008b98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b264:	e028      	b.n	800b2b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b266:	4b09      	ldr	r3, [pc, #36]	@ (800b28c <UART_SetConfig+0xc2c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f003 0320 	and.w	r3, r3, #32
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d012      	beq.n	800b298 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b272:	4b06      	ldr	r3, [pc, #24]	@ (800b28c <UART_SetConfig+0xc2c>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	08db      	lsrs	r3, r3, #3
 800b278:	f003 0303 	and.w	r3, r3, #3
 800b27c:	4a04      	ldr	r2, [pc, #16]	@ (800b290 <UART_SetConfig+0xc30>)
 800b27e:	fa22 f303 	lsr.w	r3, r2, r3
 800b282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b284:	e018      	b.n	800b2b8 <UART_SetConfig+0xc58>
 800b286:	bf00      	nop
 800b288:	0800bbfc 	.word	0x0800bbfc
 800b28c:	58024400 	.word	0x58024400
 800b290:	03d09000 	.word	0x03d09000
 800b294:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b298:	4b24      	ldr	r3, [pc, #144]	@ (800b32c <UART_SetConfig+0xccc>)
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b29c:	e00c      	b.n	800b2b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b29e:	4b24      	ldr	r3, [pc, #144]	@ (800b330 <UART_SetConfig+0xcd0>)
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a2:	e009      	b.n	800b2b8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2aa:	e005      	b.n	800b2b8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2b6:	bf00      	nop
    }

    if (pclk != 0U)
 800b2b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d021      	beq.n	800b302 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c2:	4a1c      	ldr	r2, [pc, #112]	@ (800b334 <UART_SetConfig+0xcd4>)
 800b2c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2cc:	fbb3 f2f2 	udiv	r2, r3, r2
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	085b      	lsrs	r3, r3, #1
 800b2d6:	441a      	add	r2, r3
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e4:	2b0f      	cmp	r3, #15
 800b2e6:	d909      	bls.n	800b2fc <UART_SetConfig+0xc9c>
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2ee:	d205      	bcs.n	800b2fc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	60da      	str	r2, [r3, #12]
 800b2fa:	e002      	b.n	800b302 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	2201      	movs	r2, #1
 800b306:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	2200      	movs	r2, #0
 800b316:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	2200      	movs	r2, #0
 800b31c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b31e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b322:	4618      	mov	r0, r3
 800b324:	3748      	adds	r7, #72	@ 0x48
 800b326:	46bd      	mov	sp, r7
 800b328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b32c:	03d09000 	.word	0x03d09000
 800b330:	003d0900 	.word	0x003d0900
 800b334:	0800bbfc 	.word	0x0800bbfc

0800b338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b344:	f003 0308 	and.w	r3, r3, #8
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00a      	beq.n	800b362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00a      	beq.n	800b384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	430a      	orrs	r2, r1
 800b382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b388:	f003 0302 	and.w	r3, r3, #2
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00a      	beq.n	800b3a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	430a      	orrs	r2, r1
 800b3a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3aa:	f003 0304 	and.w	r3, r3, #4
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00a      	beq.n	800b3c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	430a      	orrs	r2, r1
 800b3c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3cc:	f003 0310 	and.w	r3, r3, #16
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00a      	beq.n	800b3ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ee:	f003 0320 	and.w	r3, r3, #32
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00a      	beq.n	800b40c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	430a      	orrs	r2, r1
 800b40a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b414:	2b00      	cmp	r3, #0
 800b416:	d01a      	beq.n	800b44e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	430a      	orrs	r2, r1
 800b42c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b436:	d10a      	bne.n	800b44e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	430a      	orrs	r2, r1
 800b44c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00a      	beq.n	800b470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	430a      	orrs	r2, r1
 800b46e:	605a      	str	r2, [r3, #4]
  }
}
 800b470:	bf00      	nop
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b098      	sub	sp, #96	@ 0x60
 800b480:	af02      	add	r7, sp, #8
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b48c:	f7f6 f91c 	bl	80016c8 <HAL_GetTick>
 800b490:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0308 	and.w	r3, r3, #8
 800b49c:	2b08      	cmp	r3, #8
 800b49e:	d12f      	bne.n	800b500 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f88e 	bl	800b5d0 <UART_WaitOnFlagUntilTimeout>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d022      	beq.n	800b500 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c2:	e853 3f00 	ldrex	r3, [r3]
 800b4c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b4de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4e0:	e841 2300 	strex	r3, r2, [r1]
 800b4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1e6      	bne.n	800b4ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e063      	b.n	800b5c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 0304 	and.w	r3, r3, #4
 800b50a:	2b04      	cmp	r3, #4
 800b50c:	d149      	bne.n	800b5a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b50e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b516:	2200      	movs	r2, #0
 800b518:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f857 	bl	800b5d0 <UART_WaitOnFlagUntilTimeout>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d03c      	beq.n	800b5a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b530:	e853 3f00 	ldrex	r3, [r3]
 800b534:	623b      	str	r3, [r7, #32]
   return(result);
 800b536:	6a3b      	ldr	r3, [r7, #32]
 800b538:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b53c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b546:	633b      	str	r3, [r7, #48]	@ 0x30
 800b548:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b54c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b54e:	e841 2300 	strex	r3, r2, [r1]
 800b552:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1e6      	bne.n	800b528 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	3308      	adds	r3, #8
 800b560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	e853 3f00 	ldrex	r3, [r3]
 800b568:	60fb      	str	r3, [r7, #12]
   return(result);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f023 0301 	bic.w	r3, r3, #1
 800b570:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	3308      	adds	r3, #8
 800b578:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b57a:	61fa      	str	r2, [r7, #28]
 800b57c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57e:	69b9      	ldr	r1, [r7, #24]
 800b580:	69fa      	ldr	r2, [r7, #28]
 800b582:	e841 2300 	strex	r3, r2, [r1]
 800b586:	617b      	str	r3, [r7, #20]
   return(result);
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1e5      	bne.n	800b55a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2220      	movs	r2, #32
 800b592:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b59e:	2303      	movs	r3, #3
 800b5a0:	e012      	b.n	800b5c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2220      	movs	r2, #32
 800b5a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3758      	adds	r7, #88	@ 0x58
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	603b      	str	r3, [r7, #0]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5e0:	e04f      	b.n	800b682 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e8:	d04b      	beq.n	800b682 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5ea:	f7f6 f86d 	bl	80016c8 <HAL_GetTick>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	1ad3      	subs	r3, r2, r3
 800b5f4:	69ba      	ldr	r2, [r7, #24]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d302      	bcc.n	800b600 <UART_WaitOnFlagUntilTimeout+0x30>
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b600:	2303      	movs	r3, #3
 800b602:	e04e      	b.n	800b6a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f003 0304 	and.w	r3, r3, #4
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d037      	beq.n	800b682 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	2b80      	cmp	r3, #128	@ 0x80
 800b616:	d034      	beq.n	800b682 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	2b40      	cmp	r3, #64	@ 0x40
 800b61c:	d031      	beq.n	800b682 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	69db      	ldr	r3, [r3, #28]
 800b624:	f003 0308 	and.w	r3, r3, #8
 800b628:	2b08      	cmp	r3, #8
 800b62a:	d110      	bne.n	800b64e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2208      	movs	r2, #8
 800b632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 f839 	bl	800b6ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2208      	movs	r2, #8
 800b63e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e029      	b.n	800b6a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b65c:	d111      	bne.n	800b682 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 f81f 	bl	800b6ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2220      	movs	r2, #32
 800b672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b67e:	2303      	movs	r3, #3
 800b680:	e00f      	b.n	800b6a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	69da      	ldr	r2, [r3, #28]
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	4013      	ands	r3, r2
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	429a      	cmp	r2, r3
 800b690:	bf0c      	ite	eq
 800b692:	2301      	moveq	r3, #1
 800b694:	2300      	movne	r3, #0
 800b696:	b2db      	uxtb	r3, r3
 800b698:	461a      	mov	r2, r3
 800b69a:	79fb      	ldrb	r3, [r7, #7]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d0a0      	beq.n	800b5e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
	...

0800b6ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b095      	sub	sp, #84	@ 0x54
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6bc:	e853 3f00 	ldrex	r3, [r3]
 800b6c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b6d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b6da:	e841 2300 	strex	r3, r2, [r1]
 800b6de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1e6      	bne.n	800b6b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	3308      	adds	r3, #8
 800b6ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ee:	6a3b      	ldr	r3, [r7, #32]
 800b6f0:	e853 3f00 	ldrex	r3, [r3]
 800b6f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6f6:	69fa      	ldr	r2, [r7, #28]
 800b6f8:	4b1e      	ldr	r3, [pc, #120]	@ (800b774 <UART_EndRxTransfer+0xc8>)
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3308      	adds	r3, #8
 800b704:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b708:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b70c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b70e:	e841 2300 	strex	r3, r2, [r1]
 800b712:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1e5      	bne.n	800b6e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d118      	bne.n	800b754 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	e853 3f00 	ldrex	r3, [r3]
 800b72e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	f023 0310 	bic.w	r3, r3, #16
 800b736:	647b      	str	r3, [r7, #68]	@ 0x44
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	461a      	mov	r2, r3
 800b73e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b740:	61bb      	str	r3, [r7, #24]
 800b742:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b744:	6979      	ldr	r1, [r7, #20]
 800b746:	69ba      	ldr	r2, [r7, #24]
 800b748:	e841 2300 	strex	r3, r2, [r1]
 800b74c:	613b      	str	r3, [r7, #16]
   return(result);
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1e6      	bne.n	800b722 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2220      	movs	r2, #32
 800b758:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b768:	bf00      	nop
 800b76a:	3754      	adds	r7, #84	@ 0x54
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr
 800b774:	effffffe 	.word	0xeffffffe

0800b778 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b786:	2b01      	cmp	r3, #1
 800b788:	d101      	bne.n	800b78e <HAL_UARTEx_DisableFifoMode+0x16>
 800b78a:	2302      	movs	r3, #2
 800b78c:	e027      	b.n	800b7de <HAL_UARTEx_DisableFifoMode+0x66>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2224      	movs	r2, #36	@ 0x24
 800b79a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f022 0201 	bic.w	r2, r2, #1
 800b7b4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b7bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2220      	movs	r2, #32
 800b7d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3714      	adds	r7, #20
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d101      	bne.n	800b802 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b7fe:	2302      	movs	r3, #2
 800b800:	e02d      	b.n	800b85e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2224      	movs	r2, #36	@ 0x24
 800b80e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f022 0201 	bic.w	r2, r2, #1
 800b828:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	430a      	orrs	r2, r1
 800b83c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f850 	bl	800b8e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2220      	movs	r2, #32
 800b850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b876:	2b01      	cmp	r3, #1
 800b878:	d101      	bne.n	800b87e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b87a:	2302      	movs	r3, #2
 800b87c:	e02d      	b.n	800b8da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2201      	movs	r2, #1
 800b882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2224      	movs	r2, #36	@ 0x24
 800b88a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f022 0201 	bic.w	r2, r2, #1
 800b8a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	683a      	ldr	r2, [r7, #0]
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f812 	bl	800b8e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2220      	movs	r2, #32
 800b8cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
	...

0800b8e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d108      	bne.n	800b906 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b904:	e031      	b.n	800b96a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b906:	2310      	movs	r3, #16
 800b908:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b90a:	2310      	movs	r3, #16
 800b90c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	0e5b      	lsrs	r3, r3, #25
 800b916:	b2db      	uxtb	r3, r3
 800b918:	f003 0307 	and.w	r3, r3, #7
 800b91c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	0f5b      	lsrs	r3, r3, #29
 800b926:	b2db      	uxtb	r3, r3
 800b928:	f003 0307 	and.w	r3, r3, #7
 800b92c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b92e:	7bbb      	ldrb	r3, [r7, #14]
 800b930:	7b3a      	ldrb	r2, [r7, #12]
 800b932:	4911      	ldr	r1, [pc, #68]	@ (800b978 <UARTEx_SetNbDataToProcess+0x94>)
 800b934:	5c8a      	ldrb	r2, [r1, r2]
 800b936:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b93a:	7b3a      	ldrb	r2, [r7, #12]
 800b93c:	490f      	ldr	r1, [pc, #60]	@ (800b97c <UARTEx_SetNbDataToProcess+0x98>)
 800b93e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b940:	fb93 f3f2 	sdiv	r3, r3, r2
 800b944:	b29a      	uxth	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
 800b94e:	7b7a      	ldrb	r2, [r7, #13]
 800b950:	4909      	ldr	r1, [pc, #36]	@ (800b978 <UARTEx_SetNbDataToProcess+0x94>)
 800b952:	5c8a      	ldrb	r2, [r1, r2]
 800b954:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b958:	7b7a      	ldrb	r2, [r7, #13]
 800b95a:	4908      	ldr	r1, [pc, #32]	@ (800b97c <UARTEx_SetNbDataToProcess+0x98>)
 800b95c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b95e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b962:	b29a      	uxth	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b96a:	bf00      	nop
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	0800bc14 	.word	0x0800bc14
 800b97c:	0800bc1c 	.word	0x0800bc1c

0800b980 <memset>:
 800b980:	4402      	add	r2, r0
 800b982:	4603      	mov	r3, r0
 800b984:	4293      	cmp	r3, r2
 800b986:	d100      	bne.n	800b98a <memset+0xa>
 800b988:	4770      	bx	lr
 800b98a:	f803 1b01 	strb.w	r1, [r3], #1
 800b98e:	e7f9      	b.n	800b984 <memset+0x4>

0800b990 <__libc_init_array>:
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	4d0d      	ldr	r5, [pc, #52]	@ (800b9c8 <__libc_init_array+0x38>)
 800b994:	4c0d      	ldr	r4, [pc, #52]	@ (800b9cc <__libc_init_array+0x3c>)
 800b996:	1b64      	subs	r4, r4, r5
 800b998:	10a4      	asrs	r4, r4, #2
 800b99a:	2600      	movs	r6, #0
 800b99c:	42a6      	cmp	r6, r4
 800b99e:	d109      	bne.n	800b9b4 <__libc_init_array+0x24>
 800b9a0:	4d0b      	ldr	r5, [pc, #44]	@ (800b9d0 <__libc_init_array+0x40>)
 800b9a2:	4c0c      	ldr	r4, [pc, #48]	@ (800b9d4 <__libc_init_array+0x44>)
 800b9a4:	f000 f826 	bl	800b9f4 <_init>
 800b9a8:	1b64      	subs	r4, r4, r5
 800b9aa:	10a4      	asrs	r4, r4, #2
 800b9ac:	2600      	movs	r6, #0
 800b9ae:	42a6      	cmp	r6, r4
 800b9b0:	d105      	bne.n	800b9be <__libc_init_array+0x2e>
 800b9b2:	bd70      	pop	{r4, r5, r6, pc}
 800b9b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9b8:	4798      	blx	r3
 800b9ba:	3601      	adds	r6, #1
 800b9bc:	e7ee      	b.n	800b99c <__libc_init_array+0xc>
 800b9be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9c2:	4798      	blx	r3
 800b9c4:	3601      	adds	r6, #1
 800b9c6:	e7f2      	b.n	800b9ae <__libc_init_array+0x1e>
 800b9c8:	0800bc2c 	.word	0x0800bc2c
 800b9cc:	0800bc2c 	.word	0x0800bc2c
 800b9d0:	0800bc2c 	.word	0x0800bc2c
 800b9d4:	0800bc30 	.word	0x0800bc30

0800b9d8 <memcpy>:
 800b9d8:	440a      	add	r2, r1
 800b9da:	4291      	cmp	r1, r2
 800b9dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9e0:	d100      	bne.n	800b9e4 <memcpy+0xc>
 800b9e2:	4770      	bx	lr
 800b9e4:	b510      	push	{r4, lr}
 800b9e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9ee:	4291      	cmp	r1, r2
 800b9f0:	d1f9      	bne.n	800b9e6 <memcpy+0xe>
 800b9f2:	bd10      	pop	{r4, pc}

0800b9f4 <_init>:
 800b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f6:	bf00      	nop
 800b9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fa:	bc08      	pop	{r3}
 800b9fc:	469e      	mov	lr, r3
 800b9fe:	4770      	bx	lr

0800ba00 <_fini>:
 800ba00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba02:	bf00      	nop
 800ba04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba06:	bc08      	pop	{r3}
 800ba08:	469e      	mov	lr, r3
 800ba0a:	4770      	bx	lr
